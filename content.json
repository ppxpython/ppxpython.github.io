{"meta":{"title":"SUM","subtitle":"会者定离，一期一祈， 感谢在这与你相遇","description":"","author":"Yang shuping","url":"https://ppxpython.github.io","root":"/"},"pages":[{"title":"about","date":"2020-09-27T00:44:38.000Z","updated":"2020-09-27T01:09:20.000Z","comments":true,"path":"about/index.html","permalink":"https://ppxpython.github.io/about/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"categories","date":"2020-09-27T00:44:38.000Z","updated":"2020-09-27T08:50:10.000Z","comments":false,"path":"categories/index.html","permalink":"https://ppxpython.github.io/categories/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"tages","date":"2020-09-27T00:44:38.000Z","updated":"2020-09-27T01:09:20.000Z","comments":false,"path":"tags/index.html","permalink":"https://ppxpython.github.io/tags/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"}],"posts":[{"title":"win10笔记本插上耳机没声音设置","slug":"win10笔记本插上耳机没声音设置","date":"2021-07-03T04:32:10.000Z","updated":"2021-07-03T04:36:10.415Z","comments":true,"path":"win10笔记本插上耳机没声音设置/","link":"","permalink":"https://ppxpython.github.io/win10%E7%AC%94%E8%AE%B0%E6%9C%AC%E6%8F%92%E4%B8%8A%E8%80%B3%E6%9C%BA%E6%B2%A1%E5%A3%B0%E9%9F%B3%E8%AE%BE%E7%BD%AE/","excerpt":"","text":"win10 笔记本插上耳机没有声音 前言 一、禁用插孔设置 二、检查驱动 三、重置扬声器 (文章目录) # 前言 # 一、禁用插孔设置 1 点击电脑左下方的 “开始” 图标，找到 “控制面板” 选项进入。 2 然后在控制面板的页面中找到 “硬件与声音”，点击进入。 3 然后找到下方的 “Realtek 高清晰音频管理器”，点击进入。 4 进入 Realtek 高清晰音频管理器界面后，点击禁用插孔设置的图标，如下图所示。 5 勾选 “禁用前面板插孔检测”，点击确定。 # 二、检查驱动 1 找到电脑桌面上的” 计算机 “，单击鼠标右键，选择” 属性 “。 2 然后在属性的页面中，选择 “设备管理器”，点击进入。 3 检查音频驱动，点击下图中选中的部分，查看相应的驱动是否有感叹号之类的符号，如果有，重装驱动，然后重启。 # 三、重置扬声器 1 打开控制面板，找到 “硬件与声音”，点击进入。 2 在硬件与声音的页面中，选择声音中的 “更改系统声音”。 3 然后选择 “声音”，重新选择 “声音方案” 为 “windows 默认”，点击确定，然后重启电脑即可。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]},{"title":"win10专业版激活","slug":"win10专业版激活","date":"2021-07-03T03:59:02.000Z","updated":"2021-07-08T13:03:54.782Z","comments":true,"path":"win10专业版激活/","link":"","permalink":"https://ppxpython.github.io/win10%E4%B8%93%E4%B8%9A%E7%89%88%E6%BF%80%E6%B4%BB/","excerpt":"","text":"前言 一、激活win10专业版 1.激活方法 win10专业版用户请依次输入： win10企业版用户请依次输入： win10家庭版用户依次输入： 专业版采用步骤： (文章目录) # 前言 相关 win10 的一些常用操作 # 一、激活 win10 专业版 # 1. 激活方法 系统安装完毕后，首先以管理员身份打开 CMD 命令行窗口，按下 Win+X，选择命令提示符 (管理员)。 说明：kms.xspace.in 是 kms 服务器地址，可能会失效，如果激活失败，可以自行搜索 kms 服务器地址，将 kms.xspace.in 替换成新的地址即可，比如换成 kms.03k.org，参考可用的 kms 激活服务器有哪些 # win10 专业版用户请依次输入： 1 打开 cmd slmgr /ipk W269N-WFGWX-YVC9B-4J6C9-T83GXslmgr /skms kms.03k.orgslmgr /ato# win10 企业版用户请依次输入： slmgr /ipk NPPR9-FWDCX-D2C8J-H872K-2YT43slmgr /skms kms.03k.orgslmgr /ato# win10 家庭版用户依次输入： slmgr /ipk TX9XD-98N7V-6WMQ6-BX7FG-H8Q99slmgr /skms kms.03k.orgslmgr /ato# 专业版采用步骤： document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]},{"title":"01钉钉小程序","slug":"computer-science/DDapp/ddapp-study1/01钉钉小程序","date":"2021-05-13T08:39:51.000Z","updated":"2021-05-13T08:52:11.711Z","comments":true,"path":"computer-science/DDapp/ddapp-study1/01钉钉小程序/","link":"","permalink":"https://ppxpython.github.io/computer-science/DDapp/ddapp-study1/01%E9%92%89%E9%92%89%E5%B0%8F%E7%A8%8B%E5%BA%8F/","excerpt":"","text":"# 钉钉小程序学习记录 学习记录 钉钉小程序学习记录 前言 一、钉钉小程序 二、使用步骤 1.搭建应用环境 (文章目录) &lt;/font&gt; &lt;hr style=\" border:solid; width:100px; height:1px;\" color=#000000 size=1\"&gt; # 前言 小程序开发优点 &lt;hr style=\" border:solid; width:100px; height:1px;\" color=#000000 size=1\"&gt; 1 轻量 便捷 2 开发成本低 3 用户集群大 4 封装好的小程序语言，语法简单 由于开发时，发现钉钉小程序教程较少，因此在开发过程中作为纪录。适用于小白。 # 一、钉钉小程序 采用钉钉小程序的原因： 1 钉钉作为一中国企业管理而生的企业应用，用户集群大 2 钉钉拥有完整的企业组织架构，无需其他应用人员导入 3 钉钉提供丰富的 API 接口供开发者使用 4 拥有监控平台更好管控 API 和数据的调用，实现实时监控，及时发现问题 # 二、使用步骤 # 1. 搭建应用环境 本次将钉钉小程序作为前端 下载工具： 1 java 2 小程序开发者工具为开发工具小程序开发者工具下载地址 此外钉钉开发者，提供接口调试工具，方便开发者调用 API 调参。 钉钉小程序在线调参工具地址 登陆钉钉后台钉钉后台 创建一个钉钉组织或者成为钉钉组织管理员 2. 在弹出的创建应用页面中填写基本信息，然后单击确定创建。 应用类型：选择小程序。 开发方式：选择企业自助开发。 应用创建完成后，在基础信息页面，复制应用的 AppKey 和 AppSecret 备用。 5. 单击开发管理进入开发管理页面，然后单击修改，并根据以下内容配置开发信息。 服务器出口 IP：输入调用钉钉服务端 API 时使用的 IP 即企业服务器的公网 IP，多个 IP 请以英文逗号 \",\" 隔开，支持带一个 * 号通配符的 IP 格式。 本教程设置为本机的公网 IP：30.40.xx.xx。 PC 端首页地址（可选）：输入在 PC 端钉钉工作台上打开本应用的地址。链接地址必须以 http 或 https 开头。 本教程设置为：https://ding-doc.dingtalk.com/。 管理后台地址（可选）：输入组织管理员在钉钉管理后台访问该应用的地址。 6 单击人员管理，然后单击添加人员添加开发人员。 单击安全中心，然后单击添加添加一个 HTTP 安全域名。 当小程序的前端与服务端需要进行网络通信时，需要设置安全域名。小程序前端只能通过已设置的安全域名（或 IP）与服务端进行网络通信。当安全域名更新时，需要在小程序开发工具重新打包上传版本，设置的域名才会生效。 安全域名是后端服务部署的服务器的公网 IP 或域名，本教程输入 127.0.0.1。 单击权限管理进入权限管理页面，然后根据以下配置添加接口调用权限。 权限范围选择全部员工，然后选择通讯录管理。 选择通讯录部门信息读权限和通讯录部门成员读权限，然后单击申请权限。 之后可以在小程序开发者工具中创建一个简单的 demo 创建好后的目录 模拟器效果： 1 app.js 全文逻辑 用来设置全局变量，以及页面配置 配置路由，创建一个新的页面必须，在这配置相对路径 页面导航栏的设置 存放照片 页面，主要在这编写代码 每个页面由这几个组成 公共资源存放 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"计算机科学","slug":"computer-science","permalink":"https://ppxpython.github.io/categories/computer-science/"},{"name":"钉钉小程序","slug":"computer-science/DDapp","permalink":"https://ppxpython.github.io/categories/computer-science/DDapp/"},{"name":"钉钉小程序学习","slug":"computer-science/DDapp/ddapp-study1","permalink":"https://ppxpython.github.io/categories/computer-science/DDapp/ddapp-study1/"}],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2021-04-21T15:09:06.539Z","updated":"2020-09-27T00:58:28.000Z","comments":true,"path":"hello-world/","link":"","permalink":"https://ppxpython.github.io/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. # Quick Start # Create a new post $ hexo new \"My New Post\" More info: Writing # Run server $ hexo server More info: Server # Generate static files $ hexo generate More info: Generating # Deploy to remote sites $ hexo deploy More info: Deployment document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]},{"title":"用hexo搭建一个自己的博客","slug":"用hexo搭建一个自己的博客","date":"2020-10-22T08:51:04.000Z","updated":"2020-10-22T08:52:30.000Z","comments":true,"path":"用hexo搭建一个自己的博客/","link":"","permalink":"https://ppxpython.github.io/%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"# 系列文章目录 系列文章目录 前言 一、Hexo是什么？ 二、安装Hexo 1.安装node.JS 1.下载安装包 2、安装 3、配置npm在安装全局模块时的路径和缓存cache的路径 4.测试 5.安装已完成 2.npm配置 三、开始搭建Hexo 1.创建本地hexo博客 2.github中博客 3.gitee中博客 3.更改主题 总结 (文章目录) # 前言 分享搭建 hexo 个人博客的过程 参考文档链接在 总结模块中 # 一、Hexo 是什么？ Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。即把用户的 markdown 文件，按照指定的主题解析成静态网页。 # 二、安装 Hexo 安装 Hexo 钱需要一些环境依赖，接下来我们就来一步一步安装 # 1. 安装 node.JS # 1. 下载安装包 Node.js 官方网站下载：https://nodejs.org/en/node.js 官网 选择操作系统对应的包： 下载完成，安装包如下： # 2、安装 打开安装，傻瓜式下一步即可： 选择安装位置，我这里装在 D 盘下： 安装成功，文件夹结构如下，并在上面安装过程中已自动配置了环境变量和安装好了 npm 包，此时可以执行 node -v 和 npm -v 分别查看 node 和 npm 的版本号： # 3、配置 npm 在安装全局模块时的路径和缓存 cache 的路径 因为在执行例如 npm install webpack -g 等命令全局安装的时候，默认会将模块安装在 C:\\Users\\ 用户名 \\AppData\\Roaming 路径下的 npm 和 npm_cache 中，不方便管理且占用 C 盘空间，如下图所示： 所以这里配置自定义的全局模块安装目录，在 node.js 安装目录下新建两个文件夹 node_global 和 node_cache，然后在 cmd 命令下执行如下两个命令： npm config set prefix \"D:\\Program Files\\nodejs\\node_global\" npm config set cache \"D:\\Program Files\\nodejs\\node_cache\" 执行成功。然后在环境变量 -&gt; 系统变量中新建一个变量名为 “NODE_PATH” ， 值为 “D:\\Program Files\\nodejs\\node_modules” ，如下图： 最后编辑用户变量里的 Path，将相应 npm 的路径改为： D:\\Program Files\\nodejs\\node_global ，如下： 更改前： 更改后： 配置完成。 # 4. 测试 安装完成后可以使用 cmd（win+r 然后输入 cmd 进入）测试下是否安装成功。 方法：在 cmd 下输入 node -v ，出现下图版本提示就是完成了 NodeJS 的安装。 # 5. 安装已完成 常规 NodeJS 的搭建到现在为止已经完成了。 # 2.npm 配置 6、npm 配置 npm 作为一个 NodeJS 的模块管理，很有必要列出一些： ①、模块路径、cache 路径 先配置 npm 的全局模块的存放路径以及 cache 的路径， 例如希望将以上两个文件夹放在 NodeJS 的主目录下，便在 NodeJs 下建立 \"node_global\" 及 \"node_cache\" 两个文件夹。如下图 ②、使用 cmd 命令进行配置 启动 cmd，输入 npm config set prefix \"H:\\nodejs\\node_global\"npm config set cache \"H:\\nodejs\\node_cache\"如果不进行这一步设置，npm 的全局安装包，将不会在 node 安装文件夹里。 如果这个步骤出现错误，如：operation not permitted, mkdir 'C:\\Program Files\\nodejs'，请使用管理员身份打开 cmd 命令行。 ③、测试 现在我们来装个模块试试， 在 cmd 命令行里面，输入 “ npm install express -g ”（“-g” 这个参数意思是装到 global 目录下，也就是上面说设置的 “H:\\nodejs\\node_global” 里面。）。 ④、查看环境变量 ⑤、配置 node_path 进入环境变量对话框，在系统变量下新建 \"NODE_PATH\"，输入” H:\\nodejs\\node_global\\node_modules“ 。（ps：这一步相当关键。） 2014.4.19 新增：由于改变了 module 的默认地址，所以上面的用户变量都要跟着改变一下（用户变量 \"PATH\" 修改为 “H:\\nodejs\\node_global\\”），要不使用 module 的时候会导致输入命令出现 “xxx 不是内部或外部命令，也不是可运行的程序或批处理文件” 这个错误。 8、安装淘宝 npm（cnpm） (1) 输入以下命令 npm install -g cnpm --registry = https：//registry.npm.taobao.org(2) 添加系统变量 path 的内容 因为 cnpm 会被安装到 H:nodejs\\node_global 下，而系统变量 path 并未包含该路径。在系统变量 path 下添加该路径即可正常使用 cnpm。 (3) 输入 cnpm -v 命令，查看结果 测试 cnpm cnpm -v # 三、开始搭建 Hexo # 1. 创建本地 hexo 博客 cnpm install -g hexo-cli全局安装框架 验证 hexo -v 安装完成、 创建项目目录空文件夹 testblog 初始化 hexo hexo init需要等待一段时间 初始化成功 dir查看生成的文件 启动 hexo hexo s 启动成功 先断开 创建我的第一篇博客文章： hexo n \"我的第一篇博客文章\" 查看文章 cd source/_posts/dir 编写博客内容 回退目录 cd..cd.. 清理博客 hexo clean 生成博客 hexo g 重新启动 hexo s 新文章生成： # 2.github 中博客 github 创建一个仓库 用户名.github.io 一定要是这样的格式否则会报错 config.yml 中修改 deploy: type: 'git' repo: https://github.com/ppxpython/ppxpython.github.io.git branch: master hexo clean hexo g hexo d 刷新查看仓库 打开网址： https://ppxpython.github.io/ # 3.gitee 中博客 在 gitee 上创建一个仓库 安装工具 cnpm install --save hexo-deployer-git dir查看 需要设置 config.yml 文件 打开文件到最下面更改 # Deployment## Docs: https://hexo.io/docs/one-command-deploymentdeploy: type: 'git' repo: https://gitee.com/ppxpython/testblog.git bronch: master 没有引号都没关系 部署远端 hexo d 成功 刷新 gitee 显示代码： 点击： 显示： 启动成功： 网页： 发现没有样式，不要着急，更改配置文件： url: https://ppxpython.gitee.io/testblog hexo clean hexo d 在 gitee 上查看更新 # 3. 更改主题 下载主题： 选择自己喜欢的主题 git clone https://github.com/ShanaMaid/hexo-theme-shana.git themes/ShanaMaid 修改配置文件 hexo clean本地查看 hexo s 效果： http://localhost:4000/easyblog/ hexo d部署上去 在 gitee 上更新一下 部署成功，点击网址，查看我的博客 最后附上 我的博客： https://ppxpython.github.io/ # 总结 参照的链接这里附上： Node.js 安装链接 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]},{"title":"01postman学习","slug":"software-test/test-tools/api-testing2/postman/01postman学习","date":"2020-10-20T01:00:40.000Z","updated":"2020-10-20T07:16:00.000Z","comments":true,"path":"software-test/test-tools/api-testing2/postman/01postman学习/","link":"","permalink":"https://ppxpython.github.io/software-test/test-tools/api-testing2/postman/01postman%E5%AD%A6%E4%B9%A0/","excerpt":"","text":"# 系列文章目录 系列文章目录 前言 一、postman是什么？ 二、 接口是什么？ 三、 接口测试和接口测试的目的 1.什么是接口测试 2.为什么要进行接口测试 3.接口测试重点 4.接口测试分类 四、postman进行接口测试 1.HTTP知识 2.增加断言 3.编写一个测试实例 4.sandbox 5.请求方法 6.cookie 7.鉴权 （1）什么是鉴权 （2）鉴权方式 8.cllection容器 集合概述 Collection 常用API 9. 变量 10. 环境变量方法1实例 11.全局变量方法二实例 12.运行collection 13.运行collection实例生成HTML测试报告 14.postman导出python脚本 5、postman中断言和抓包 1.测试断言 2.postman中充当代理进行app抓包 总结 (文章目录) # 前言 本文为视频学习的截图记录， 用途：以方便以后学习翻阅 主要以图片的形式展现 这里附上视频链接：postman 学习 # 一、postman 是什么？ postman 是一个 HTTP 客户端，用于发送请求和接收响应，是专门用于测试 API 的工具 # 二、 接口是什么？ IT 行业从 WWW 万维网时代 的 C/S、B/S 架构，到移动互联网时代的大前端时代，发展到云计算时代以 IaaS（基础架构即服务），PaaS（平台即服务），SaaS（软件即服务）为代表的云端架构，如今更是进入到万物互联的物联网时代，网络连接着我们生活的方方面面，而承载这些连接的连接点，就是网络接口，接口是不同网络应用之间联系、交互、相互作用的入口和桥梁。 如下图，是接口在软件系统中所处位置的示意图： # 三、 接口测试和接口测试的目的 # 1. 什么是接口测试 百度百科中： 接口测试是测试系统组件间接口的一种测试。接口测试主要用于检测外部系统与系统之间以及内部各个子系统之间的交互点。测试的重点是要检查数据的交换，传递和控制管理过程，以及系统间的相互逻辑依赖关系等。 接口测试是测试系统组件间接口的一种测试， 主要用于测试系统与外部其他系统之间的接口， 以及系统内部各个子模块之间的接口。 # 2. 为什么要进行接口测试 现在很多系统前后端架构是分离的，因为不同端（前段，后端）的工作进度不一样，所以我们要针对最开始出来的接口，以及需要调用其他公司的（银行，支付宝，微信，qq 等）一些接口进行接口测试及验证数据，从安全层面来说，只依赖前端进行限制已经完全不能满足系统的安全要求（绕过前端太容易了）， 需要后端同样进行控制，在这种情况下就需要从接口层面进行验证。在这种情况下就需要从接口层面进行验证。前后端传输、日志打印等信息是否加密传输也是需要验证的，特别是涉及到用户的隐私信息，如身份证，银行卡等。 如今系统越来越复杂，传统的靠前端测试已经大大降低了效率，而且现在我们都推崇测试前移也叫 测试左移，希望测试能更早的介入测试，那接口测试就是一种及早介入的方式。例如传统测试，你是不是得等前后端都完成你才能进行测试，才能进行自动化代码编写。 而如果是接口测试，只需要前后端定义好接口，那这时自动化就可以介入编写接口 自动化测试代码，手工测试只需要后端代码完成就可以介入测试后端逻辑而不用等待前端工作完成。 简单概括： ①. 越底层发现 bug，它的修复成本是越低的。 ②. 前端随便变，接口测好了，后端不用变，前后端是两拨人开发的。 ③. 检查系统的安全性、稳定性，前端传参不可信，比如京东购物，前端价格不可能传入 - 1 元，但是通过接口可以传入 - 1 元。 ④. 如今的系统复杂度不断上升，传统的测试方法成本急剧增加且测试效率大幅下降，接口测试可以提供这种情况下的解决方案。 ⑤. 接口测试相对容易实现自动化持续集成，且相对 UI 自动化也比较稳定，可以减少人工回归测试人力成本与时间，缩短测试周期，支持后端快速发版需求。接口持续集成是为什么能低成本高收益的根源。 ⑥. 现在很多系统前后端架构是分离的，从安全层面来说： (1)、只依赖前端进行限制已经完全不能满足系统的安全要求（绕过前面实在太容易）， 需要后端同样进行控制，在这种情况下就需要从接口层面进行验证。 (2)、前后端传输、日志打印等信息是否加密传输也是需要验证的，特别是涉及到用户的隐私信息，如身份证，银行卡等。 # 3. 接口测试重点 测试的重点是 检查接口参数传递的正确性 检查 接口功能实现的正确性 检查输出结果的正确性 检查各种异常情况的容错处理的完整性和合理性 保证系统的正确和稳定为核心，重要性主要体现为以下几个方面： （1）能够提早发现 bug，符合质量控制前移的理念。 （2）接口测试低成本高效益，因为接口测试可以自动化并且是持续集成的。 （3）接口测试从用户的角度对系统接口进行全面检测。实际项目中，接口测试会覆盖一定程度的业务逻辑 # 4. 接口测试分类 针对软件接口的分类一般有如下几种情况： 系统与系统之间的调用 如微信向用户提供统一的对外接口，程序员调用接口完成基于微信的小程序等； 同一系统内部上层服务对下层服务的调用 如一个软件程序一般分为表示层，业务层和数据层，表示层调用业务层的接口来完成自己的工作，而业务层又会调用数据层的接口来实现相应的业务等。 # 四、postman 进行接口测试 # 1.HTTP 知识 HTTP 是超文本传输协议，其定义了客户端与服务器端之间文本传输的规范。HTTP 默认使用 80 端口，这个端口指的是服务端的端口，而客户端使用的端口是动态分配的。当我们没有指定端口访问时，浏览器会默认帮我们添加 80 端口。 需要注意的是，现在大多数访问都使用了 HTTPS 协议，而 HTTPS 的默认端口为 443，如果使用 80 端口访问 HTTPS 协议的服务器可能会被拒绝。 HTTP 请求 / 响应的步骤： 客户端连接到 Web 服务器 -&gt; 发送 Http 请求 -&gt; 服务器接受请求并返回 HTTP 响应 -&gt; 释放连接 TCP 连接 -&gt; 客户端浏览器解析 HTML 内容 1、客户端连接到 Web 服务器 一个 HTTP 客户端，通常是浏览器，与 Web 服务器的 HTTP 端口（默认为 80）建立一个 TCP 套接字连接。例如，http://www.baidu.com 2、发送 HTTP 请求 通过 TCP 套接字，客户端向 Web 服务器发送一个文本的请求报文，一个请求报文由请求行、请求头部、空行和请求数据 4 部分组成。 3、服务器接受请求并返回 HTTP 响应 Web 服务器解析请求，定位请求资源。服务器将资源复本写到 TCP 套接字，由客户端读取。一个响应由状态行、响应头部、空行和响应数据 4 部分组成。 4、释放连接 TCP 连接 若 connection 模式为 close，则服务器主动关闭 TCP 连接，客户端被动关闭连接，释放 TCP 连接；若 connection 模式为 keepalive，则该连接会保持一段时间，在该时间内可以继续接收请求； 5、客户端浏览器解析 HTML 内容 客户端浏览器首先解析状态行，查看表明请求是否成功的状态代码。然后解析每一个响应头，响应头告知以下为若干字节的 HTML 文档和文档的字符集。客户端浏览器读取响应数据 HTML，根据 HTML 的语法对其进行格式化，并在浏览器窗口中显示。 GET 和 POST 请求： 如果是 get 请求的话，直接在浏览器里输入就行了，只要在浏览器里面直接能请求到的，都是 get 请求，如果是 post 的请求的话，就不行了，就得借助工具来发送。 GET 请求和 POST 请求的区别： 1、GET 使用 URL 或 Cookie 传参。而 POST 将数据放在 BODY 中。 2、GET 的 URL 会有长度上的限制，则 POST 的数据则可以非常大。 3、POST 比 GET 安全，因为数据在地址栏上不可见。 4、一般 get 请求用来获取数据，Post 请求用来发送数据。 2)、http 状态码 每发出一个 http 请求之后，都会有一个响应，http 本身会有一个状态码，来标示这个请求是否成功，常见的状态码有以下几种： 1、200 2 开头的都表示这个请求发送成功，最常见的就是 200，就代表这个请求是 ok 的，服务器也返回了。 2、300 3 开头的代表重定向，最常见的是 302，把这个请求重定向到别的地方了， 3、400 400 代表客户端发送的请求有语法错误，401 代表访问的页面没有授权，403 表示没有权限访问这个页面，404 代表没有这个页面 4、500 5 开头的代表服务器有异常，500 代表服务器内部异常，504 代表服务器端超时，没返回结果 常见的几种状态码： 200： OK 当您的操作将在响应正文中返回数据时，出现此结果。 201： 资源成功创建和更新 204： No Content 当您的操作成功，但不在响应正文中返回数据时，出现此结果。 301： 表示要从这个接口重定向到另外的接口（出现较多） 304： Not Modified（重定向） 当测试实体自上次检索以来是否被修改时，出现此结果。 400： 本来 api 必须要的参数但没有提供时，会出现 401： 需要登录才能访问的接口，未登录时会报 401 404： Not Found（客户端错误） 当资源不存在时，出现此结果。 405： Method Not Allowed（客户端错误）由于方法和资源组合不正确而出现此错误。 例如，您不能对一个实体集合使用 DELETE 或 PATCH。 412： Precondition Failed 客户端错误 413： Payload Too Large（客户端错误） 当请求长度过长时，出现此结果。 501： Not Implemented（服务器错误） 当未实施某个请求的操作时，出现此结果。 503： Service Unavailable（服务器错误） 当 Web API 服务不可用时，出现此结果。 # 2. 增加断言 一般断言时在 http 响应体中断言处理 # 3. 编写一个测试实例 测试目标 url： 测试目标 url 1. 输入网址： 2. 增加判断状态码和数据是否是 10 条的断言 代码： pm.test(\"状态码为200\", function () { pm.response.to.have.status(200);});pm.test(\"返回的数据为10\", function () { var jsonData = pm.response.json(); jsonData.length === 10 }); 返回的结果： # 4.sandbox postman 学习文档：https://learning.postman.com/docs/getting-started/introduction/ # 5. 请求方法 HTTP/1.1 协议中共定义了八种方法（有时也叫 “动作”），来表明 Request-URL 指定的资源不同的操作方式 HTTP1.0 定义了三种请求方法： GET, POST 和 HEAD 方法。 HTTP1.1 新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法 1、OPTIONS 返回服务器针对特定资源所支持的 HTTP 请求方法，也可以利用向 web 服务器发送‘*’的请求来测试服务器的功能性 2、HEAD 向服务器索与 GET 请求相一致的响应，只不过响应体将不会被返回。这一方法可以再不必传输整个响应内容的情况下，就可以获取包含在响应小消息头中的元信息。 3、GET 向特定的资源发出请求。注意：GET 方法不应当被用于产生 “副作用” 的操作中，例如在 Web Application 中，其中一个原因是 GET 可能会被网络蜘蛛等随意访问。Loadrunner 中对应 get 请求函数：web_link 和 web_url 4、POST 向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和 / 或已有资源的修改。 Loadrunner 中对应 POST 请求函数：web_submit_data,web_submit_form 5、PUT 向指定资源位置上传其最新内容 6、DELETE 请求服务器删除 Request-URL 所标识的资源 7、TRACE 回显服务器收到的请求，主要用于测试或诊断 8、CONNECT HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。 注意： 1）方法名称是区分大小写的，当某个请求所针对的资源不支持对应的请求方法的时候，服务器应当返回状态码 405（Mothod Not Allowed）；当服务器不认识或者不支持对应的请求方法时，应返回状态码 501（Not Implemented）。 2）HTTP 服务器至少应该实现 GET 和 HEAD/POST 方法，其他方法都是可选的，此外除上述方法，特定的 HTTP 服务器支持扩展自定义的方法。 # 6.cookie Cookie 的诞生 由于 HTTP 协议是无状态的，而服务器端的业务必须是要有状态的。Cookie 诞生的最初目的是为了存储 web 中的状态信息，以方便服务器端使用。比如判断用户是否是第一次访问网站。目前最新的规范是 RFC 6265，它是一个由浏览器服务器共同协作实现的规范。 Cookie 的处理分为： 服务器像客户端发送 cookie 浏览器将 cookie 保存 之后每次 http 请求浏览器都会将 cookie 发送给服务器端 服务器端的发送与解析 发送 cookie 服务器端像客户端发送 Cookie 是通过 HTTP 响应报文实现的，在 Set-Cookie 中设置需要像客户端发送的 cookie，cookie 格式如下： Set-Cookie: \"name=value;domain=.domain.com;path=/;expires=Sat, 11 Jun 2016 11:29:42 GMT;HttpOnly;secure\" 其中 name=value 是必选项，其它都是可选项。Cookie 的主要构成如下： name: 一个唯一确定的 cookie 名称。通常来讲 cookie 的名称是不区分大小写的。 value: 存储在 cookie 中的字符串值。最好为 cookie 的 name 和 value 进行 url 编码 domain: cookie 对于哪个域是有效的。所有向该域发送的请求中都会包含这个 cookie 信息。这个值可以包含子域 (如： yq.aliyun.com)，也可以不包含它 (如：.aliyun.com，则对于 aliyun.com 的所有子域都有效). path: 表示这个 cookie 影响到的路径，浏览器跟会根据这项配置，像指定域中匹配的路径发送 cookie。 expires: 失效时间，表示 cookie 何时应该被删除的时间戳 (也就是，何时应该停止向服务器发送这个 cookie)。如果不设置这个时间戳，浏览器会在页面关闭时即将删除所有 cookie；不过也可以自己设置删除时间。这个值是 GMT 时间格式，如果客户端和服务器端时间不一致，使用 expires 就会存在偏差。 max-age: 与 expires 作用相同，用来告诉浏览器此 cookie 多久过期（单位是秒），而不是一个固定的时间点。正常情况下，max-age 的优先级高于 expires。 HttpOnly: 告知浏览器不允许通过脚本 document.cookie 去更改这个值，同样这个值在 document.cookie 中也不可见。但在 http 请求张仍然会携带这个 cookie。注意这个值虽然在脚本中不可获取，但仍然在浏览器安装目录中以文件形式存在。这项设置通常在服务器端设置。 secure: 安全标志，指定后，只有在使用 SSL 链接时候才能发送到服务器，如果是 http 链接则不会传递该信息。就算设置了 secure 属性也并不代表他人不能看到你机器本地保存的 cookie 信息，所以不要把重要信息放 cookie 就对了服务器端设置。 # 7. 鉴权 # （1）什么是鉴权 鉴权（authentication）是指验证用户是否拥有访问系统的权利。传统的鉴权是通过密码来验证的。这种方式的前提是，每个获得密码的用户都已经被授权。在建立用户时，就为此用户分配一个密码，用户的密码可以由管理员指定，也可以由用户自行申请。这种方式的弱点十分明显：一旦密码被偷或用户遗失密码，情况就会十分麻烦，需要管理员对用户密码进行重新修改，而修改密码之前还要人工验证用户的合法身份。 为了克服这种鉴权方式的缺点，需要一个更加可靠的鉴权方式。目前的主流鉴权方式是利用认证授权来验证数字签名的正确与否。 逻辑上，授权发生在鉴权之后，而实际上，这两者常常是一个过程。 # （2）鉴权方式 我们常用的鉴权有四种： 1、HTTP Basic Authentication 2、session-cookie 3、Token 验证 4、OAuth (开放授权) 一般涉及到的都是 Token 有一些 api 在访问之前必须进行登录 一般测试人员在测试的时候只需要： 1. 获取 token（抓包，直接查看） 2. 设置 headers # 8.cllection 容器 # 集合概述 集合：集合是 java 中提供的一种容器，可以用来存储多个数据。 集合和数组既然都是容器，它们有什么区别呢？ 数组的长度是固定的。集合的长度是可变的。 数组中存储的是同一类型的元素，可以存储任意类型数据。集合存储的都是引用数据类型。如果想存储基本类型数据需要存储对应的包装类型。 集合常用类的继承体系 Collection： 单列集合类的根接口，用于存储一系列符合某种规则的元素，它有两个重要的子接口，分别是 java.util.List 和 java.util.Set。其中，List 的特点是元素有序、元素可重复。Set 的特点是元素不可重复。List 接口的主要实现类有 java.util.ArrayList 和 java.util.LinkedList，Set 接口的主要实现类有 java.util.HashSet 和 java.util.LinkedHashSet。 一张图来描述集合常用类的继承体系 集合本身是一个工具，它存放在 java.util 包中。在 Collection 接口定义着单列集合框架中最最共性的内容。 # Collection 常用 API Collection 是所有单列集合的父接口，因此在 Collection 中定义了单列集合 (List 和 Set) 通用的一些方法，这些方法可用于操作所有的单列集合。方法如下： public boolean add(E e)： 把给定的对象添加到当前集合中 。 public void clear(): 清空集合中所有的元素。 public boolean remove(E e): 把给定的对象在当前集合中删除。 public boolean contains(Object obj): 判断当前集合中是否包含给定的对象。 public boolean isEmpty(): 判断当前集合是否为空。 public int size(): 返回集合中元素的个数。 public Object[] toArray(): 把集合中的元素，存储到数组中 # 9. 变量 # 10. 环境变量方法 1 实例 实列： 接口文档： 接口文档 测试 url 打开 postman name=python，将 name 设置为全局变量时爆红，先要设置环境变量 点击 添加环境变量 变量改变颜色，编程橘黄色，send 后的结果 # 11. 全局变量方法二实例 环境变量是与 环境相关的 全局变量是独立于环境的 1. 先取消环境变量 点击 出现： 开始编辑 完成 注意：当环境变量和全局变量中对同一个个变量名进行不同的赋值时，环境变量的值可以覆盖到全局变量的值 # 12. 运行 collection # 13. 运行 collection 实例生成 HTML 测试报告 创建 collection 再创建一个 request 请求 点击运行 按钮在命令行中运行 跳转到网页： https://www.npmjs.com/package/newman 安装 newman npm install -g newman 在命令行中下载 newman 检验 newman 是否安装成功 重新回到 postman 导出到本地文件： 是一打开 cmder 或者 cmd 跳转到导出的目录下： 运行 # 14.postman 导出 python 脚本 首先安装 Python（这里已经安装） 查看 python 版本 pip 下载 requests 库（之前已经下载过）： 在 postman 中点击 Code 选择： 点击右上角复制： 创建一个 py 文件在 pycharm 中打开 import requestsimport unittestclass v2exAPITestCase(unittest.TestCase): def test_node_api(self): url = \"https://www.v2ex.com/api/nodes/show.json?name=python\" payload = {} querystring ={\"name\" :\"python\"} headers = { 'Cookie': '__cfduid=d333f7a16684a741d353302599a54b2921603071821' } response = requests.request(\"GET\", url, headers=headers, data=payload).json() self.assertEqual(response['name'], querystring['name']) # print(response.text.encode('utf8'))if __name__ == '__main__': unittest.main()运行成功 重新修改加入数据驱动 修改后的测试代码为： import requestsimport unittestclass v2exAPITestCase(unittest.TestCase): def test_node_api(self): url = \"https://www.v2ex.com/api/nodes/show.json?name=python\" payload = {} headers = { 'Cookie': '__cfduid=d333f7a16684a741d353302599a54b2921603071821' } # querystring ={\"name\" :\"python\"} for node_name in ['php','python','qna']: response = requests.request(\"GET\", url, headers=headers, params={'name': node_name}).json() self.assertEqual(response['name'], node_name)if __name__ == '__main__': unittest.main()运行成功 # 5、postman 中断言和抓包 # 1. 测试断言 断言：实际结果和期望结果的比对的过程 比对数据：状态码，返回数据，响应头，响应时间 在 test 中编写 js 进行断言 tm.response 是指相应对象 首先创建一个管理文件夹（集合） 存放一个项目中的所有接口测试便于管理 在 test 中编写断言 结果是绿色的表示通过 结果是红色的表示不通过 需要保存 js 代码是 Ctrl+S 键 输入请求名 选择存放接口的管理文件 # 2.postman 中充当代理进行 app 抓包 电脑 ——》postman——》手机 如何在 postman 中设置代理 postman 中 点击代理显示代理设置： 填写端口号 选择抓取到的包存放在哪个管理文件夹中 之后在手机上设置 端口号一定一致 服务器是电脑的 IP 设置之后在手机端操作会在 postman 中增加 requests 点击雷达代理的图案关闭代理 抓包是为了查看数据 # 总结 参考链接附上 postman 为什么要进行接口测试 postman 基础 http 请求方式 cookie collection 集合 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"软件测试","slug":"software-test","permalink":"https://ppxpython.github.io/categories/software-test/"},{"name":"软件测试工具学习","slug":"software-test/test-tools","permalink":"https://ppxpython.github.io/categories/software-test/test-tools/"},{"name":"接口测试工具","slug":"software-test/test-tools/api-testing2","permalink":"https://ppxpython.github.io/categories/software-test/test-tools/api-testing2/"},{"name":"Postman","slug":"software-test/test-tools/api-testing2/postman","permalink":"https://ppxpython.github.io/categories/software-test/test-tools/api-testing2/postman/"}],"tags":[{"name":"Postman","slug":"Postman","permalink":"https://ppxpython.github.io/tags/Postman/"}]},{"title":"08Springboot-- 依赖错误NoClassDefFoundError","slug":"computer-science/java/springboot/springboot-error1/08Springboot-依赖错误NoClassDefFoundError","date":"2020-10-05T09:17:21.000Z","updated":"2020-10-20T00:46:16.000Z","comments":true,"path":"computer-science/java/springboot/springboot-error1/08Springboot-依赖错误NoClassDefFoundError/","link":"","permalink":"https://ppxpython.github.io/computer-science/java/springboot/springboot-error1/08Springboot-%E4%BE%9D%E8%B5%96%E9%94%99%E8%AF%AFNoClassDefFoundError/","excerpt":"","text":"# 项目场景： 前后端启动成功没有错误，但在登录是出现错误 # 问题描述： 前后端启动成功没有错误，但在登录是出现 后端呢 SpringBoot 报出错误 ERROR c.e.c.f.w.e.GlobalExceptionHandler - [handleException,83] - Handler dispatch failed; nested exception is java.lang.NoClassDefFoundError: javax/xml/bind/DatatypeConverter# 原因分析： JDK 版本号是： 今天在使用 JDK 13.0 环境下使用 IDEA 时候出现了这个错误，错误日志如下： 我是采用了增加依赖解决的 故障原因： JAXB API 是 java EE 的 API，因此在 java SE 9.0 中不再包含这个 Jar 包。 java 9 中引入了模块的概念，默认情况下，Java SE 中将不再包含 java EE 的 Jar 包 而在 java 6/7 / 8 时关于这个 API 都是捆绑在一起的 # 解决方案： # 解决方案一： 降低 JDK 版本到 JDK 8 # 解决方案二:（亲测可行） 手动加入这些依赖 Jar 包 &lt;dependency&gt; &lt;groupId&gt;javax.xml.bind&lt;/groupId&gt; &lt;artifactId&gt;jaxb-api&lt;/artifactId&gt; &lt;version&gt;2.3.0&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.sun.xml.bind&lt;/groupId&gt; &lt;artifactId&gt;jaxb-impl&lt;/artifactId&gt; &lt;version&gt;2.3.0&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.sun.xml.bind&lt;/groupId&gt; &lt;artifactId&gt;jaxb-core&lt;/artifactId&gt; &lt;version&gt;2.3.0&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.activation&lt;/groupId&gt; &lt;artifactId&gt;activation&lt;/artifactId&gt; &lt;version&gt;1.1.1&lt;/version&gt; &lt;/dependency&gt; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"计算机科学","slug":"computer-science","permalink":"https://ppxpython.github.io/categories/computer-science/"},{"name":"Java","slug":"computer-science/java","permalink":"https://ppxpython.github.io/categories/computer-science/java/"},{"name":"SpringBoot框架","slug":"computer-science/java/springboot","permalink":"https://ppxpython.github.io/categories/computer-science/java/springboot/"},{"name":"SpringBoot框架常见错误集合","slug":"computer-science/java/springboot/springboot-error1","permalink":"https://ppxpython.github.io/categories/computer-science/java/springboot/springboot-error1/"}],"tags":[{"name":"Error","slug":"Error","permalink":"https://ppxpython.github.io/tags/Error/"}]},{"title":"07Springboot--  导包运行报错IllegalStateException","slug":"computer-science/java/springboot/springboot-error1/07Springboot-导包运行报错IllegalStateException","date":"2020-10-05T09:12:30.000Z","updated":"2020-10-05T09:38:22.000Z","comments":true,"path":"computer-science/java/springboot/springboot-error1/07Springboot-导包运行报错IllegalStateException/","link":"","permalink":"https://ppxpython.github.io/computer-science/java/springboot/springboot-error1/07Springboot-%E5%AF%BC%E5%8C%85%E8%BF%90%E8%A1%8C%E6%8A%A5%E9%94%99IllegalStateException/","excerpt":"","text":"# 项目场景： 运行 IDEA 时出现错误 # 问题描述： java.lang.IllegalStateException: Error processing condition on org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration.propertySourcesPlaceholderConfigurer # 原因分析： 依赖 # 解决方案： &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;&lt;!-- &lt;scope&gt;provided&lt;/scope&gt;--&gt; &lt;/dependency&gt;在 pom.xml 文件中将 scope 注释 再加上 &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt; &lt;version&gt;3.1.0&lt;/version&gt; &lt;/dependency&gt; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"计算机科学","slug":"computer-science","permalink":"https://ppxpython.github.io/categories/computer-science/"},{"name":"Java","slug":"computer-science/java","permalink":"https://ppxpython.github.io/categories/computer-science/java/"},{"name":"SpringBoot框架","slug":"computer-science/java/springboot","permalink":"https://ppxpython.github.io/categories/computer-science/java/springboot/"},{"name":"SpringBoot框架常见错误集合","slug":"computer-science/java/springboot/springboot-error1","permalink":"https://ppxpython.github.io/categories/computer-science/java/springboot/springboot-error1/"}],"tags":[{"name":"Error","slug":"Error","permalink":"https://ppxpython.github.io/tags/Error/"}]},{"title":"06Springboot-- 导包错误","slug":"computer-science/java/springboot/springboot-error1/06Springboot-导包错误","date":"2020-10-05T09:06:52.000Z","updated":"2020-10-05T09:21:34.000Z","comments":true,"path":"computer-science/java/springboot/springboot-error1/06Springboot-导包错误/","link":"","permalink":"https://ppxpython.github.io/computer-science/java/springboot/springboot-error1/06Springboot-%E5%AF%BC%E5%8C%85%E9%94%99%E8%AF%AF/","excerpt":"","text":"# 项目场景： 运行 IDEA 时出现错误 # 问题描述： Cannot resolve org.apache.tomcat.embed:tomcat-embed-core:9.0.36 # 原因分析： 刚刚想学习 springboot 的缓冲机制 在新建项目的时候发现了这么一个错误 这两个都在指明 tomcat9.0.36 无法下载成功 但是你之前运行其他的 spring boot 项目是 web 依赖的 tomcat 是可以运行的 这个时候你就会联想到是版本的问题了吧 # 解决方案： 所以我们可以打开一个之前可以运行的 springboot 项目 找到右边的 maven，点击 你会发现你的 tomcat 的版本是其他 我这里是 9.0.35， 所以这个时候嘛 我们打开之前无法使用的 springboot 项目 打开它的 pox.xml &lt;properties&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;/properties&gt;只需添加成 &lt;properties&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;tomcat.version&gt;你的tomcat版本号&lt;/tomcat.version&gt; &lt;/properties&gt;然后点击左边的 maven 再 install 就 ok 了 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"计算机科学","slug":"computer-science","permalink":"https://ppxpython.github.io/categories/computer-science/"},{"name":"Java","slug":"computer-science/java","permalink":"https://ppxpython.github.io/categories/computer-science/java/"},{"name":"SpringBoot框架","slug":"computer-science/java/springboot","permalink":"https://ppxpython.github.io/categories/computer-science/java/springboot/"},{"name":"SpringBoot框架常见错误集合","slug":"computer-science/java/springboot/springboot-error1","permalink":"https://ppxpython.github.io/categories/computer-science/java/springboot/springboot-error1/"}],"tags":[{"name":"Error","slug":"Error","permalink":"https://ppxpython.github.io/tags/Error/"}]},{"title":"05Springboot--数据库拼写错误BindingException: Invalid bound statement ","slug":"computer-science/java/springboot/springboot-error1/05Springboot-数据库拼写错误BindingException-Invalid-bound-statement","date":"2020-10-05T09:04:01.000Z","updated":"2020-10-07T05:52:40.000Z","comments":true,"path":"computer-science/java/springboot/springboot-error1/05Springboot-数据库拼写错误BindingException-Invalid-bound-statement/","link":"","permalink":"https://ppxpython.github.io/computer-science/java/springboot/springboot-error1/05Springboot-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8B%BC%E5%86%99%E9%94%99%E8%AF%AFBindingException-Invalid-bound-statement/","excerpt":"","text":"# 项目场景： 运行 IDEA 时出现错误 # 问题描述： org.apache.ibatis.binding.BindingException: Invalid bound statement (not found): com.example.mysportjava.dao.UserDao.getUserByMassage # 原因分析： 映射文件拼写错误 # 解决方案： 1 问题实质: dao 层 (又叫 mapper 接口) 跟 mapper.xml 文件没有映射 2 问题原因：出现这种映射问题的原因分为低级原因和更低级原因两种 更低级原因: (1) dao 层的方法和 mapper.xml 中的方法不一样； (2) mapper 中的 namespace resultParameter 和对应的 dao 层 entity 层不一样 (3) 拼写错误 如漏写 少写 多写.... 上述这些原因都会导致两者不能映射 这些检查和修正的工作自己来吧不会的百度就行 低级原因: spring 配置文件中关于 mybatis 的与 xml 文件路径寻找相关的配置没有写 导致调用 dao 层方法时，没有寻找 dao.xml 文件的正确路径 结果 dao 迷路了 从而两者无法映射 3 解决思路：把 dao.xml (或 mapper.xml) 路径配置写好！！！！ 既然出发点 (dao) 已经确定，目的地 (dao.xml/mapper.xml) 也确定了 想到到达就必须画一条到 dao.xml 的路 4 解决步骤: (1) 打开 spring-context.xml 配置文件 (2) 找到 class 为 org.mybatis.spring.SqlSessionFactoryBean 这个 bean (3) 找到 name 为 mapperLocations 的 property (4) 在 list 标签中添加一个 value 例如: &lt;value&gt;classpath:/info/mappings/**/*.xml&lt;/value&gt; 重启，问题解决！！！ 注:classpath 是配置好的类路径 要想知道表示什么 最简单的方式是参考其他 list 看一眼比对项目结构就了然了 我的博客，欢迎点击光顾 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"计算机科学","slug":"computer-science","permalink":"https://ppxpython.github.io/categories/computer-science/"},{"name":"Java","slug":"computer-science/java","permalink":"https://ppxpython.github.io/categories/computer-science/java/"},{"name":"SpringBoot框架","slug":"computer-science/java/springboot","permalink":"https://ppxpython.github.io/categories/computer-science/java/springboot/"},{"name":"SpringBoot框架常见错误集合","slug":"computer-science/java/springboot/springboot-error1","permalink":"https://ppxpython.github.io/categories/computer-science/java/springboot/springboot-error1/"}],"tags":[{"name":"Error","slug":"Error","permalink":"https://ppxpython.github.io/tags/Error/"}]},{"title":"05Springboot--出现BindingException","slug":"computer-science/java/springboot/springboot-error1/05Springboot-出现BindingException","date":"2020-10-05T09:00:28.000Z","updated":"2020-10-05T09:33:10.000Z","comments":true,"path":"computer-science/java/springboot/springboot-error1/05Springboot-出现BindingException/","link":"","permalink":"https://ppxpython.github.io/computer-science/java/springboot/springboot-error1/05Springboot-%E5%87%BA%E7%8E%B0BindingException/","excerpt":"","text":"# 项目场景： IDEA 在启动时出现错误 # 问题描述： 2020-09-21 21:08:06.650 ERROR 23480 --- [nio-9000-exec-3] o.a.c.c.C.[.[.[/].[dispatcherServlet] : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.apache.ibatis.binding.BindingException: Invalid bound statement (not found): com.example.mysportjava.dao.UserDao.getUserByMassage] with root causeorg.apache.ibatis.binding.BindingException: Invalid bound statement (not found): com.example.mysportjava.dao.UserDao.getUserByMa # 原因分析： 多出空格 # 解决方案： 我的博客，欢迎点击光顾 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"计算机科学","slug":"computer-science","permalink":"https://ppxpython.github.io/categories/computer-science/"},{"name":"Java","slug":"computer-science/java","permalink":"https://ppxpython.github.io/categories/computer-science/java/"},{"name":"SpringBoot框架","slug":"computer-science/java/springboot","permalink":"https://ppxpython.github.io/categories/computer-science/java/springboot/"},{"name":"SpringBoot框架常见错误集合","slug":"computer-science/java/springboot/springboot-error1","permalink":"https://ppxpython.github.io/categories/computer-science/java/springboot/springboot-error1/"}],"tags":[{"name":"Error","slug":"Error","permalink":"https://ppxpython.github.io/tags/Error/"}]},{"title":"04Springboot-- 数据库错误","slug":"computer-science/java/springboot/springboot-error1/04Springboot-数据库错误","date":"2020-10-05T08:57:24.000Z","updated":"2020-10-05T09:21:34.000Z","comments":true,"path":"computer-science/java/springboot/springboot-error1/04Springboot-数据库错误/","link":"","permalink":"https://ppxpython.github.io/computer-science/java/springboot/springboot-error1/04Springboot-%E6%95%B0%E6%8D%AE%E5%BA%93%E9%94%99%E8%AF%AF/","excerpt":"","text":"# 项目场景： IDEA 在启动时出现错误 # 问题描述： Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.2020-09-21 21:01:19.269 ERROR 25820 --- [ main] o.s.boot.SpringApplication : Application run failed# 原因分析： 注释 # 解决方案： document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"计算机科学","slug":"computer-science","permalink":"https://ppxpython.github.io/categories/computer-science/"},{"name":"Java","slug":"computer-science/java","permalink":"https://ppxpython.github.io/categories/computer-science/java/"},{"name":"SpringBoot框架","slug":"computer-science/java/springboot","permalink":"https://ppxpython.github.io/categories/computer-science/java/springboot/"},{"name":"SpringBoot框架常见错误集合","slug":"computer-science/java/springboot/springboot-error1","permalink":"https://ppxpython.github.io/categories/computer-science/java/springboot/springboot-error1/"}],"tags":[{"name":"Error","slug":"Error","permalink":"https://ppxpython.github.io/tags/Error/"}]},{"title":"02Springboot启动类错误","slug":"computer-science/java/springboot/springboot-error1/02Springboot启动类错误","date":"2020-10-05T08:53:47.000Z","updated":"2020-10-05T09:26:20.000Z","comments":true,"path":"computer-science/java/springboot/springboot-error1/02Springboot启动类错误/","link":"","permalink":"https://ppxpython.github.io/computer-science/java/springboot/springboot-error1/02Springboot%E5%90%AF%E5%8A%A8%E7%B1%BB%E9%94%99%E8%AF%AF/","excerpt":"","text":"# 项目场景： IDEA 在启动时出现错误 # 问题描述： # 原因分析： # 解决方案： document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"计算机科学","slug":"computer-science","permalink":"https://ppxpython.github.io/categories/computer-science/"},{"name":"Java","slug":"computer-science/java","permalink":"https://ppxpython.github.io/categories/computer-science/java/"},{"name":"SpringBoot框架","slug":"computer-science/java/springboot","permalink":"https://ppxpython.github.io/categories/computer-science/java/springboot/"},{"name":"SpringBoot框架常见错误集合","slug":"computer-science/java/springboot/springboot-error1","permalink":"https://ppxpython.github.io/categories/computer-science/java/springboot/springboot-error1/"}],"tags":[{"name":"Error","slug":"Error","permalink":"https://ppxpython.github.io/tags/Error/"}]},{"title":"Springboot--01错误记录","slug":"computer-science/java/springboot/springboot-error1/Springboot-01错误记录","date":"2020-10-05T08:46:35.000Z","updated":"2020-10-05T09:21:34.000Z","comments":true,"path":"computer-science/java/springboot/springboot-error1/Springboot-01错误记录/","link":"","permalink":"https://ppxpython.github.io/computer-science/java/springboot/springboot-error1/Springboot-01%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/","excerpt":"","text":"问题 1： Identify and stop the process that's listening on port 8080 or configure this application to listen on another port. 问题 2 二、解决方式： 1. 检查自己写的注解是否错了，并没有。 2. 在网上查找解决方式：如下所示： 步骤一： 在 springboot 的配置文件添加，mybatis 的配置如下所示： mybatis: typeAliasesPackage: com.xxx.xxx.dao.entity mapperLocations: classpath:mapper/*.xml步骤二： ①将接口与对应的实现类放在与 application 启动类的同一个目录或者他的子目录下，这样注解可以被扫描到，这是最省事的办法。（没测试） ②或者在启动类上加上 @MapperScan 或者 @ComponentScan 注解，手动指定 application 类要扫描哪些包下的注解，如下所示： @SpringBootApplication@ComponentScan(basePackages = {\"com.xxx.xxx.dao\"}) ③或者在接口上添加@Mapper注解。@Mapperpublic interface UserMapper {}问题 3： 原因： 修改了 mapper 类的名称对应要修改路径 问题 4： 添加数据时未添加外键 添加 sql 输入外键 unit_ID 问题 5: Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.2020-09-12 14:40:39.211 ERROR 60268 --- [ main] o.s.boot.SpringApplication : Application run failed常见注释错误，查看代码中的 @注释 问题 6: 问题 7： 在测试的时候报出 415 更改一下请求头 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"计算机科学","slug":"computer-science","permalink":"https://ppxpython.github.io/categories/computer-science/"},{"name":"Java","slug":"computer-science/java","permalink":"https://ppxpython.github.io/categories/computer-science/java/"},{"name":"SpringBoot框架","slug":"computer-science/java/springboot","permalink":"https://ppxpython.github.io/categories/computer-science/java/springboot/"},{"name":"SpringBoot框架常见错误集合","slug":"computer-science/java/springboot/springboot-error1","permalink":"https://ppxpython.github.io/categories/computer-science/java/springboot/springboot-error1/"}],"tags":[{"name":"Error","slug":"Error","permalink":"https://ppxpython.github.io/tags/Error/"}]},{"title":"03VUE---拦截路径挂载的问题","slug":"computer-science/vue/vue-error1/03VUE-拦截路径挂载的问题","date":"2020-10-05T08:25:40.000Z","updated":"2020-10-05T08:41:12.000Z","comments":true,"path":"computer-science/vue/vue-error1/03VUE-拦截路径挂载的问题/","link":"","permalink":"https://ppxpython.github.io/computer-science/vue/vue-error1/03VUE-%E6%8B%A6%E6%88%AA%E8%B7%AF%E5%BE%84%E6%8C%82%E8%BD%BD%E7%9A%84%E9%97%AE%E9%A2%98/","excerpt":"","text":"# 项目场景： vscode 中没有报错，但在网页的控制台中出现错误 # 问题描述： vscode 中没有报错，但在网页的控制台中 # 原因分析： 拦截路径挂载的问题 # 解决方案： 在上面添加 // 出现问题时使用 const originalPush=VueRouter.prototype.push VueRouter.prototype.push=function push(location,onResolve,onReject) if(onResolve (| onReject) return originalPush.call(this,location,onResolve,onReject) return originalPush.call(this,location).catch(err =&gt; err) ) document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"计算机科学","slug":"computer-science","permalink":"https://ppxpython.github.io/categories/computer-science/"},{"name":"Vue","slug":"computer-science/vue","permalink":"https://ppxpython.github.io/categories/computer-science/vue/"},{"name":"前端Vue中常见问题集合","slug":"computer-science/vue/vue-error1","permalink":"https://ppxpython.github.io/categories/computer-science/vue/vue-error1/"}],"tags":[{"name":"Error","slug":"Error","permalink":"https://ppxpython.github.io/tags/Error/"}]},{"title":"02VUE---没有引入依赖包","slug":"computer-science/vue/vue-error1/02VUE-没有引入依赖包","date":"2020-10-05T08:22:04.000Z","updated":"2020-10-05T08:41:06.000Z","comments":true,"path":"computer-science/vue/vue-error1/02VUE-没有引入依赖包/","link":"","permalink":"https://ppxpython.github.io/computer-science/vue/vue-error1/02VUE-%E6%B2%A1%E6%9C%89%E5%BC%95%E5%85%A5%E4%BE%9D%E8%B5%96%E5%8C%85/","excerpt":"","text":"# 项目场景： 在运行 vscode 时，出现错误 # 问题描述： # 原因分析： 没有引入依赖包 npm # 解决方案： 输入 npm install即可 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"计算机科学","slug":"computer-science","permalink":"https://ppxpython.github.io/categories/computer-science/"},{"name":"Vue","slug":"computer-science/vue","permalink":"https://ppxpython.github.io/categories/computer-science/vue/"},{"name":"前端Vue中常见问题集合","slug":"computer-science/vue/vue-error1","permalink":"https://ppxpython.github.io/categories/computer-science/vue/vue-error1/"}],"tags":[{"name":"Error","slug":"Error","permalink":"https://ppxpython.github.io/tags/Error/"}]},{"title":"01web开发需要了解的技术2020-09-02","slug":"computer-science/vue/vue-study1/01web开发需要了解的技术2020-09-02","date":"2020-10-05T08:09:30.000Z","updated":"2020-10-05T08:29:54.000Z","comments":true,"path":"computer-science/vue/vue-study1/01web开发需要了解的技术2020-09-02/","link":"","permalink":"https://ppxpython.github.io/computer-science/vue/vue-study1/01web%E5%BC%80%E5%8F%91%E9%9C%80%E8%A6%81%E4%BA%86%E8%A7%A3%E7%9A%84%E6%8A%80%E6%9C%AF2020-09-02/","excerpt":"","text":"日期：2020——09——02 IT 人：小海豚 学习内容： 大数据 oop（面向对象的编程） ood（面向对象的设计） web 开发： Html Js（JavaScript）面向对象语言 Css 前端框架： Vue（js 库与后端的一套接口），jquery，react 组件库： Element UI（界面） 常与（VUE 框架一起） Easy UI（界面） 工具： 测试集成在开发过程中 移动布局 webscocket 协议 Git 测试 / 调试工具 firebug，postmon 后端： java，python,C#,mysql (构建) 后端框架 jsp/selvlet ssm 框架（spring，struts，mybatis） Spring boost：最新框架 前端后端公共技术 svn/git 工具 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"计算机科学","slug":"computer-science","permalink":"https://ppxpython.github.io/categories/computer-science/"},{"name":"Vue","slug":"computer-science/vue","permalink":"https://ppxpython.github.io/categories/computer-science/vue/"},{"name":"初学Vue框架","slug":"computer-science/vue/vue-study1","permalink":"https://ppxpython.github.io/categories/computer-science/vue/vue-study1/"}],"tags":[{"name":"VUE","slug":"VUE","permalink":"https://ppxpython.github.io/tags/VUE/"}]},{"title":"08django---的装换器","slug":"computer-science/python/django/course-1/08django-的装换器","date":"2020-10-05T08:04:50.000Z","updated":"2020-10-05T08:13:30.000Z","comments":true,"path":"computer-science/python/django/course-1/08django-的装换器/","link":"","permalink":"https://ppxpython.github.io/computer-science/python/django/course-1/08django-%E7%9A%84%E8%A3%85%E6%8D%A2%E5%99%A8/","excerpt":"","text":"日期：20019——10——07 IT 人：小海豚 学习内容： 装换器 https://news.163.com/19/0405/08/EC017RFK0001899O.html https://news.163.com/19/0405/08/EC01HSST000189FH.html 在 app bookapp 的 urls 中 ​ 注意：&lt;html&gt; 表示可以是任何字母 在 app bookapp 的 views 中写入 ​ 在项目的 urls 中修改以下 ​ 在浏览器中输入网址 http://127.0.0.1:8000/19/0405/08/EC01HSST000189FH.html ​ 地址装唤器装换 字符串 ——》变量接收 ——》传递 path 中的 &lt;html&gt; 变量 ——》在 app bookapp 中的 index 函数的 html 变量接收到 ——》在 format 中输出地址信息 第二个地址 在浏览器中输入 http://127.0.0.1:8000/19/0405/08/EC017RFK0001899O.html ​ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"计算机科学","slug":"computer-science","permalink":"https://ppxpython.github.io/categories/computer-science/"},{"name":"Python","slug":"computer-science/python","permalink":"https://ppxpython.github.io/categories/computer-science/python/"},{"name":"Django框架","slug":"computer-science/python/django","permalink":"https://ppxpython.github.io/categories/computer-science/python/django/"},{"name":"零基础学Django框架","slug":"computer-science/python/django/course-1","permalink":"https://ppxpython.github.io/categories/computer-science/python/django/course-1/"}],"tags":[{"name":"Django","slug":"Django","permalink":"https://ppxpython.github.io/tags/Django/"}]},{"title":"07django--path的语法","slug":"computer-science/python/django/course-1/07django-path的语法","date":"2020-10-05T08:02:33.000Z","updated":"2020-10-05T08:13:30.000Z","comments":true,"path":"computer-science/python/django/course-1/07django-path的语法/","link":"","permalink":"https://ppxpython.github.io/computer-science/python/django/course-1/07django-path%E7%9A%84%E8%AF%AD%E6%B3%95/","excerpt":"","text":"日期：2019——10——06 IT 人：小海豚 学习内容： Path 的语法 从 django2.1 以后用 path 之前用的是 url 标准语法 Path (route,view,name=None,**kwargs) Route: 端口以后 url 的地址，到 / 结束，表示路径 View: 表示路径匹配成功后，需要调用的视图，必须是个函数如果是 class 的话，必须要用 as_view () 函数装换为函数 name： 表示别名 **kwargs： 表示一个字典 前面两个是必选项 创建的 newwebsite002 是之前的，查看 06django 教程 在之前的 views 不变 ​ 在之前创建的 app book 的 urls 中 ​ 打开项目所在地址 cmd 开启服务器 ​ 成功 ​ 证明服务器已经跑起来了 继续刷新 ​ 修改 app bookapp 中的 urls ​ 在输入网址查看 http://127.0.0.1:8000/index ​ 输入 http://127.0.0.1:8000/index/web/ 查看 ​ 也可以写成多分级目录 修改 app bookapp 中的 urls 注释 #path ('',views.index,name='index'), ​ 在浏览器中执行 http://127.0.0.1:8000/index/web/a/b/c/index.html/ ​ 成功 注意：当出现路径相同时，会自动匹配第一个之后机就默认不匹配了 ​ 结果一直是： ​ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"计算机科学","slug":"computer-science","permalink":"https://ppxpython.github.io/categories/computer-science/"},{"name":"Python","slug":"computer-science/python","permalink":"https://ppxpython.github.io/categories/computer-science/python/"},{"name":"Django框架","slug":"computer-science/python/django","permalink":"https://ppxpython.github.io/categories/computer-science/python/django/"},{"name":"零基础学Django框架","slug":"computer-science/python/django/course-1","permalink":"https://ppxpython.github.io/categories/computer-science/python/django/course-1/"}],"tags":[{"name":"Django","slug":"Django","permalink":"https://ppxpython.github.io/tags/Django/"}]},{"title":"06django--url的讲解","slug":"computer-science/python/django/course-1/06django-url的讲解","date":"2020-10-05T07:57:17.000Z","updated":"2020-10-05T08:13:30.000Z","comments":true,"path":"computer-science/python/django/course-1/06django-url的讲解/","link":"","permalink":"https://ppxpython.github.io/computer-science/python/django/course-1/06django-url%E7%9A%84%E8%AE%B2%E8%A7%A3/","excerpt":"","text":"日期：2019——09——28 IT 人：小海豚 学习内容： 统一资源定位器 协议 protocol：http，https，ftp 域名 hostname + 端口 port 路径 path 参数 parmeters 查询 query 描点 fragment django 中配置 urls 创建一个 newwebsite002 的 django 文件和 book 的 app 命令行输入 django-admin startproject newwebsite002cd newwebsite002ptrhon manage.py startapp book ​ 显示出 ​ 在浏览器中检查 开启服务器 ​ 成功 ​ 在 setting 中配置注册 app book 添加 'book', ​ 在 app views 视图中写入两个函数 ​ 在 app book 中创建一个 urls 文件 进行配置 ​ 在 app book urls 中编码 ​ 在项目中做个映射 在项目 newwebsite002 的 urls 中编码 ​ 成功 ​ 切换网址后 ​ 表示成功 注意：在 path 语句中在路径中要加上 / document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"计算机科学","slug":"computer-science","permalink":"https://ppxpython.github.io/categories/computer-science/"},{"name":"Python","slug":"computer-science/python","permalink":"https://ppxpython.github.io/categories/computer-science/python/"},{"name":"Django框架","slug":"computer-science/python/django","permalink":"https://ppxpython.github.io/categories/computer-science/python/django/"},{"name":"零基础学Django框架","slug":"computer-science/python/django/course-1","permalink":"https://ppxpython.github.io/categories/computer-science/python/django/course-1/"}],"tags":[{"name":"Django","slug":"Django","permalink":"https://ppxpython.github.io/tags/Django/"}]},{"title":"05django--mvt介绍","slug":"computer-science/python/django/course-1/05django-mvt介绍","date":"2020-10-05T07:50:40.000Z","updated":"2020-10-05T08:13:30.000Z","comments":true,"path":"computer-science/python/django/course-1/05django-mvt介绍/","link":"","permalink":"https://ppxpython.github.io/computer-science/python/django/course-1/05django-mvt%E4%BB%8B%E7%BB%8D/","excerpt":"","text":"日期：20019——09——27 IT 人：小海豚 学习内容： django 的设计模式 Models 作用 封装数据库， 对数据库进行访问， 对数据进行增删改查， Views 作用 进行业务逻辑的处理， teplates 作用 模板，主要进行展示，前端 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"计算机科学","slug":"computer-science","permalink":"https://ppxpython.github.io/categories/computer-science/"},{"name":"Python","slug":"computer-science/python","permalink":"https://ppxpython.github.io/categories/computer-science/python/"},{"name":"Django框架","slug":"computer-science/python/django","permalink":"https://ppxpython.github.io/categories/computer-science/python/django/"},{"name":"零基础学Django框架","slug":"computer-science/python/django/course-1","permalink":"https://ppxpython.github.io/categories/computer-science/python/django/course-1/"}],"tags":[{"name":"Django","slug":"Django","permalink":"https://ppxpython.github.io/tags/Django/"}]},{"title":"04django--整体讲解","slug":"computer-science/python/django/course-1/04django-整体讲解","date":"2020-10-05T07:48:26.000Z","updated":"2020-10-05T08:13:30.000Z","comments":true,"path":"computer-science/python/django/course-1/04django-整体讲解/","link":"","permalink":"https://ppxpython.github.io/computer-science/python/django/course-1/04django-%E6%95%B4%E4%BD%93%E8%AE%B2%E8%A7%A3/","excerpt":"","text":"日期：2019——09——27 IT 人：小海豚 学习内容： 导包的文件 ​ 一般都不用但不能够删除 ​ settings 配置文件 urls 统一资源编译器 wsgi 网管接口 app 中 News 大部分功能在 app news 中完成 Mingrations ​ 数据库映射时使用，一般不修改 ​ admin 管理文件 apps 定义 app 名字 models 模型写数据库 tests 测试文件 urls 配置 app 的 urls，和项目的 urls 进行交互 views 视图文件 Bd.sqlite3 默认使用的数据库 Manage.py 项目管理文件 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"计算机科学","slug":"computer-science","permalink":"https://ppxpython.github.io/categories/computer-science/"},{"name":"Python","slug":"computer-science/python","permalink":"https://ppxpython.github.io/categories/computer-science/python/"},{"name":"Django框架","slug":"computer-science/python/django","permalink":"https://ppxpython.github.io/categories/computer-science/python/django/"},{"name":"零基础学Django框架","slug":"computer-science/python/django/course-1","permalink":"https://ppxpython.github.io/categories/computer-science/python/django/course-1/"}],"tags":[{"name":"Django","slug":"Django","permalink":"https://ppxpython.github.io/tags/Django/"}]},{"title":"03django--带有模板的html文件百度","slug":"computer-science/python/django/course-1/03django-带有模板的html文件百度","date":"2020-10-05T07:44:36.000Z","updated":"2020-10-05T08:13:30.000Z","comments":true,"path":"computer-science/python/django/course-1/03django-带有模板的html文件百度/","link":"","permalink":"https://ppxpython.github.io/computer-science/python/django/course-1/03django-%E5%B8%A6%E6%9C%89%E6%A8%A1%E6%9D%BF%E7%9A%84html%E6%96%87%E4%BB%B6%E7%99%BE%E5%BA%A6/","excerpt":"","text":"日期：2019——09——27 IT 人：小海豚 学习内容： 启动服务器 在上一次创建的 app news 中创建一个 模板文件 叫 在创建一个 html 文件 叫 baidu 把百度拉入模板文件中，生成目录 打开浏览器搜索百度 复制全部源代码 在 html 中使用 baidu 修改视图 app news 中的 views 效果生成 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"计算机科学","slug":"computer-science","permalink":"https://ppxpython.github.io/categories/computer-science/"},{"name":"Python","slug":"computer-science/python","permalink":"https://ppxpython.github.io/categories/computer-science/python/"},{"name":"Django框架","slug":"computer-science/python/django","permalink":"https://ppxpython.github.io/categories/computer-science/python/django/"},{"name":"零基础学Django框架","slug":"computer-science/python/django/course-1","permalink":"https://ppxpython.github.io/categories/computer-science/python/django/course-1/"}],"tags":[{"name":"Django","slug":"Django","permalink":"https://ppxpython.github.io/tags/Django/"}]},{"title":"工具教程网址","slug":"工具教程网址","date":"2020-09-29T07:35:50.000Z","updated":"2021-05-13T08:34:47.404Z","comments":true,"path":"工具教程网址/","link":"","permalink":"https://ppxpython.github.io/%E5%B7%A5%E5%85%B7%E6%95%99%E7%A8%8B%E7%BD%91%E5%9D%80/","excerpt":"","text":"Vue官网中文教程 Vue官网中文教程 Vue菜鸟教程 https://www.runoob.com/vue2/vue-tutorial.html Redis官方中文教程 Redis官方中文教程 你应该 琉璃的医学 &amp; 编程笔记 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[{"name":"官网教程","slug":"官网教程","permalink":"https://ppxpython.github.io/tags/%E5%AE%98%E7%BD%91%E6%95%99%E7%A8%8B/"}]},{"title":"01Springboot启动时端口被占用","slug":"computer-science/java/springboot/springboot-error1/01Springboot启动时端口被占用","date":"2020-09-28T04:02:42.000Z","updated":"2020-09-28T23:55:42.000Z","comments":true,"path":"computer-science/java/springboot/springboot-error1/01Springboot启动时端口被占用/","link":"","permalink":"https://ppxpython.github.io/computer-science/java/springboot/springboot-error1/01Springboot%E5%90%AF%E5%8A%A8%E6%97%B6%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8/","excerpt":"","text":"# 项目场景： Springboot 在启动时出现端口 8888 被占用 # 问题描述： Springboot 在启动时出现端口被占用 错误提示：Description:Web server failed to start. Port 8888 was already in use.Action:Identify and stop the process that's listening on port 8888 or configure this application to listen on another port.Disconnected from the target VM, address: '127.0.0.1:54879', transport: 'socket'[ERROR] Command execution failed.Command execution failed. # 原因分析： 由于之前开启 vue 项目启动，再启动后端时会报错。 # 解决方案： netstat -aon|findstr \"9000\"查看端口号运行进程taskkill /pid 进程号 -f` document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"计算机科学","slug":"computer-science","permalink":"https://ppxpython.github.io/categories/computer-science/"},{"name":"Java","slug":"computer-science/java","permalink":"https://ppxpython.github.io/categories/computer-science/java/"},{"name":"SpringBoot框架","slug":"computer-science/java/springboot","permalink":"https://ppxpython.github.io/categories/computer-science/java/springboot/"},{"name":"SpringBoot框架常见错误集合","slug":"computer-science/java/springboot/springboot-error1","permalink":"https://ppxpython.github.io/categories/computer-science/java/springboot/springboot-error1/"}],"tags":[{"name":"Error","slug":"Error","permalink":"https://ppxpython.github.io/tags/Error/"}]},{"title":"01Springboot小白详细的安装教程","slug":"computer-science/java/springboot/springboot-study1/01Springboot小白详细的安装教程","date":"2020-09-28T02:51:35.000Z","updated":"2020-09-28T23:55:38.000Z","comments":true,"path":"computer-science/java/springboot/springboot-study1/01Springboot小白详细的安装教程/","link":"","permalink":"https://ppxpython.github.io/computer-science/java/springboot/springboot-study1/01Springboot%E5%B0%8F%E7%99%BD%E8%AF%A6%E7%BB%86%E7%9A%84%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/","excerpt":"","text":"&lt;hr style=\" border:solid; width:100px; height:1px;\" color=#000000 size=1\"&gt; # 前言 初学 Springboot 的小白刚安装了 IDEA 分享一下安装教程吧 &lt;hr style=\"border:solid; width:100px; height:1px;\" color=#000000 size=1\"&gt; # 一、IDEA 是什么？ IDEA 全称 IntelliJ IDEA，是 java 编程语言开发的集成环境。IntelliJ 在业界被公认为最好的 java 开发工具，尤其在智能代码助手、代码自动提示、重构、JavaEE 支持、各类版本工具 (git、svn 等)、JUnit、CVS 整合、代码分析、 创新的 GUI 设计等方面的功能可以说是超常的。IDEA 是 JetBrains 公司的产品，这家公司总部位于捷克共和国的首都布拉格，开发人员以严谨著称的东欧程序员为主。它的旗舰版本还支持 HTML，CSS，PHP，MySQL，Python 等。免费版只支持 Java,Kotlin 等少数语言。 附上百度百科网址： 百度百科了解 IDEA IDEA 官网：IDEA 官网 # 二、安装步骤 教程采用了微信公众号：软件安装管家 很强大，可以安装各种软件 # 1. 安装 SpringBoot # 2. 安装 maven 安装 maven maven 下载官网地址：maven 下载官网地址 解压后 配置环境变量 成功 进入 Springboot 官网中 Springboot 官网：Springboot 官网 创建项目网址： 创建项目网址 添加架包 用 idea 打开制定架包 开启框架，开始代码 # 总结 安装完成，开始代码之旅吧 如有问题请在下方评论学习，共同进步 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"计算机科学","slug":"computer-science","permalink":"https://ppxpython.github.io/categories/computer-science/"},{"name":"Java","slug":"computer-science/java","permalink":"https://ppxpython.github.io/categories/computer-science/java/"},{"name":"SpringBoot框架","slug":"computer-science/java/springboot","permalink":"https://ppxpython.github.io/categories/computer-science/java/springboot/"},{"name":"小白学SpringBoot框架","slug":"computer-science/java/springboot/springboot-study1","permalink":"https://ppxpython.github.io/categories/computer-science/java/springboot/springboot-study1/"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://ppxpython.github.io/tags/SpringBoot/"}]},{"title":"01vue标签指令","slug":"computer-science/vue/vue-study1/01vue标签指令","date":"2020-09-28T00:56:11.000Z","updated":"2020-10-05T08:12:32.000Z","comments":true,"path":"computer-science/vue/vue-study1/01vue标签指令/","link":"","permalink":"https://ppxpython.github.io/computer-science/vue/vue-study1/01vue%E6%A0%87%E7%AD%BE%E6%8C%87%E4%BB%A4/","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"计算机科学","slug":"computer-science","permalink":"https://ppxpython.github.io/categories/computer-science/"},{"name":"Vue","slug":"computer-science/vue","permalink":"https://ppxpython.github.io/categories/computer-science/vue/"},{"name":"初学Vue框架","slug":"computer-science/vue/vue-study1","permalink":"https://ppxpython.github.io/categories/computer-science/vue/vue-study1/"}],"tags":[{"name":"VUE","slug":"VUE","permalink":"https://ppxpython.github.io/tags/VUE/"}]},{"title":"01Django中出现OperationalError问题","slug":"computer-science/python/django/django-error1/01Django中出现OperationalError问题","date":"2020-09-28T00:47:08.000Z","updated":"2020-09-28T04:23:20.000Z","comments":true,"path":"computer-science/python/django/django-error1/01Django中出现OperationalError问题/","link":"","permalink":"https://ppxpython.github.io/computer-science/python/django/django-error1/01Django%E4%B8%AD%E5%87%BA%E7%8E%B0OperationalError%E9%97%AE%E9%A2%98/","excerpt":"","text":"# 项目场景： Django 中连接数据库时出现错误，采用了一个大牛的博客解决的，这里附上链接 https://blog.csdn.net/Wathet_blue/article/details/105401717?utm_medium=distribute.pc_relevant.none-task-blog-title-2&amp;spm=1001.2101.3001.4242 # 问题描述： 出现错误！OperationalError: (1366, “Incorrect string value: ‘\\xE4\\xB9\\x8B\\xE7\\xBE\\x8E’ for column ‘name’ at row 1”) # 原因分析： 数据库的编码规则没有使用 utf8，而在存储数据时添加了中文数据，导致报错。 # 解决方案： 删除数据库 (有数据先备份) drop database [database_name];指定编码重建数据库 或者 修改数据库编码后重建数据库 create database [database_name] default character set utf8 collate utf8_general_ci;show variables like 'character%'; // 查看mysql的编码 set character_set_client=utf8; // 设置客户端的编码为utf8 set character_set_connection=utf8; set character_set_database=utf8; set character_set_results=utf8; set character_set_server=utf8; set character_set_system=utf8; create database [database_name]; // 新创建数据库使用的编码规则是utf8重新迁移数据库 python manage.py makemigrations python manage.py migrate document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"计算机科学","slug":"computer-science","permalink":"https://ppxpython.github.io/categories/computer-science/"},{"name":"Python","slug":"computer-science/python","permalink":"https://ppxpython.github.io/categories/computer-science/python/"},{"name":"Django框架","slug":"computer-science/python/django","permalink":"https://ppxpython.github.io/categories/computer-science/python/django/"},{"name":"前端Django中常见的错误集合","slug":"computer-science/python/django/django-error1","permalink":"https://ppxpython.github.io/categories/computer-science/python/django/django-error1/"}],"tags":[{"name":"Django","slug":"Django","permalink":"https://ppxpython.github.io/tags/Django/"}]},{"title":"01vue运行出错Cannot find module 'stylus'","slug":"computer-science/vue/vue-error1/01vue中包导入出错code-ENOLOCAL","date":"2020-09-27T23:08:53.000Z","updated":"2020-09-28T04:23:18.000Z","comments":true,"path":"computer-science/vue/vue-error1/01vue中包导入出错code-ENOLOCAL/","link":"","permalink":"https://ppxpython.github.io/computer-science/vue/vue-error1/01vue%E4%B8%AD%E5%8C%85%E5%AF%BC%E5%85%A5%E5%87%BA%E9%94%99code-ENOLOCAL/","excerpt":"","text":"# 项目场景： 本人小白记录在初学 vue 中的一些小问题，在使用 npm run serve 运行 vue 项目时，出现错误 &lt;hr style=\" border:solid; width:100px; height:1px;\" color=#000000 size=1\"&gt; # 问题描述： 出现错误 # 原因分析： 没有引入相关依赖 # 解决方案： 需要执行 npm install引入相关依赖即可解决问题 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"计算机科学","slug":"computer-science","permalink":"https://ppxpython.github.io/categories/computer-science/"},{"name":"Vue","slug":"computer-science/vue","permalink":"https://ppxpython.github.io/categories/computer-science/vue/"},{"name":"前端Vue中常见问题集合","slug":"computer-science/vue/vue-error1","permalink":"https://ppxpython.github.io/categories/computer-science/vue/vue-error1/"}],"tags":[{"name":"Error","slug":"Error","permalink":"https://ppxpython.github.io/tags/Error/"}]},{"title":"02django带app的网站创建","slug":"computer-science/python/django/course-1/02django带app的网站创建","date":"2020-09-27T08:27:27.000Z","updated":"2020-09-29T07:50:06.000Z","comments":true,"path":"computer-science/python/django/course-1/02django带app的网站创建/","link":"","permalink":"https://ppxpython.github.io/computer-science/python/django/course-1/02django%E5%B8%A6app%E7%9A%84%E7%BD%91%E7%AB%99%E5%88%9B%E5%BB%BA/","excerpt":"","text":"python 前端框架 标题import java.util.Scanner;...Scanner in = new Scanner (System.in);// 输入 Scan 之后，按下键盘 Alt + “/” 键，Eclipse 下自动补全。System.out.println (in.nextLine ());System.out.println (\"Hello\" + \"world.\");pwd/usr/home/chris/binls -latotal 2drwxr-xr-x 2 chris chris 11 Jan 10 16:48 .drwxr--r-x 45 chris chris 92 Feb 14 11:10 ..-rwxr-xr-x 1 chris chris 444 Aug 25 2013 backup-rwxr-xr-x 1 chris chris 642 Jan 17 14:42 deploy 编译时多态主要指运算符重载与函数重载，而运行时多态主要指虚函数。 有基类 SHAPE ，派生类 CIRCLE ，声明如下变量： SHAPE shape1,*p1;CIRCLE circle1,*q1;下列哪些项是 “派生类对象替换基类对象”。 p1=&amp;circle1; q1=&amp;shape1; shape1=circle1; circle1=shape1; ✔️ 令基类对象的指针指向派生类对象 ❌ 派生类指针指向基类的引用 ✔️ 派生类对象给基类对象赋值 ❌ 基类对象给派生类对象赋值 下列叙述正确的是 。 虚函数只能定义成无参函数 虚函数不能有返回值 能定义虚构造函数 A、B、C 都不对 如果定义 int e=8; double f=6.4, g=8.9; ，则表达式 f+int (e/3*int (f+g)/2)%4 的值为 9.4。 注意运算顺序和数据类型 8.4 😘 💍 🎶 python primary info ✔️success warning 💔danger document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"计算机科学","slug":"computer-science","permalink":"https://ppxpython.github.io/categories/computer-science/"},{"name":"Python","slug":"computer-science/python","permalink":"https://ppxpython.github.io/categories/computer-science/python/"},{"name":"Django框架","slug":"computer-science/python/django","permalink":"https://ppxpython.github.io/categories/computer-science/python/django/"},{"name":"零基础学Django框架","slug":"computer-science/python/django/course-1","permalink":"https://ppxpython.github.io/categories/computer-science/python/django/course-1/"}],"tags":[{"name":"Django","slug":"Django","permalink":"https://ppxpython.github.io/tags/Django/"}]},{"title":"01django-hello world简单例子","slug":"computer-science/python/django/course-1/01django-hello-world简单例子","date":"2020-09-27T08:23:25.000Z","updated":"2020-09-28T04:23:26.000Z","comments":true,"path":"computer-science/python/django/course-1/01django-hello-world简单例子/","link":"","permalink":"https://ppxpython.github.io/computer-science/python/django/course-1/01django-hello-world%E7%AE%80%E5%8D%95%E4%BE%8B%E5%AD%90/","excerpt":"","text":"python 前端框架 # 01django-hello world 简单例子 加粗样式 日期：2019——09——26 IT 人： 小海豚 学习内容： 创建一个新的 django 文件 命令： django—admin startproject mywebsite创建文件 开启服务器 Python manage.py runserver 启动服务器 成功 创建一个 views 文件 Python 的 在其中编辑 在 url 中修改 在浏览器中进行刷新 注意：服务器要开启 Python manage.py runserve 原文出自[易百教程] 转载请保留原文链接: https://www.yiibai.com/geek/detail/1184 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"计算机科学","slug":"computer-science","permalink":"https://ppxpython.github.io/categories/computer-science/"},{"name":"Python","slug":"computer-science/python","permalink":"https://ppxpython.github.io/categories/computer-science/python/"},{"name":"Django框架","slug":"computer-science/python/django","permalink":"https://ppxpython.github.io/categories/computer-science/python/django/"},{"name":"零基础学Django框架","slug":"computer-science/python/django/course-1","permalink":"https://ppxpython.github.io/categories/computer-science/python/django/course-1/"}],"tags":[{"name":"Django","slug":"Django","permalink":"https://ppxpython.github.io/tags/Django/"}]},{"title":"我的第一篇博客文章","slug":"我的第一篇博客文章","date":"2020-09-26T15:29:07.000Z","updated":"2020-09-27T00:58:28.000Z","comments":true,"path":"我的第一篇博客文章/","link":"","permalink":"https://ppxpython.github.io/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/","excerpt":"","text":"你好！ 这是你第一次使用 Markdown 编辑器 所展示的欢迎页。如果你想学习如何使用 Markdown 编辑器，可以仔细阅读这篇文章，了解一下 Markdown 的基本语法知识。 # 新的改变 我们对 Markdown 编辑器进行了一些功能拓展与语法支持，除了标准的 Markdown 编辑器功能，我们增加了如下几点新功能，帮助你用它写博客： 全新的界面设计 ，将会带来全新的写作体验； 在创作中心设置你喜爱的代码高亮样式，Markdown 将代码片显示选择的高亮样式 进行展示； 增加了 图片拖拽 功能，你可以将本地的图片直接拖拽到编辑区域直接展示； 全新的 KaTeX 数学公式 语法； 增加了支持甘特图的 mermaid 语法[1] 功能； 增加了 多屏幕编辑 Markdown 文章功能； 增加了 焦点写作模式、预览模式、简洁写作模式、左右区域同步滚轮设置 等功能，功能按钮位于编辑区域与预览区域中间； 增加了 检查列表 功能。 # 功能快捷键 撤销：&lt;kbd&gt;Ctrl/Command&lt;/kbd&gt; + &lt;kbd&gt;Z&lt;/kbd&gt; 重做：&lt;kbd&gt;Ctrl/Command&lt;/kbd&gt; + &lt;kbd&gt;Y&lt;/kbd&gt; 加粗：&lt;kbd&gt;Ctrl/Command&lt;/kbd&gt; + &lt;kbd&gt;B&lt;/kbd&gt; 斜体：&lt;kbd&gt;Ctrl/Command&lt;/kbd&gt; + &lt;kbd&gt;I&lt;/kbd&gt; 标题：&lt;kbd&gt;Ctrl/Command&lt;/kbd&gt; + &lt;kbd&gt;Shift&lt;/kbd&gt; + &lt;kbd&gt;H&lt;/kbd&gt; 无序列表：&lt;kbd&gt;Ctrl/Command&lt;/kbd&gt; + &lt;kbd&gt;Shift&lt;/kbd&gt; + &lt;kbd&gt;U&lt;/kbd&gt; 有序列表：&lt;kbd&gt;Ctrl/Command&lt;/kbd&gt; + &lt;kbd&gt;Shift&lt;/kbd&gt; + &lt;kbd&gt;O&lt;/kbd&gt; 检查列表：&lt;kbd&gt;Ctrl/Command&lt;/kbd&gt; + &lt;kbd&gt;Shift&lt;/kbd&gt; + &lt;kbd&gt;C&lt;/kbd&gt; 插入代码：&lt;kbd&gt;Ctrl/Command&lt;/kbd&gt; + &lt;kbd&gt;Shift&lt;/kbd&gt; + &lt;kbd&gt;K&lt;/kbd&gt; 插入链接：&lt;kbd&gt;Ctrl/Command&lt;/kbd&gt; + &lt;kbd&gt;Shift&lt;/kbd&gt; + &lt;kbd&gt;L&lt;/kbd&gt; 插入图片：&lt;kbd&gt;Ctrl/Command&lt;/kbd&gt; + &lt;kbd&gt;Shift&lt;/kbd&gt; + &lt;kbd&gt;G&lt;/kbd&gt; 查找：&lt;kbd&gt;Ctrl/Command&lt;/kbd&gt; + &lt;kbd&gt;F&lt;/kbd&gt; 替换：&lt;kbd&gt;Ctrl/Command&lt;/kbd&gt; + &lt;kbd&gt;G&lt;/kbd&gt; # 合理的创建标题，有助于目录的生成 直接输入 1 次 &lt;kbd&gt;#&lt;/kbd&gt;，并按下 &lt; kbd&gt;space&lt;/kbd &gt; 后，将生成 1 级标题。 输入 2 次 &lt;kbd&gt;#&lt;/kbd&gt;，并按下 &lt; kbd&gt;space&lt;/kbd &gt; 后，将生成 2 级标题。 以此类推，我们支持 6 级标题。有助于使用 TOC 语法后生成一个完美的目录。 # 如何改变文本的样式 强调文本 强调文本 加粗文本 加粗文本 标记文本 删除文本 引用文本 H2O is 是液体。 210 运算结果是 1024. # 插入链接与图片 链接: link. 图片: 带尺寸的图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw =30x30) 居中的图片: 居中并且带尺寸的图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center =30x30) 当然，我们为了让用户更加便捷，我们增加了图片拖拽功能。 # 如何插入一段漂亮的代码片 去博客设置页面，选择一款你喜欢的代码片高亮样式，下面展示同样高亮的 代码片 . // An highlighted blockvar foo = 'bar';# 生成一个适合你的列表 项目 项目 项目 项目 1 项目 2 项目 3 计划任务 完成任务 # 创建一个表格 一个简单的表格是这么创建的： 项目 Value 电脑 $1600 手机 $12 导管 $1 # 设定内容居中、居左、居右 使用 :---------: 居中 使用 :---------- 居左 使用 ----------: 居右 第一列 第二列 第三列 第一列文本居中 第二列文本居右 第三列文本居左 # SmartyPants SmartyPants 将 ASCII 标点字符转换为 “智能” 印刷标点 HTML 实体。例如： TYPE ASCII HTML Single backticks 'Isn't this fun?' 'Isn't this fun?' Quotes \"Isn't this fun?\" \"Isn't this fun?\" Dashes -- is en-dash, --- is em-dash -- is en-dash, --- is em-dash # 创建一个自定义列表 Markdown Text-to-HTML conversion tool Authors John Luke # 如何创建一个注脚 一个具有注脚的文本。[2] # 注释也是必不可少的 Markdown 将文本转换为 HTML。 # KaTeX 数学公式 您可以使用渲染 LaTeX 数学表达式 KaTeX: Gamma 公式展示 Γ(n)=(n−1)!∀n∈N\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb NΓ(n)=(n−1)!∀n∈N 是通过欧拉积分 Γ(z)=∫0∞tz−1e−tdt .\\Gamma(z) = \\int_0^\\infty t^{z-1}e^{-t}dt\\,. Γ(z)=∫0∞​tz−1e−tdt. 你可以找到更多关于的信息 LaTeX 数学表达式 here. # 新的甘特图功能，丰富你的文章 Error: Could not find browser revision 756035. Run \"npm install\" or \"yarn install\" to download a browser binary. 关于 甘特图 语法，参考 这儿， # UML 图表 可以使用 UML 图表进行渲染。 Mermaid. 例如下面产生的一个序列图： Error: Could not find browser revision 756035. Run \"npm install\" or \"yarn install\" to download a browser binary.这将产生一个流程图。: Error: Could not find browser revision 756035. Run \"npm install\" or \"yarn install\" to download a browser binary. 关于 Mermaid 语法，参考 这儿， # FLowchart 流程图 我们依旧会支持 flowchart 的流程图： Error: Could not find browser revision 756035. Run \"npm install\" or \"yarn install\" to download a browser binary. 关于 Flowchart 流程图 语法，参考 这儿. # 导出与导入 # 导出 如果你想尝试使用此编辑器，你可以在此篇文章任意编辑。当你完成了一篇文章的写作，在上方工具栏找到 文章导出 ，生成一个.md 文件或者.html 文件进行本地保存。 # 导入 如果你想加载一篇你写过的.md 文件，在上方工具栏可以选择导入功能进行对应扩展名的文件导入， 继续你的创作。 mermaid 语法说明 ↩︎ 注脚的解释 ↩︎ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]}],"categories":[{"name":"计算机科学","slug":"computer-science","permalink":"https://ppxpython.github.io/categories/computer-science/"},{"name":"钉钉小程序","slug":"computer-science/DDapp","permalink":"https://ppxpython.github.io/categories/computer-science/DDapp/"},{"name":"钉钉小程序学习","slug":"computer-science/DDapp/ddapp-study1","permalink":"https://ppxpython.github.io/categories/computer-science/DDapp/ddapp-study1/"},{"name":"软件测试","slug":"software-test","permalink":"https://ppxpython.github.io/categories/software-test/"},{"name":"软件测试工具学习","slug":"software-test/test-tools","permalink":"https://ppxpython.github.io/categories/software-test/test-tools/"},{"name":"接口测试工具","slug":"software-test/test-tools/api-testing2","permalink":"https://ppxpython.github.io/categories/software-test/test-tools/api-testing2/"},{"name":"Postman","slug":"software-test/test-tools/api-testing2/postman","permalink":"https://ppxpython.github.io/categories/software-test/test-tools/api-testing2/postman/"},{"name":"Java","slug":"computer-science/java","permalink":"https://ppxpython.github.io/categories/computer-science/java/"},{"name":"SpringBoot框架","slug":"computer-science/java/springboot","permalink":"https://ppxpython.github.io/categories/computer-science/java/springboot/"},{"name":"SpringBoot框架常见错误集合","slug":"computer-science/java/springboot/springboot-error1","permalink":"https://ppxpython.github.io/categories/computer-science/java/springboot/springboot-error1/"},{"name":"Vue","slug":"computer-science/vue","permalink":"https://ppxpython.github.io/categories/computer-science/vue/"},{"name":"前端Vue中常见问题集合","slug":"computer-science/vue/vue-error1","permalink":"https://ppxpython.github.io/categories/computer-science/vue/vue-error1/"},{"name":"初学Vue框架","slug":"computer-science/vue/vue-study1","permalink":"https://ppxpython.github.io/categories/computer-science/vue/vue-study1/"},{"name":"Python","slug":"computer-science/python","permalink":"https://ppxpython.github.io/categories/computer-science/python/"},{"name":"Django框架","slug":"computer-science/python/django","permalink":"https://ppxpython.github.io/categories/computer-science/python/django/"},{"name":"零基础学Django框架","slug":"computer-science/python/django/course-1","permalink":"https://ppxpython.github.io/categories/computer-science/python/django/course-1/"},{"name":"小白学SpringBoot框架","slug":"computer-science/java/springboot/springboot-study1","permalink":"https://ppxpython.github.io/categories/computer-science/java/springboot/springboot-study1/"},{"name":"前端Django中常见的错误集合","slug":"computer-science/python/django/django-error1","permalink":"https://ppxpython.github.io/categories/computer-science/python/django/django-error1/"}],"tags":[{"name":"Postman","slug":"Postman","permalink":"https://ppxpython.github.io/tags/Postman/"},{"name":"Error","slug":"Error","permalink":"https://ppxpython.github.io/tags/Error/"},{"name":"VUE","slug":"VUE","permalink":"https://ppxpython.github.io/tags/VUE/"},{"name":"Django","slug":"Django","permalink":"https://ppxpython.github.io/tags/Django/"},{"name":"官网教程","slug":"官网教程","permalink":"https://ppxpython.github.io/tags/%E5%AE%98%E7%BD%91%E6%95%99%E7%A8%8B/"},{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://ppxpython.github.io/tags/SpringBoot/"}]}