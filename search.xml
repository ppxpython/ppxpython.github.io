<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="hello-world/"/>
      <url>hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvLw==">Hexo</span>! This is your very first post. Check <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=">troubleshooting</span> or you can ask me on <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==">GitHub</span>.</p><h2 id="quick-start"><a class="anchor" href="#quick-start">#</a> Quick Start</h2><h3 id="create-a-new-post"><a class="anchor" href="#create-a-new-post">#</a> Create a new post</h3><figure class="highlight bash"><figcaption data-lang="bash"><span>h</span></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>$ hexo new <span class="token string">"My New Post"</span></pre></td></tr></tbody></table></figure><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s">Writing</span></p><h3 id="run-server"><a class="anchor" href="#run-server">#</a> Run server</h3><figure class="highlight bash"><figcaption data-lang="bash"><span>h</span></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>$ hexo server</pre></td></tr></tbody></table></figure><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=">Server</span></p><h3 id="generate-static-files"><a class="anchor" href="#generate-static-files">#</a> Generate static files</h3><figure class="highlight bash"><figcaption data-lang="bash"><span>h</span></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>$ hexo generate</pre></td></tr></tbody></table></figure><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s">Generating</span></p><h3 id="deploy-to-remote-sites"><a class="anchor" href="#deploy-to-remote-sites">#</a> Deploy to remote sites</h3><figure class="highlight bash"><figcaption data-lang="bash"><span>h</span></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>$ hexo deploy</pre></td></tr></tbody></table></figure><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s">Deployment</span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>locust+prometheus+grafana压测</title>
      <link href="locust-prometheus-grafana%E5%8E%8B%E6%B5%8B/"/>
      <url>locust-prometheus-grafana%E5%8E%8B%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="了解压测"><a class="anchor" href="#了解压测">#</a> 了解压测</h1><h2 id="为什么要压测和目标"><a class="anchor" href="#为什么要压测和目标">#</a> 为什么要压测和目标</h2><blockquote><p>这个问题有很多答案，而每个人内心的答案可能都是不同的。</p></blockquote><ol><li>项目上线稳定后，对系统的评估</li><li>系统研发后期，对系统的检验</li><li>活动前，摸高压测，预估流量</li><li>线上出现性能问题</li><li>合作活动、系统，对方要求上线前压测</li></ol><p><strong>目标</strong>：</p><ul><li>新服务，无预估目标，需要通过压测得到服务基准数据或找到系统瓶颈进行优化</li><li>有明确的压测目标，需要通过压测确定服务的各项指标是否达标</li><li>常态化压测，为后期性能优化指导方向或提供参考依据</li></ul><h2 id="压测的分类"><a class="anchor" href="#压测的分类">#</a> 压测的分类</h2><p><img data-src="https://pic.imgdb.cn/item/6322d41916f2c2beb1e33f1e.jpg" alt=""></p><p><img data-src="https://pic.imgdb.cn/item/6322d45416f2c2beb1e3a08e.jpg" alt=""></p><h2 id="压力测试指标"><a class="anchor" href="#压力测试指标">#</a> 压力测试指标</h2><h3 id="基础的关注点"><a class="anchor" href="#基础的关注点">#</a> 基础的关注点</h3><h4 id="qps"><a class="anchor" href="#qps">#</a> QPS</h4><p>每秒处理的请求个数， “<strong>每秒查询率</strong>”，是<strong>一台服务器每秒能够响应的查询次数</strong>，是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准。 单位是 <code>request/s</code> 。 <code>每秒处理的请求数量</code> 。</p><h4 id="tps"><a class="anchor" href="#tps">#</a> TPS</h4><p>Transactions Per Second 的缩写，也就是<strong>事务数 / 秒</strong>。它是软件测试结果的测量单位。一个事务是指一个客户机向服务器发送请求然后服务器做出反应的过程。<strong>客户机在发送请求时开始计时，收到服务器响应后结束计时，以此来计算使用的时间和完成的事务个数</strong>。TPS &lt;= QPS</p><h4 id="rps"><a class="anchor" href="#rps">#</a> RPS</h4><p>Requests Per Second 的缩写，** 每秒能处理的请求数目。** 等效于 QPS</p><p>这三个过程，每秒能够完成 N 个这三个过程，Tps 也就是 N；</p><p>Qps 基本类似于 Tps，但是不同的是， <strong>对于一个页面的一次访问</strong> ，形成一个 Tps；但 <strong>一次页面请求，可能产生多次对服务器的请求</strong> ，服务器对这些请求，就可计入 “Qps” 之中。</p><p>例如：访问一个页面会请求服务器 3 次，一次放，产生一个 “T”，产生 3 个 “Q”</p><h4 id="rt"><a class="anchor" href="#rt">#</a> RT</h4><p>#响应时间 #，这个指标比较多，比如，最小响应时间、平均响应时间、最大响应时间等等，详细指标还有 <code>P50</code> 、 <code>P95</code> 、 <code>P99</code>  等等 <code>响应时间</code>  (RT) 是指用户从客户端发出请求到接收完服务器返回结果的整个过程所需花费的时间，包含网络传输时间以及服务器处理时间。</p><h4 id="vu"><a class="anchor" href="#vu">#</a> VU</h4><p>虚拟用户，<strong>系统模拟并发的用户</strong>。主要目的是最大程度的模拟用户操作，从而得到较为准确的压测数据，这个参数一般由压测人员制定，梯度递增。</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>阶段<span class="token number">1</span><span class="token operator">:</span> <span class="token number">50</span>虚拟用户，压测<span class="token number">1</span>小时；</pre></td></tr><tr><td data-num="2"></td><td><pre>阶段<span class="token number">2</span><span class="token operator">:</span> <span class="token number">100</span>虚拟用户，压测<span class="token number">1</span>小时；</pre></td></tr><tr><td data-num="3"></td><td><pre>阶段<span class="token number">3</span><span class="token operator">:</span> <span class="token number">150</span>虚拟用户，压测<span class="token number">1</span>小时；</pre></td></tr><tr><td data-num="4"></td><td><pre>阶段<span class="token number">4</span><span class="token operator">:</span> <span class="token number">200</span>虚拟用户，压测<span class="token number">1</span>小时；</pre></td></tr><tr><td data-num="5"></td><td><pre>阶段<span class="token number">5</span><span class="token operator">:</span> <span class="token number">250</span>虚拟用户，压测<span class="token number">1</span>小时；</pre></td></tr></tbody></table></figure><p>一般在为达到最佳负载的情况下， <code>QPS</code>  会随着 <code>VU</code>  的数量等比递增。 比如， <code>50VU</code>  下的 <code>QPS</code>  是 <code>1000</code> ，那么 <code>100VU</code>  下的 <code>QPS</code>  会接近 <code>2000</code>  。</p><h4 id="操作系统负载-外部系统等"><a class="anchor" href="#操作系统负载-外部系统等">#</a> 操作系统负载、外部系统等</h4><p>压测期间，还需要关注下服务器的负载、网络 IO 情况，如果涉及到外围系统，比如 Mysql、Redis 等，那么也要纳入观察范围。所以也就需要运维同学查看监控的读写情况。</p><p>列举一些常用指标，并不一定都需要关注，根据业务考虑指标的细化粒度。</p><ul><li>QPS：Query Per Second，每秒处理的请求个数</li><li>TPS：Transactions Per Second，每秒处理的事务数，TPS &lt;= QPS</li><li>RT： Response Time，响应时间，等价于 Latency RT 分平均延时，Pct 延时（Percentile 分位数）。平均值不能反映服务真实响应延时，实际压测中一般参考 Pct90，Pct99 等指标</li><li>CPU 使用率：出于节点宕机后负载均衡的考虑，一般 CPU 使用率 &lt; 75% 比较合适</li><li>内存使用率：内存占用情况，一般观察内存是否有尖刺或泄露</li></ul><p><img data-src="https://pic.imgdb.cn/item/6322d47b16f2c2beb1e3f4d1.jpg" alt=""></p><h3 id="学会观察"><a class="anchor" href="#学会观察">#</a> 学会观察</h3><h4 id="运行良好的特征"><a class="anchor" href="#运行良好的特征">#</a> 运行良好的特征</h4><ul><li>测试期间响应时间呈平稳趋势；</li><li>请求速率遵循与虚拟用户相同的斜坡（如果 VU 增加，则请求速率也会增加）；</li></ul><h4 id="达到最大吞吐量的特征"><a class="anchor" href="#达到最大吞吐量的特征">#</a> 达到最大吞吐量的特征</h4><ul><li>随着虚拟用户数量的增加，活动的正在进行中的请求数量继续增加，而 QPS（完成的请求）却趋于平稳（甚至下降）。此时，系统过载，从而导致更长的响应时间。</li><li>HTTP 失败率增加</li></ul><h4 id="性能问题瓶颈的特征"><a class="anchor" href="#性能问题瓶颈的特征">#</a> 性能问题 / 瓶颈的特征</h4><ul><li><p>测试期间响应时间显著增加；</p><p>【ge: 在引擎鉴权测试时并发到达 2000 开始出现 TR 明显变长】</p></li><li><p>响应时间显著增加，然后迅速触底并保持平稳（HTTP 被降级了）；</p></li><li><p>QPS 不会随着 VU 的增加而增加，并且响应时间开始增加，疑似达到最大吞吐量；</p></li></ul><h4 id="发生故障的特征"><a class="anchor" href="#发生故障的特征">#</a> 发生故障的特征</h4><ul><li>高 HTTP 错误率</li><li>低 QPS 下的系统高负载</li></ul><p>大概呈现的趋势为</p><p>除了前面说到的情况，肯定还有一些我们无法下手的三无接口，无参考、无预估、无历史数据，这时候只能一点一点来，慢慢把压力提上去的同时收集数据，最终得出接口的最优处理能力。</p><p>最佳并发用户数（The Optimum Number of Concurrent Users）</p><p>最大并发用户数（The Maximum Number of Concurrent Users）</p><p>资源的利用情况（Utilization，包括硬件资源和软件资源）、</p><p>吞吐量（Throughput，这里是指每秒事务数）</p><p>响应时间（Response Time）</p><p>坐标轴的横轴从左到右表现了并发用户数（Number of Concurrent Users）的不断增长。</p><p><img data-src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/3/171db0b40cbc0832~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="常见性能折线图"></p><p>资源占用达到饱和，吞吐量增长明显放缓甚至停止增长，而响应时间却进一步延长<br><img data-src="https://pic.imgdb.cn/item/6322d49d16f2c2beb1e4345b.jpg" alt=""></p><p>蓝线表示 TPS，黄色表示响应时间</p><p>在 TPS 增加的过程中，响应时间一开始会处在较低的状态，也就是在 A 点之前。接着响应时间开始有些增加，直到业务可以承受的时间点 B，这时 TPS 仍然有增长的空间。再接着增加压力，达到 C 点时，达到最大 TPS。我们再接着增加压力，响应时间接着增加，但 TPS 会有下降。</p><h1 id="locust"><a class="anchor" href="#locust">#</a> locust</h1><h2 id="locust原理"><a class="anchor" href="#locust原理">#</a> locust 原理</h2><h3 id="what-is-locust"><a class="anchor" href="#what-is-locust">#</a> What is Locust？</h3><p>一个易于使用的分布式用户<strong>负载测试工具</strong>。它旨在对网站（或其他系统）进行<strong>负载测试</strong>，并确定一个系统可以处理多少并发用户。</p><p>Locust 是完全基于<strong>事件</strong>的，因此可以在单台机器中支持数以千计的用户在线。和其它基于事件的程序相比较，它是不需要使用回调的。相反，它通过 gevent 使用轻量级的进程。每一个 locust 测试你的网站时，实际上是真实的在内部运行它自己的进程 (或 greenlet 自行调度的微线程，准确的说)。这样就允许你不使用复杂的回调方法，而是使用 Python 编写复杂的场景。</p><p>Locust 在英文中是  <code>蝗虫</code>  的意思：</p><p>作者的想法是，在测试期间，放一大群 <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTG9jdXN0">蝗虫</span> 攻击您的网站。</p><h3 id="what-is-gevent"><a class="anchor" href="#what-is-gevent">#</a> What is Gevent？</h3><p>gevent 是一个基于协程的 Python 网络库，它使用 greenlet 在 libev 或 libuv 事件循环之上提供一个高级的同步 API</p><p><code>在Python中实现协程的第三方库。协程又叫微线程Corouine。使用gevent可以获取极高的并发能力</code></p><p><img data-src="https://pic.imgdb.cn/item/6322d4c116f2c2beb1e47e93.jpg" alt=""></p><h4 id="并发机制"><a class="anchor" href="#并发机制">#</a> 并发机制</h4><p>①Locust 的并发机制采用协程（gevent）的机制。</p><p>②采用多线程来模拟多用户时，线程数会随着并发数的增加而增加，而线程之间的切换是需要占用资源的，IO 的阻塞和线程的 sleep 会不可避免的导致并发效率下降；正因如此，LoadRunner 和 Jmeter 这类采用进程和线程的测试工具，都很难在单机上模拟出较高的并发压力。</p><p>③而协程和线程的区别在于：协程避免了系统级资源调度，由此大幅提高了性能。</p><p>④正常情况下，单台普通配置的测试机可以生产数千并发压力，这是 LoadRunner 和 Jmeter 都无法实现的。</p><p><span class="exturl" data-url="aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT0lRTUlOEQlOEYlRTclQTglOEImYW1wO3NwbT0xMDAxLjIxMDEuMzAwMS43MDIw">协程</span>又称为微线程，纤程。英文名 Coroutine: 协程是一种用户态的轻量级线程<br>协程拥有自己的<span class="exturl" data-url="aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT0lRTUlQUYlODQlRTUlQUQlOTglRTUlOTklQTgmYW1wO3NwbT0xMDAxLjIxMDEuMzAwMS43MDIw">寄存器</span>上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复之前保存的寄存器上下文和栈</p><p><img data-src="https://pic.imgdb.cn/item/6322d4e216f2c2beb1e4c274.jpg" alt=""></p><h3 id="特点"><a class="anchor" href="#特点">#</a> 特点</h3><p>①、不需要编写笨重的 UI 或者臃肿的 XML 代码，基于协程而不是回调，脚本编写简单易读；</p><p>②、有一个基于 we 简洁的 HTML+JS 的 UI 用户界面，可以实时显示相关的测试结果；</p><p>③、支持分布式测试，用户界面基于网络，因此具有跨平台且易于扩展的特点；</p><p>④、所有繁琐的 I / O 和协同程序都被委托给 gevent，替代其他工具的局限性；</p><p>同样配置下，单台负载机可模拟的负载数远超 jmeter</p><p><img data-src="https://pic.imgdb.cn/item/6322d4fa16f2c2beb1e4f1ea.jpg" alt=""></p><h4 id="loucst执行流程"><a class="anchor" href="#loucst执行流程">#</a> Loucst 执行流程</h4><p>具体流程如下：<br>①先执行 WebsiteTasks 中的 on_start（只执行一次），作为初始化；</p><p>②从 WebsiteTasks 中随机挑选（如果定义了任务间的权重关系，那么就按照权重关系随机挑选）一个任务执行；</p><p>③根据 Locust 类中 min_wait 和 max_wait 定义的间隔时间范围（如果 TaskSet 类中也定义了 min_wait 或者 max_wait，以 TaskSet 中的优先），在时间范围中随机取一个值，休眠等待；</p><p>④重复 2~3 步骤，直到测试任务终止。</p><p><img data-src="https://pic.imgdb.cn/item/6322d51116f2c2beb1e52182.jpg" alt=""></p><h3 id="locust-核心类介绍"><a class="anchor" href="#locust-核心类介绍">#</a> Locust 核心类介绍</h3><h4 id="taskset"><a class="anchor" href="#taskset">#</a> TaskSet()</h4><p>定义了每个用户的任务集合，测试任务开始后，每个 Locust 用户会从 TaskSet 中随机挑选（如果定义了任务间的权重关系，那么就是按照权重关系随机挑选）一个任务执行，然后随机等待 Locust 类中定义的 min_wait 和 max_wait（如果 TaskSet 类中也定义了 min_wait 或者 max_wait，按照 TaskSet 中的为准）之间的一段时间，执行下一个任务。</p><pre><code class="language-AssertionError:"># TaskSet 提供的常用方法client # client  源码：return self.locust.client  返回 locust的client，用法与Request库类似locust # 当任务集被实例化时，将引用根蝗虫类实例parent # 任务集被实例化时，指向每个TaskSet所属的父类TaskSet （用于 TaskSet嵌套）client # 指向TaskSet所属的父HttpLocust类的client属性，self.client与self.locust.client效果是一样的。如果TaskSet所属的父类是个Locust类，则没有这个client属性</code></pre><h4 id="httplocust"><a class="anchor" href="#httplocust">#</a> HttpLocust()</h4><p>继承了 Locust 类，表示将要生成的每一个虚拟的 HTTP 用户，用来发送请求到进行负载测试的系统</p><pre><code class="language-AssertionError:">HttpLocust 继承 Locust   -&gt; class HttpLocust(Locust):task_set # 定义locust执行任务行为的 任务集类   如：task_set = TestDemohost  # 要测试的 目标服务地址min_wait = 1000  # 单位为ms  最小等待时间  最新版本 已弃用 （当前版本:0.14.5）max_wait = 1000  # 单位为ms  最大等待时间  最新版本 已弃用 （当前版本:0.14.5）#between(min_wait, max_wait)wait_time = between(100, 1000)  # 单位为ms   等待时间  任务执行间隔时间 随机从100~1000区间内取</code></pre><h4 id="task-装饰器-可控制任务执行权重比"><a class="anchor" href="#task-装饰器-可控制任务执行权重比">#</a> task 装饰器 可控制任务执行权重比</h4><p>，defautl：weight=1 如下</p><pre><code class="language-AssertionError:">class ForumPage(TaskSet):    @task(100)    def read_thread(self):        pass      @task(7)    def create_thread(self):        pass</code></pre><h5 id="eg"><a class="anchor" href="#eg">#</a> eg</h5><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> json</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> os</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">from</span> locust <span class="token keyword">import</span> HttpLocust<span class="token punctuation">,</span> TaskSet<span class="token punctuation">,</span> task<span class="token punctuation">,</span> between</pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span>TaskSet<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token decorator annotation punctuation">@task</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">test_get</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token decorator annotation punctuation">@task</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">test_post</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        responses <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">'url'</span><span class="token punctuation">,</span> headers<span class="token operator">=</span><span class="token string">'headers'</span><span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token string">'body'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token comment"># 对返回内容 进行断言</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token keyword">if</span> responses<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            rst <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>responses<span class="token punctuation">.</span>text<span class="token punctuation">,</span> strict<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            <span class="token keyword">if</span> rst<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'00000'</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                responses<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># Locust ResponseContextManager 类提供的  Report the response as successful</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            <span class="token keyword">else</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="21"></td><td><pre>                responses<span class="token punctuation">.</span>failure<span class="token punctuation">(</span><span class="token string">'code：%s ErrorMsg：%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>rst<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rst<span class="token punctuation">[</span><span class="token string">'errorMsg'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token keyword">else</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            responses<span class="token punctuation">.</span>failure<span class="token punctuation">(</span><span class="token string">'status_code：%s'</span> <span class="token operator">%</span> responses<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">WebsiteUser</span><span class="token punctuation">(</span>HttpLocust<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    task_set <span class="token operator">=</span> Demo</pre></td></tr><tr><td data-num="28"></td><td><pre>    host <span class="token operator">=</span> <span class="token string">'http://www.baidu.com'</span>  <span class="token comment"># 目标服务地址</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token comment"># min_wait = 1000  # 单位为 ms  最小等待时间  最新版本 已弃用 （当前版本：0.14.5）</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token comment"># max_wait = 1000  # 单位为 ms  最大等待时间  最新版本 已弃用 （当前版本：0.14.5）</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token comment"># between(min_wait, max_wait)</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    wait_time <span class="token operator">=</span> between<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment"># 单位为 s   等待时间  任务执行间隔时间</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token comment"># 以下 便于当前脚本 本地调试</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token comment"># 启动 当前脚本</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    cmd <span class="token operator">=</span> <span class="token string">'locust -f locust_demo.py'</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><h4 id="核心"><a class="anchor" href="#核心">#</a> 核心</h4><p>如果 Locust 类代表蝗虫群，则可以说 TaskSet 类代表蝗虫的大脑。每个 Locust 类必须设置一个 task_set 属性，该属性指向 TaskSet。</p><p>顾名思义，TaskSet 是任务的集合。这些任务是普通的 python 可调用对象。</p><p>TaskSet()</p><blockquote><p>定义了每个用户的任务集合，测试任务开始后，每个 Locust 用户会从 TaskSet 中随机挑选（如果定义了任务间的权重关系，那么就是按照权重关系随机挑选）一个任务执行，然后随机等待 Locust 类中定义的 min_wait 和 max_wait（如果 TaskSet 类中也定义了 min_wait 或者 max_wait，按照 TaskSet 中的为准）之间的一段时间，执行下一个任务。</p></blockquote><ul><li>HttpLocust()</li></ul><blockquote><p>继承了 Locust 类，表示将要生成的每一个虚拟的 HTTP 用户，用来发送请求到进行负载测试的系统</p></blockquote><ul><li><p>taks</p><blockquote><p>装饰器 可控制任务执行权重比，defautl：weight=1 如下：</p></blockquote></li></ul><h1 id="ipt流程"><a class="anchor" href="#ipt流程">#</a> IPT 流程</h1><h2 id="操作"><a class="anchor" href="#操作">#</a> 操作</h2><p>输入接口，参数，账号，服务器 ip 们，内核数，返回结果，执行权重；输入模拟用户数模拟用户并发</p><h2 id="ipt准备"><a class="anchor" href="#ipt准备">#</a> IPT 准备：</h2><p>我们以校园版为例：</p><ol><li>观察机：146 上为主环境代码</li><li>执行机：145，147，148，158</li><li>准备：测试账号数据：需要找开发邓锦明提供是否有现成代码，生成批量账号。</li><li>现需：教师账号：学生账号  1：50</li><li>数量：教师账号：70 个 学生 3500 - 个，一个教师对应 50 个学生</li><li>图形界面进行 <code>逐步负载模式</code></li><li>前端主机配置 4g8c</li></ol><p>找相应的开发去获取接口文档，接口参数。和并发量（需要与产品和开发确定）</p><h2 id="ipt部署环境"><a class="anchor" href="#ipt部署环境">#</a> IPT 部署环境</h2><h3 id="1登录远程服务器-配置python3环境"><a class="anchor" href="#1登录远程服务器-配置python3环境">#</a> 1. 登录远程服务器  配置 python3 环境</h3><h3 id="2-刚申请时需要直接pip3-install-locust不成功可能是因为没有安装python-的dev包yum-install-python3-devel后重新输入pip3-install-locust"><a class="anchor" href="#2-刚申请时需要直接pip3-install-locust不成功可能是因为没有安装python-的dev包yum-install-python3-devel后重新输入pip3-install-locust">#</a> 2. 刚申请时需要直接 pip3 install locust，不成功可能是因为<strong>没有安装 python 的 dev 包</strong>，yum install python3-devel 后重新输入 pip3 install locust</h3><h3 id="3-安装ansible在观察机上用于部署代码"><a class="anchor" href="#3-安装ansible在观察机上用于部署代码">#</a> 3. 安装 ansible，在观察机上用于部署代码</h3><ol><li><p>安装 ansible<br>yum -y install epel-release<br>yum -y install ansible</p></li><li><p>配置 ansible 权限</p><p>vi /etc/ansible/ansible.cfg<br> 在文件中进行搜索定位到<br>:/host_key_checking<br> 修改后：</p><pre><code>#uncomment this to disable SSH key host checking         host_key_checking = False</code></pre></li></ol><h3 id="4安装locust"><a class="anchor" href="#4安装locust">#</a> 4. 安装 locust</h3><h4 id="安装依赖"><a class="anchor" href="#安装依赖">#</a> 安装依赖</h4><p>1、支持的 python 版本：2.7、3.4、3.5、3.6；</p><p>2、 安装 locust</p><p>①、直接通过 <strong>pip install locustio</strong> 命令安装；</p><p>②、通过为 pyzmq、gevent 和 greenlet 安装预先构建的二进制包，然后在<span class="exturl" data-url="aHR0cHM6Ly93d3cubGZkLnVjaS5lZHUvfmdvaGxrZS9weXRob25saWJzLw==">这里</span>找到非官方的预制包，下载.whl 文件后，使用 <strong>pip install name-of</strong>-file**.whl** 命令安装；</p><p>安装成功后可以输入 <strong>pip show locust</strong> 命令查看是否安装成功，以及通过 <strong>locust -help</strong> 命令查看帮助信息。</p><p>pip3 install locust -i <span class="exturl" data-url="aHR0cDovL3B5cGkuZG91YmFuLmNvbS9zaW1wbGU=">http://pypi.douban.com/simple</span> --trusted-host <span class="exturl" data-url="aHR0cDovL3B5cGkuZG91YmFuLmNvbQ==">pypi.douban.com</span></p><p>Flask-BasicAuth</p><p>psutil</p><p>msgpack</p><p>roundrobin</p><p>gevent</p><p>geventhttpclient-wheels</p><h3 id="5-pip3-install-prometheus_client用于采集数据"><a class="anchor" href="#5-pip3-install-prometheus_client用于采集数据">#</a> 5. pip3 install prometheus_client 用于采集数据</h3><h3 id="6-将ipt项目进行拷贝"><a class="anchor" href="#6-将ipt项目进行拷贝">#</a> 6. 将 IPT 项目进行拷贝</h3><h3 id="7安装prometheus用于收集locust监听的请求接口信息"><a class="anchor" href="#7安装prometheus用于收集locust监听的请求接口信息">#</a> 7. 安装 prometheus 用于收集 locust 监听的请求接口信息</h3><ol><li><p>将 #prometheus-2.36.2.linux-amd64.tar.gz# 文件进行解压，直接运行即可。</p><p>版本有要求：可视化观察 grafana-7.3.6 在 172.17.20.146 上，注意必须是要该版本或者以上否则主题面板数据可能不会显示，主题 12081</p><p>需要在 prometheus.yml 文件中配置一下监听 locust</p><pre><code class="language-source">global:  scrape_interval:     10s  evaluation_interval: 10sscrape_configs:  - job_name: prometheus    static_configs:      - targets: ['localhost:9090']        labels:          instance: prometheus  - job_name: locust    metrics_path: '/export/prometheus'    static_configs:      - targets: ['localhost:8089']  # 地址修改为实际地址        labels:          instance: locust</code></pre><p>进入后运行./prometheus</p></li></ol><h3 id="8-将test_locustpy替换"><a class="anchor" href="#8-将test_locustpy替换">#</a> 8. 将 test_locust.py 替换</h3><pre><code class="language-source"># coding: utf8 import sixfrom itertools import chain from flask import request, Responsefrom locust import stats as locust_stats, runners as locust_runnersfrom locust import User, task, eventsfrom prometheus_client import Metric, REGISTRY, exposition # This locustfile adds an external web endpoint to the locust master, and makes it serve as a prometheus exporter.# Runs it as a normal locustfile, then points prometheus to it.# locust -f prometheus_exporter.py --master # Lots of code taken from [mbolek's locust_exporter](https://github.com/mbolek/locust_exporter), thx mbolek!  class LocustCollector(object):    registry = REGISTRY     def __init__(self, environment, runner):        self.environment = environment        self.runner = runner     def collect(self):        # collect metrics only when locust runner is spawning or running.        runner = self.runner         if runner and runner.state in (locust_runners.STATE_SPAWNING, locust_runners.STATE_RUNNING):            stats = []            for s in chain(locust_stats.sort_stats(runner.stats.entries), [runner.stats.total]):                stats.append({                    "method": s.method,                    "name": s.name,                    "num_requests": s.num_requests,                    "num_failures": s.num_failures,                    "avg_response_time": s.avg_response_time,                    "min_response_time": s.min_response_time or 0,                    "max_response_time": s.max_response_time,                    "current_rps": s.current_rps,                    "median_response_time": s.median_response_time,                    "ninetieth_response_time": s.get_response_time_percentile(0.9),                    # only total stats can use current_response_time, so sad.                    #"current_response_time_percentile_95": s.get_current_response_time_percentile(0.95),                    "avg_content_length": s.avg_content_length,                    "current_fail_per_sec": s.current_fail_per_sec                })             # perhaps StatsError.parse_error in e.to_dict only works in python slave, take notices!            errors = [e.to_dict() for e in six.itervalues(runner.stats.errors)]             metric = Metric('locust_user_count', 'Swarmed users', 'gauge')            metric.add_sample('locust_user_count', value=runner.user_count, labels={})            yield metric                  metric = Metric('locust_errors', 'Locust requests errors', 'gauge')            for err in errors:                metric.add_sample('locust_errors', value=err['occurrences'],                                  labels={'path': err['name'], 'method': err['method'],                                          'error': err['error']})            yield metric             is_distributed = isinstance(runner, locust_runners.MasterRunner)            if is_distributed:                metric = Metric('locust_slave_count', 'Locust number of slaves', 'gauge')                metric.add_sample('locust_slave_count', value=len(runner.clients.values()), labels={})                yield metric             metric = Metric('locust_fail_ratio', 'Locust failure ratio', 'gauge')            metric.add_sample('locust_fail_ratio', value=runner.stats.total.fail_ratio, labels={})            yield metric             metric = Metric('locust_state', 'State of the locust swarm', 'gauge')            metric.add_sample('locust_state', value=1, labels={'state': runner.state})            yield metric             stats_metrics = ['avg_content_length', 'avg_response_time', 'current_rps', 'current_fail_per_sec',                             'max_response_time', 'ninetieth_response_time', 'median_response_time', 'min_response_time',                             'num_failures', 'num_requests']             for mtr in stats_metrics:                mtype = 'gauge'                if mtr in ['num_requests', 'num_failures']:                    mtype = 'counter'                metric = Metric('locust_stats_' + mtr, 'Locust stats ' + mtr, mtype)                for stat in stats:                    # Aggregated stat's method label is None, so name it as Aggregated                    # locust has changed name Total to Aggregated since 0.12.1                    if 'Aggregated' != stat['name']:                        metric.add_sample('locust_stats_' + mtr, value=stat[mtr],                                          labels={'path': stat['name'], 'method': stat['method']})                    else:                        metric.add_sample('locust_stats_' + mtr, value=stat[mtr],                                          labels={'path': stat['name'], 'method': 'Aggregated'})                yield metric  @events.init.add_listenerdef locust_init(environment, runner, **kwargs):    print("locust init event received")    if environment.web_ui and runner:        @environment.web_ui.app.route("/export/prometheus")        def prometheus_exporter():            registry = REGISTRY            encoder, content_type = exposition.choose_encoder(request.headers.get('Accept'))            if 'name[]' in request.args:                registry = REGISTRY.restricted_registry(request.args.get('name[]'))            body = encoder(registry)            return Response(body, content_type=content_type)        REGISTRY.register(LocustCollector(environment, runner))  class Dummy(User):    @task(20)    def hello(self):        pass</code></pre><p>使用方式两种，</p><p>a、直接修改改文件，将自己的压测类替换 Dummy 类，当启动压测，自动会启动 ip:/export/prometheus 的服务，该服务的数据就是我们需要收集的数据</p><p>b、以 master 启动该脚本，压测脚本以 worker 形式启动，指向 master 为启动该脚本的地址</p><p>b 优势在于，监听服务可以永远启动，第一种方式只有压测时才启动</p><h3 id="9-运行测试代码保证与监控互通"><a class="anchor" href="#9-运行测试代码保证与监控互通">#</a> 9. 运行测试代码，保证与监控互通</h3><ol><li><p>运行 locust -f test_locust.py --worker --master-host=159.75.109.171 执行</p><p>locust --master -f prometheus_exporter.py 观察</p></li><li><p>在 159.75.109.171：8089 中访问进行并发请求</p><p><img data-src="https://pic.imgdb.cn/item/6322d56516f2c2beb1e5b46e.jpg" alt=""></p></li><li><p>在访问<span class="exturl" data-url="aHR0cDovLzE1OS43NS4xMDkuMTcxOjgwODkvZXhwb3J0L3Byb21ldGhldXM="> 159.75.109.171:8089/export/prometheus</span> 中保证监听 locust 程序正常执行</p></li></ol><p><img data-src="https://pic.imgdb.cn/item/6322d57316f2c2beb1e5c9d9.jpg" alt=""><br>4. 访问<span class="exturl" data-url="aHR0cDovLzE1OS43NS4xMDkuMTcxOjkwOTAvZ3JhcGg/ZzAuZXhwcj1sb2N1c3RfZXJyb3JzJmFtcDtnMC50YWI9MCZhbXA7ZzAuc3RhY2tlZD0wJmFtcDtnMC5zaG93X2V4ZW1wbGFycz0wJmFtcDtnMC5yYW5nZV9pbnB1dD0yaCZhbXA7ZzEuZXhwcj1sb2N1c3Rfc2xhdmVfY291bnQmYW1wO2cxLnRhYj0wJmFtcDtnMS5zdGFja2VkPTAmYW1wO2cxLnNob3dfZXhlbXBsYXJzPTAmYW1wO2cxLnJhbmdlX2lucHV0PTFo"> Prometheus Time Series Collection and Processing Server</span></p><pre><code>http://159.75.109.171:9090/graph http://159.75.109.171:9090/targets保证promethus接收到locust请求的数据</code></pre><p><img data-src="https://pic.imgdb.cn/item/6322d5ad16f2c2beb1e63eed.jpg" alt=""><br>5. 访问<span class="exturl" data-url="aHR0cDovLzE3Mi4xNy4yMC4xNDc6MzAwMC9kL1Z2SnhVZ0NXYS9sb2N1c3QtZm9yLXByb21ldGhldXMtcXVhbi1saWFuLWx1LXlhLWNlP29yZ0lkPTEmYW1wO3JlZnJlc2g9MWgmYW1wO2Zyb209bm93LTNoJmFtcDt0bz1ub3c="> Locust for Prometheus 全链路压测 - Grafana</span><br>6. <span class="exturl" data-url="aHR0cDovLzE3Mi4xNy4yMC4xNDc6MzAwMC8=">http://172.17.20.147:3000/</span></p><pre><code>用账号admin admin访问grafana数据图表可视化设置数据源将</code></pre><p><img data-src="https://pic.imgdb.cn/item/6322d5d616f2c2beb1e69054.jpg" alt=""></p><p><img data-src="https://pic.imgdb.cn/item/6322d5eb16f2c2beb1e6b840.jpg" alt=""></p><p><img data-src="https://pic.imgdb.cn/item/6322d5f816f2c2beb1e6d4d5.jpg" alt=""></p><p>至此我们的环境部署完毕，可以开始准备测试了</p><h2 id=""><a class="anchor" href="#">#</a> </h2><h1 id="测试流程"><a class="anchor" href="#测试流程">#</a> 测试流程</h1><p>压测流程</p><p>完整的压测流程一般包含下面几个步骤</p><ol><li>压测目标的制定</li><li>压测链路的梳理</li><li>压测环境的准备</li><li>压测数据的构造</li><li>发压测试</li><li>瓶颈定位及容量微调</li><li>压测总结</li></ol><p><img data-src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/3/171db0b32ecc8ba0~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="常规压测流程"></p><h2 id="压测目标"><a class="anchor" href="#压测目标">#</a> 压测目标</h2><p>性能测试中， <em><strong>平均值的作用是十分有限的</strong></em> ， <strong>我们不应看最好的结果，相反地，应该控制最坏的结果</strong> ，</p><p>总结一下，较为科学的评估方法应该将 <code>指标-成功率-流量</code> 三者挂钩在一起的：</p><blockquote><p>xx% 的响应在 xx 毫秒内返回，其中成功率为 xx%。</p></blockquote><p>根据这个方针，可以得到一些测试思路：</p><ol><li>在响应时间的限制下，系统最高的吞吐量（这里不对吞吐量做严格定义，当成是 QPS 或 TPS 即可）</li><li>在成功率 100% 的前提下，不考虑响应时间长短，系统能承受的吞吐量</li><li>容忍一定的失败率和慢响应，系统最高能承受的吞吐量（95% 成功率，前 95% 的请求响应时间为 xx 毫秒时的最大 QPS）</li><li>在上面的场景下还要考虑时间和资源，比如最高吞吐量持续 10 分钟和持续 1 小时是不一样的，不同的时间持续长度下，机器资源（cpu、内存、负载、句柄、线程数、IO、带宽）的占用是否合理</li></ol><h2 id="压测准备"><a class="anchor" href="#压测准备">#</a> 压测准备</h2><h3 id="压测场景"><a class="anchor" href="#压测场景">#</a> 压测场景</h3><p>压测是有目的的压测，也就是说不是随便找些接口发一通压力，而压测全部的接口也是做不到的或者说无意义的，得有压测的优先级，所以<strong>梳理压测场景是很重要</strong>的。高优场景主要有下面几个：</p><ol><li>高频业务场景</li><li>关键业务场景，使用频率低，一旦出问题就很严重（学生登录）</li><li>性能高消耗场景（上传答案）</li><li>曾经出现过问题的场景</li></ol><p>压测有分单接口压测和场景化压测，前者会简单一些，后者一般是多个接口混合操作以组成一个业务场景，两者在方法上是相通的。</p><p>梳理场景时 QA 需要与 RD 对齐，确认不同接口的 RD 负责人、<strong>需要压测的接口、系统性能现状以及压测目标</strong>；在确定每个接口的压测目标时，要考虑到<strong>压测对象是单实例单机房还是集群</strong>；在细节上也要确认是单接口压测还是场景化压测，<strong>每个接口的流量占比以及优先级</strong>，需不需要发足够的压力来触发系统的自动扩容或降级等更进一步的运维能力。</p><h3 id="压测环境"><a class="anchor" href="#压测环境">#</a> 压测环境</h3><p><strong>脏数据问题</strong></p><ul><li>如果是在独立的一套环境中操作，不存在该问题【eg：校园版压测会单独部署一套被压系统】</li><li>影子表：如果是在线上操作，一般将数据写入影子表（与原数据表在 schema 上一致的不同名表）而非原数据表，实现压测数据与线上数据隔离【eg：翼课网压测采用影子库】</li><li>白名单：指定测试 id 或者测试账号，在入库后通过统一 id 区分压测数据，统一处理</li></ul><p>可以<strong>独立部署一套线下环境进行压测</strong>。在不影响线上环境的前提下，确保机房，网络，存储，上下游服务与线上保持一致，部署一套独立的环境进行测试，机器与线上隔离，机器出问题不会影响线上。这种方式压测只是针对较少的几个系统进行，因为很<strong>难把整个链路所有系统都独立再部署一套</strong>，所以应用范围有限。</p><h3 id="压测监控体系"><a class="anchor" href="#压测监控体系">#</a> 压测监控体系</h3><p>确认好压测流程的技术支持，确认<strong>压测链路的监控体系</strong>是否完整，一来方便在压测过程中及时发现问题，二来是为了积攒历史压测数据，三来顺便确认监控系统本身是否可靠且全部到位。一般监控项包括（也就是压测指标）：</p><ul><li>核心接口和核心依赖的流量、响应耗时、成功率【eg：IPT 接入监控系统或日志查看】</li><li>消息队列、缓存、数据库【eg：由服务端观察队列和数据库的情况】</li><li>机器物理资源【eg：压测机器 qa 可查看机器负载情况】</li></ul><h2 id="压测总结"><a class="anchor" href="#压测总结">#</a> 压测总结</h2><p>给出一个完整的压测过程例子：</p><ol><li>确定本次的压测目标，预估各项指标的达标值</li><li>根据服务接口的优先级和使用场景，确认出需要压测的接口</li><li>梳理压测链路上的服务，确认链路完整性</li><li>针对压测链路设计的服务进行压测改造</li><li>准备压测数据，确认压测策略</li><li>开始压测，监控各项指标，多轮压测检验性能优化效果</li><li>压测环境清理</li><li>压测总结报告输出</li></ol><p>压测最终应该输出一份报告总结，其实也就是把整个压测方案、过程、结论记录下来，写明压测目标、压测接口、压测数据、压测结论，给出发现的问题并提供优化方案。往往在压测报告完成时，性能问题已经基本被解决了，报告的意义在于梳理前面的整个流程，给后续的压测提供经验指导。</p><h2 id="压测准备-2"><a class="anchor" href="#压测准备-2">#</a> 压测准备</h2><h3 id="确定压测范围"><a class="anchor" href="#确定压测范围">#</a> 确定压测范围</h3><h3 id="压测指标"><a class="anchor" href="#压测指标">#</a> 压测指标</h3><h3 id="压测前数据环境准备"><a class="anchor" href="#压测前数据环境准备">#</a> 压测前数据环境准备</h3><h3 id="压测中"><a class="anchor" href="#压测中">#</a> 压测中</h3><h3 id="日志结果分析"><a class="anchor" href="#日志结果分析">#</a> 日志结果分析</h3><h3 id="总结得出结论"><a class="anchor" href="#总结得出结论">#</a> 总结得出结论</h3><ol><li><p>调参，通过抓包分析各接口参数和接口之间参数对应关系</p></li><li><p>接口请求方式，接口请求方式一般分为</p><h4 id="applicationx-www-form-urlencoded"><a class="anchor" href="#applicationx-www-form-urlencoded">#</a> application/x-www-form-urlencoded</h4><p>数据发送过程中会对数据进行<span class="exturl" data-url="aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT0lRTUlQkElOEYlRTUlODglOTclRTUlOEMlOTYmYW1wO3NwbT0xMDAxLjIxMDEuMzAwMS43MDIw">序列化</span>处理，以键值对形式？key1=value1&amp;key2=value2 的方式发送到服务器。 数据被编码成以  <code>'&amp;'</code>  分隔的键 - 值对，同时以  <code>'='</code>  分隔键和值。非字母或数字的字符会被 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9HbG9zc2FyeS9wZXJjZW50LWVuY29kaW5n">percent-encoding</span>。传参时 <code>urllib.parse.urlencode</code>  需要对 dict 编码</p><ul><li>优势：所有浏览器都兼容。</li><li>问题：在数据结构及其复杂时，服务端数据解析变得很难</li></ul><h4 id="applicationjson"><a class="anchor" href="#applicationjson">#</a> application/json</h4><p>请求头中加入 content-type: application/jsonapplication/json ， 方便的提交复杂的结构化数据， ，告诉服务器请求的主体内容是 json 格式的字符串，服务器端会对 json 字符串进行解析，<strong>json 格式要支持比键值对复杂得多的结构化数据。<strong>这种方式的好处不需要关心数据结构的复杂度，只需要标准的 json 格式就能提交成功，传参时</strong> json.dumps</strong> 需要转成 json 格式</p><ul><li>优势：是前端不需要关心数据结构的复杂度，后端解析方便。</li><li>问题：少数浏览器不兼容</li></ul></li><li><p>衡量指标，有时候开发会直接给出，但有时候我们需要自己去判定测试是否达标。</p><p>常见的方法</p><h4 id="二八原则"><a class="anchor" href="#二八原则">#</a> 二八原则</h4><p><em>日 PV=QPS</em>x60x<em>60</em>x24 *//* 即 QPS 乘以一天的秒数</p><p><strong>峰值 QPS=(日 PV<em>80%)/(60</em>x60x<em>24</em>x20%）</strong> <em>// 通用公式每天 80% 的访问集中在 20% 的时间里，这 20% 时间叫做峰值时间</em> 一天内 80% 的请求会在 20% 的时间内到达</p><p>每台服务器每秒处理请求的数量 =((80%<em> 总 PV 量)/(24 小时</em> 60 分<em> 60 秒</em> 40%)) / 服务器数量</p></li><li><p>通常测试过程中出现一些异常：</p><ol><li><p>网络波动问题，可以让运维同事协助解决 (比如切换网段或选择内网压测)，或者等到网络较为稳定时候进行压测验证；</p></li><li><p>资源竞争问题：通过命令监控和服务梳理，找出压测时正在运行的其他服务，通过沟通协调停止该服务 (或者换个没资源竞争的服务节点重新压测也可以)；</p></li><li><p>高并发下大量报错</p><pre><code>         原因解析：出现该类问题，常见的原因有短连接导致的端口被完全占用以及线程池最大线程数配置较小及超时时间较短导致。       调优方案：      短连接问题：修改服务节点的tcp_tw_reuse参数为1，释放TIME_WAIT scoket用于新连接；      线程池问题：修改服务节点中容器的server.xml文件中的配置参数，主要修改如下几个参数：       最大线程数，即服务端可以同时响应处理的最大请求数</code></pre></li><li><p>集群类系统，各服务节点负载不均衡</p></li></ol><p>原因解析：出现这类问题的原因一般是 SLB 服务设置了会话保持，会导致请求只分发到其中一个节点。</p><p>调优方案：如果确认是如上原因，可通过修改 SLB 服务 (F5/HA/Nginx) 的会话保持参数为 None，然后再次压测验证；</p><ol><li>并发数不断增加，TPS 上不去，CPU 使用率较低</li></ol><p>原因解析：出现该类问题，常见的原因有：SQL 没有创建索引 / SQL 语句筛选条件不明确、代码中设有同步锁，高并发时出现锁等待；</p></li><li><p>数据清理</p><p>如果使用了影子表，可能收尾工作会简单一些，只需要下掉影子表即可。如果数据直接落到了线上数据库，可能一大堆压测数据要清理，压测时会对数据染色（比如指定测试账号或流量携带压测标记），逐层透传，最后根据标志识别删除。</p></li><li><p>举例一些可能会发现的典型问题：</p><ol><li>存在多余的 http header，导致额外带宽占用；解决方式：去除多余参数，只带必填参数</li><li>spin_lock 对 RT 影响大，优化锁的方式（资源冲突）；解决方式：增加压测服务器性能或个数</li><li>调整 nginx worker 数量可提高性能</li><li>不恰当的长链接数，解决方式：调整代码进程连接时间和周期</li><li>代码实现上对象没有较好复用 解决方式：优化代码</li><li>业务流程上存在冗余</li><li>响应码 or 错误码可能要继续规范</li><li>内部系统对压测的限流，需要变更配置或者协商解除限制 解决方式：添加高并发 host</li></ol></li></ol><h3 id="参考资料"><a class="anchor" href="#参考资料">#</a> 参考资料</h3><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYWxpeXVuLmNvbS9hcnRpY2xlLzcyMTY0Mw==">独家揭秘 | 阿里怎么做双 11 全链路压测？- 阿里云开发者社区 (aliyun.com)</span></p><p><span class="exturl" data-url="aHR0cHM6Ly9kYXRhdHJhY2tlci5pZXRmLm9yZy9kb2MvaHRtbC9yZmMyNjE2I3NlY3Rpb24tMS4z">RFC 2616 - Hypertext Transfer Protocol -- HTTP/1.1 (ietf.org)</span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>连接池介绍</title>
      <link href="%E8%BF%9E%E6%8E%A5%E6%B1%A0%E4%BB%8B%E7%BB%8D/"/>
      <url>%E8%BF%9E%E6%8E%A5%E6%B1%A0%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbGl1eXVlbGluZmlnaHRpbmcvcC8xNDg4MjQyOC5odG1s">『动善时』JMeter 基础 — 41、使用 JMeter 连接数据库（MySQL） - 繁华似锦 Fighting - 博客园 (cnblogs.com)</span></p><h1 id="连接池"><a class="anchor" href="#连接池">#</a> 连接池</h1><h2 id="什么是连接池"><a class="anchor" href="#什么是连接池">#</a> 什么是连接池</h2><p>数据库连接池负责分配、管理和释放数据库连接，它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个。由程序动态地对池中的连接进行申请，使用，释放。</p><h2 id="为什么要使用连接池"><a class="anchor" href="#为什么要使用连接池">#</a> 为什么要使用连接池</h2><p>数据库连接是一种关键的有限的昂贵的资源，   一个数据库连接对象均对应一个物理数据库连接，每次操作都打开一个物理连接，使用完都关闭连接，这样造成系统的性能低下。 数据库连接池的解决方案是在应用程序启动时建立足够的数据库连接，并讲这些连接组成一个连接池 (简单说：在一个 “池” 里放了好多半成品的数据库联接对象)，由应用程序动态地对池中的连接进行申请、使用和释放。对于多于连接池中连接数的并发请求，应该在请求队列中排队等待。并且应用程序可以根据池中连接的使用率，动态增加或减少池中的连接数。 连接池技术尽可能多地重用了消耗内存地资源，大大节省了内存，提高了服务器地服务效率，能够支持更多的客户服务。通过使用连接池，将大大提高程序运行效率，同时，我们可以通过其自身的管理机制来监视数据库连接的数量、使用情况等。<br>————————————————<br> 版权声明：本文为 CSDN 博主「CrankZ」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NyYW5rWi9hcnRpY2xlL2RldGFpbHMvODI4NzQxNTg=">https://blog.csdn.net/CrankZ/article/details/82874158</span></p><h2 id="传统的连接机制与数据库连接池的运行机制区别"><a class="anchor" href="#传统的连接机制与数据库连接池的运行机制区别">#</a> 传统的连接机制与数据库连接池的运行机制区别</h2><p>传统统链接：一般来说，Java 应用程序访问数据库的过程是：</p><p>①装载数据库驱动程序；</p><p>②通过 JDBC 建立数据库连接；</p><p>③访问数据库，执行 SQL 语句；</p><p>④断开数据库连接。</p><p>使用了数据库连接池的机制：</p><p>（1）  程序初始化时创建连接池<br>（2） 使用时向连接池申请可用连接<br>（3） 使用完毕，将连接返还给连接池<br>（4） 程序退出时，断开所有连接，并释放资源</p><p><img data-src="https://images2018.cnblogs.com/blog/137084/201805/137084-20180524194122461-804315041.png" alt=""></p><p><strong>. 为何要使用数据库连接池</strong><br>假设网站一天有很大的访问量，数据库服务器就需要为每次连接创建一次数据库连接，极大的浪费数据库的资源，并且极易造成数据库服务器内存溢出、拓机。<br>数据库连接是一种关键的有限的昂贵的资源，这一点在多用户的网页应用程序中体现的尤为突出。对数据库连接的管理能显著影响到整个应用程序的伸缩性和健壮性，影响到程序的性能指标。数据库连接池正式针对这个问题提出来的. <strong>数据库连接池负责分配，管理和释放数据库连接，它允许应用程序重复使用一个现有的数据库连接，而不是重新建立一个</strong> 。</p><p>数据库连接池在初始化时将创建一定数量的数据库连接放到连接池中，这些数据库连接的数量是由最小数据库连接数来设定的。无论这些数据库连接是否被使用，连接池都将一直保证至少拥有这么多的连接数量。连接池的最大数据库连接数量限定了这个连接池能占有的最大连接数，<strong> 当应用程序向连接池请求的连接数超过最大连接数量时，这些请求将被加入到等待队列中.</strong></p><pre><code>  **数据库连接池的最小连接数和最大连接数的设置要考虑到以下几个因素:**</code></pre><p>1, 最小连接数:<strong> 是连接池一直保持的数据库连接</strong>，所以如果应用程序对数据库连接的使用量不大，将会有大量的数据库连接资源被浪费.<br>　　2, 最大连接数：是连接池能申请的最大连接数，如果数据库连接请求超过次数，后面的数据库连接请求将被加入到等待队列中，这会影响以后的数据库操作<br>　　3, 如果最小连接数与最大连接数相差很大：那么最先连接请求将会获利，之后超过最小连接数量的连接请求等价于建立一个新的数据库连接。不过，这些大于最小连接数的数据库连接在使用完<strong>不会马上被释放，他将被           放到连接池中等待重复使用或是空间超时后被释放.</strong></p><h3 id="二-使用数据库连接池的关键点"><a class="anchor" href="#二-使用数据库连接池的关键点">#</a> 二、使用数据库连接池的关键点</h3><h4 id="1-并发问题"><a class="anchor" href="#1-并发问题">#</a> 1、并发问题</h4><p>为了使连接管理服务具有最大的通用性，必须考虑多线程环境，即并发问题。这个问题相对比较好解决，因为各个语言自身提供了对并发管理的支持像 java,c# 等等，使用 synchronized (java) lock (C#) 关键字即可确保线程是同步的。使用方法可以参考，相关文献。</p><h4 id="2-事务处理"><a class="anchor" href="#2-事务处理">#</a> ２、事务处理</h4><p><strong>DB 连接池必须要确保某一时间内一个 conn 只能分配给一个线程。不同 conn 的事务是相互独立的。</strong></p><p>我们知道，<strong>事务具有原子性</strong>，此时要求对数据库的操作符合 “ALL-ALL-NOTHING” 原则，即对于一组 SQL 语句<strong>要么全做，要么全不做</strong>。<br>　　我们知道当２个线程共用一个连接 Connection 对象，而且各自都有自己的事务要处理时候，对于连接池是一个很头疼的问题，因为即使 Connection 类提供了相应的事务支持，可是我们仍然不能确定那个数据库操作是对应那个事务的，这是由于我们有２个线程都在进行事务操作而引起的。为此我们可以使用每一个事务独占一个连接来实现，虽然这种方法有点浪费连接池资源但是可以大大降低事务管理的复杂性。</p><h4 id="3-连接池的分配与释放"><a class="anchor" href="#3-连接池的分配与释放">#</a> ３、连接池的分配与释放</h4><p>连接池的分配与释放，对系统的性能有很大的影响。合理的分配与释放，可以提高连接的复用度，从而降低建立新连接的开销，同时还可以加快用户的访问速度。<br>　　对于连接的管理可使用一个 List。即把已经创建的连接都放入 List 中去统一管理。每当用户请求一个连接时，系统检查这个 List 中有没有可以分配的连接。如果有就把那个最合适的连接分配给他（如何能找到最合适的连接文章将在关键议题中指出）；如果没有就抛出一个异常给用户，List 中连接是否可以被分配由一个线程来专门管理捎后我会介绍这个线程的具体实现。</p><h4 id="4-连接池的配置与维护"><a class="anchor" href="#4-连接池的配置与维护">#</a> ４、连接池的配置与维护</h4><p>连接池中到底应该放置多少连接，才能使系统的性能最佳？ <strong>系统可采取设置最小连接数（minConnection）和最大连接数（maxConnection）等参数来控制连接池中的连接</strong> 。比方说，最小连接数是系统启动时连接池所创建的连接数。如果创建过多，则系统启动就慢，但创建后系统的响应速度会很快；如果创建过少，则系统启动的很快，响应起来却慢。这样，可以在开发时，设置较小的最小连接数，开发起来会快，而在系统实际使用时设置较大的，因为这样对访问客户来说速度会快些。最大连接数是连接池中允许连接的最大数目，<strong>具体设置多少，要看系统的访问量</strong>，可通过软件需求上得到。<br>　　如何确保连接池中的最小连接数呢？有动态和静态两种策略。动态即每隔一定时间就对连接池进行检测，如果发现连接数量小于最小连接数，则补充相应数量的新连接，以保证连接池的正常运转。静态是发现空闲连接不够时再去检查。</p><h3 id="三-使用数据库连接池的优势和其工作原理"><a class="anchor" href="#三-使用数据库连接池的优势和其工作原理">#</a> 三、使用数据库连接池的优势和其工作原理</h3><h4 id="1-连接池的优势"><a class="anchor" href="#1-连接池的优势">#</a> 1、连接池的优势</h4><p>连接池用于创建和管理数据库连接的缓冲池技术，缓冲池中的连接可以被任何需要他们的线程使用。当一个线程需要用 JDBC 对一个数据库操作时，将从池中请求一个连接。当这个连接使用完毕后，将返回到连接池中，等待为其他的线程服务。</p><p>连接池的主要优点有以下三个方面。</p><p>第一、减少连接创建时间。连接池中的连接是已准备好的、可重复使用的，获取后可以直接访问数据库，因此减少了连接创建的次数和时间。</p><p>第二、简化的编程模式。当使用连接池时，每一个单独的线程能够像创建一个自己的 JDBC 连接一样操作，允许用户直接使用 JDBC 编程技术。</p><p>第三、控制资源的使用。如果不使用连接池，每次访问数据库都需要创建一个连接，这样系统的稳定性受系统连接需求影响很大，很容易产生资源浪费和高负载异常。连接池能够使性能最大化，将资源利用控制在一定的水平之下。连接池能控制池中的连接数量，增强了系统在大量用户应用时的稳定性。</p><h4 id="2-连接池的工作原理"><a class="anchor" href="#2-连接池的工作原理">#</a> 2、连接池的工作原理</h4><p>下面，简单的阐述下连接池的工作原理。</p><p><strong>连接池技术的核心思想是连接复用</strong>，通过建立一个数据库连接池以及一套连接使用、分配和管理策略，使得该连接池中的连接可以得到高效、安全的复用，避免了数据库连接频繁建立、关闭的开销。</p><p>连接池的工作原理主要由三部分组成，分别为连接池的建立、连接池中连接的使用管理、连接池的关闭。</p><p><strong>第一、连接池的建立</strong>。一般在系统初始化时，连接池会根据系统配置建立，并在池中创建了几个连接对象，以便使用时能从连接池中获取。连接池中的连接不能随意创建和关闭，这样避免了连接随意建立和关闭造成的系统开销。Java 中提供了很多容器类可以方便的构建连接池，例如 Vector、Stack 等。</p><p><strong>第二、连接池的管理</strong>。<strong>连接池管理策略是连接池机制的核心</strong>，连接池内连接的分配和释放对系统的性能有很大的影响。其管理策略是：</p><ul><li><strong>当客户请求数据库连接时，首先查看连接池中是否有空闲连接，如果存在空闲连接，则将连接分配给客户使用；如果没有空闲连接，则查看当前所开的连接数是否已经达到最大连接数，如果没达到就重新创建一个连接给请求的客户；如果达到就按设定的最大等待时间进行等待，如果超出最大等待时间，则抛出异常给客户。</strong></li><li>当客户释放数据库连接时，先判断该连接的<strong>引用次数</strong>是否超过了规定值，如果超过就从连接池中删除该连接，否则保留为其他客户服务。<br>该策略保证了数据库连接的有效复用，避免频繁的建立、释放连接所带来的系统资源开销。</li></ul><p><strong>第三、连接池的关闭</strong>。当应用程序退出时，关闭连接池中所有的连接，释放连接池相关的资源，该过程正好与创建相反。</p><p>3、常用的连接池：</p><pre><code> (1) dbcp</code></pre><p>dbcp 可能是使用最多的开源连接池，原因大概是因为配置方便，而且很多开源和 tomcat 应用例子都是使用的这个连接池吧。<br>这个连接池可以设置最大和最小连接，连接等待时间等，基本功能都有。这个连接池的配置参见附件压缩包中的:dbcp.xml<br> 使用评价：在具体项目应用中，发现此连接池的持续运行的稳定性还是可以，不过速度稍慢，在大并发量的压力下稳定性<br>有所下降，此外不提供连接池监控</p><p>常用的参数 (<strong>阿里面试问常用的参数</strong>)：</p><p>我们来看 DBCP 的例子，然后根据例子来分析:</p><p><a href="%22%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22"><img data-src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Jmeter 分享2</title>
      <link href="Jmeter-%E5%88%86%E4%BA%AB2/"/>
      <url>Jmeter-%E5%88%86%E4%BA%AB2/</url>
      
        <content type="html"><![CDATA[<h1 id="jmeter分享"><a class="anchor" href="#jmeter分享">#</a> JMETER 分享</h1><h2 id="一-接口测试"><a class="anchor" href="#一-接口测试">#</a> 一、接口测试</h2><p><strong>注：接口参数可从附件 / 接口参数中拷贝 txt 文件内容，然后在 http 请求参数选择从剪切板复制添加</strong></p><h5 id="1-断言"><a class="anchor" href="#1-断言">#</a> 1、断言</h5><p>响应断言</p><ol><li>包括：响应内容包括需要匹配的内容即代表响应成功，支持正则表达式</li><li>匹配： 响应内容需要完全匹配需要匹配的内容即代表响应成功，不区分大小写，支持正则表达式</li><li>相等：响应内容要完全等于需要匹配的内容才代表成功，区分大小写，支持正则</li><li>字符串：返回结果包含指定结果的字符串，但是 Substring 不支持正则</li><li>否：不进行匹配</li></ol><p>断言持续时间</p><pre><code>在限定的时间内得到响应数据，超时同样为失败</code></pre><p>JSON 断言</p><pre><code>![](https://pic.imgdb.cn/item/62df48edf54cd3f937a925da.png)</code></pre><h5 id="2-用户参数"><a class="anchor" href="#2-用户参数">#</a> 2、用户参数</h5><p>使用方法：前置处理器中添加，设置每次迭代更新一次，需要增加线程数才能起作用</p><p>作用：可以更新参数</p><p><img data-src="https://pic.imgdb.cn/item/62df4974f54cd3f937ab71f6.png" alt=""></p><h5 id="3-函数助手"><a class="anchor" href="#3-函数助手">#</a> 3、函数助手</h5><p>使用方法：在工具中添加</p><h5 id="4-bean-shell"><a class="anchor" href="#4-bean-shell">#</a> 4、Bean shell</h5><p>使用方法：在前置处理器中添加</p><p>作用：支持 JAVA 语言定义变量</p><p>例子：</p><p>vars.put("user","zj")</p><p>在变量中 ${user} 即可使用</p><h5 id="5-csv数据文件设置"><a class="anchor" href="#5-csv数据文件设置">#</a> 5、CSV 数据文件设置</h5><p>文件名：C:/Users/Desktop/user_name.txt</p><p>变量名：username</p><p>忽略首行：False</p><p>是否允许带引号：False</p><p>遇到文件结束符再次循环：如果循环一百次，只有四个文件就 True</p><p>线程共享模式：看变量的生效区域</p><p>优先使用用户参数 &gt; CSV 数据  如需禁用，右键用户参数 &gt; 禁用</p><h5 id="6-命令行启动"><a class="anchor" href="#6-命令行启动">#</a> 6、命令行启动</h5><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>jmeter -n -t D:<span class="token punctuation">\</span>apache-jmeter-5.4.3<span class="token punctuation">\</span>TestCase<span class="token punctuation">\</span>数据库测试.jmx -l mt_test.jtl -e</pre></td></tr></tbody></table></figure><p>-n 以非 GUI 形式启动（命令行）启动 -t 测试脚本 -l 生成的文件名称 -e 执行完脚本后生成 html 报告 -o 测试报告存放的位置 (不加会默认生成到 bin\report-output)</p><p>如果有 jtl 文件想生成 html 报告 (<strong>生成的 html 报告可能与聚合报告数据不一致，以聚合报告为准，再使用 jtl 报告生成 html 报告</strong>)</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>jmeter -g test.jtl -o /path</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment"># -g：后跟 test.jtl 文件所在的路径</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment"># -o：后跟生成的 HTML 文件存放的路径</span></pre></td></tr></tbody></table></figure><p>报告数据项说明</p><p>Request-&gt;Label: 请求名称即采样器名称<br> Executions-&gt;#Samples：共请求多少次，请求的数量 (线程数 * 循环次数)<br> Executions-&gt;KO：错误数量<br> Executions-&gt;Error%：错误率<br> Response Time（ms）：响应时间<br> Average：平均响应时间<br> Min：最小响应时间<br> Max：最大响应时间<br> 90% Line：90% 线，90% 用户响应不超过该时间<br> 95% Line：95% 线，95% 用户响应不超过该时间<br> 99% Line：99% 线，99% 用户响应不超过该时间<br> Throughput：吞吐量，一般情况下可看做每秒完成请求数 (和 QPS 类似)<br><strong> 特别强调下 90th pct：这里指的是百分之九十的用户都不超过多少 ms，并不是多少指百分之九十的用户是多少 ms</strong><br>Network（KB/sec）：网络情况<br> Received：每秒从服务器端接收到的数据量<br> Sent：每秒从客户端发送的请求的数量</p><h2 id="二-分布式部署"><a class="anchor" href="#二-分布式部署">#</a> 二、分布式部署</h2><p>适用：压力测试</p><p>前提条件：</p><ol><li>运行相同版本的 JMeter</li><li>使用相同的 java 版本</li><li>有基于 SSL 的 RMI 的有效密钥库，或者禁用 SSL。</li><li>都在一个网络</li></ol><p>控制机：我们操作的机器，用于启动和传递测试任务，一般不执行测试任务（为了性能考虑）</p><p>执行机：用于执行控制机分发的测试任务，并上传测试数据到控制机</p><p>以多个 jmeter 运行在单机为例</p><p>控制机：</p><p><img data-src="https://pic.imgdb.cn/item/62df43eaf54cd3f93793b635.jpg" alt=""></p><p>执行机：</p><p><img data-src="https://pic.imgdb.cn/item/62df441af54cd3f937947ae7.jpg" alt=""></p><p>控制机 &amp; 执行机：</p><p><img data-src="https://pic.imgdb.cn/item/62df49f1f54cd3f937adabe5.png" alt=""><br>启动顺序</p><p>1、先启动执行机下的 jmeter-server.bat，等待出现连接成功</p><p><img data-src="https://pic.imgdb.cn/item/62df4a12f54cd3f937ae37e6.png" alt=""></p><p>2、执行控制机下的 jmeter.bat</p><p><img data-src="https://pic.imgdb.cn/item/62df4a2ff54cd3f937aeae42.png" alt=""></p><p>注意：</p><pre><code>1、任务并不是分发，而是拷贝2、执行机下不需要有测试脚本3、如果有用到CSV数据，则执行机下的相同路径也需要有csv配置文件</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Jmeter 分享1</title>
      <link href="Jmeter-%E5%88%86%E4%BA%AB1/"/>
      <url>Jmeter-%E5%88%86%E4%BA%AB1/</url>
      
        <content type="html"><![CDATA[<h1 id="jmeter-分享"><a class="anchor" href="#jmeter-分享">#</a> Jmeter  分享</h1><h2 id="一-简介"><a class="anchor" href="#一-简介">#</a> 一、简介</h2><p>Apache JMeter 是 Apache 组织开发的基于 Java 的<strong>压力测试</strong>工具。用于对软件做压力测试，它最初被设计用于 Web 应用测试，但后来扩展到其他测试领域。 可以用于测试静态和动态资源，例如静态文件、CGI 脚本、Java 对象、数据库、FTP 服务器 等等。JMeter 可以用于对服务器、网络或对象模拟巨大的 ** 负载，** 来自不同压力类别下测试它们的强度和分析整体性能。</p><h2 id="二-安装"><a class="anchor" href="#二-安装">#</a> 二、安装</h2><ul><li><p>由于 Jmeter 是基于 java 开发，首先需要下载安装 JDK （目前 JMeter 只支持到 Java 8，尚不支持 Java 9）, 配置环境变量。</p><p>(1)  新增变量：JMETER_HOME：D:\apache-jmeter-5.2.1</p><p>(2)  在 CLASSPATH 变量的最前面加入如下变量：   % JMETER_HOME%\lib\ext\ApacheJMeter_core.jar;% JMETER_HOME%\lib\jorphan.jar;</p><p>(3)  在 PATH 变量的最前面加入如下变量：% JMETER_HOME%\bin;</p><p>(4)  进入 D:\apache-jmeter-5.2.1\bin，双击 jmeter.bat，或在 dos 窗口输入 jmeter 命令打开 jmeter 界面，安装成功。</p></li><li><p>官网下载地址：<span class="exturl" data-url="aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHAlM0EvL2ptZXRlci5hcGFjaGUub3JnL2Rvd25sb2FkX2ptZXRlci5jZ2k=">http://jmeter.apache.org/download_jmeter.cgi</span></p></li><li><p>下载完成后解压 zip 包</p><p><img data-src="https://pic.imgdb.cn/item/62cea0dff54cd3f9371565fc.jpg" alt=""></p></li><li><p>启动 JMeter，双击 JMeter 解压路径（apache-jmeter-3.3\bin）bin 下面的 jmeter.bat 即可</p></li><li><p>Jmeter 是支持中文的，启动 Jmeter 后， 点击 Options -&gt; Choose Language 来选择语言</p><p><img data-src="https://pic.imgdb.cn/item/62cea12ef54cd3f93715e7e8.jpg" alt=""></p></li></ul><h2 id="三-jmeter使用"><a class="anchor" href="#三-jmeter使用">#</a> 三、 jmeter 使用</h2><h3 id="1jmeter的主要元件"><a class="anchor" href="#1jmeter的主要元件">#</a> 1.jmeter 的主要元件</h3><p>(1) <strong>测试计划</strong>：是使用 JMeter 进行测试的起点，它是其它 JMeter 测试元件的容器</p><p>(2) <strong>线程组</strong>：代表一定数量的用户，它可以用来模拟用户并发发送请求。实际的请求内容在 Sampler 中定义，它被线程组包含。</p><p>(3) <strong>配置元件</strong>：维护 Sampler 需要的配置信息，并根据实际的需要修改请求的内容。</p><p>(4) <strong>前置处理器</strong>：负责在请求之前工作，常用来修改请求的设置</p><p>(5) <strong>定时器</strong>：负责定义请求之间的延迟间隔。</p><p>(6) <strong>取样器 (Sampler)</strong>：是性能测试中向服务器发送请求，记录响应信息、响应时间的最小单元，如：HTTP Request Sampler、FTP Request Sample、TCP Request Sample、JDBC Request Sampler 等，每一种不同类型的 sampler 可以根据设置的参数向服务器发出不同类型的请求。</p><p>(7) <strong>后置处理器</strong>：负责在请求之后工作，常用获取返回的值。</p><p>(8)<strong> 断言</strong>：用来判断请求响应的结果是否如用户所期望的。</p><p>(9) <strong>监听器</strong>：负责收集测试结果，同时确定结果显示的方式。</p><p>(10) <strong>逻辑控制器</strong>：可以自定义 JMeter 发送请求的行为逻辑，它与 Sampler 结合使用可以模拟复杂的请求序列。</p><h3 id="2常用操作"><a class="anchor" href="#2常用操作">#</a> 2. 常用操作</h3><ul><li><p><strong>启动 jemter 后一般会默认生成一个测试计划，在测试计划下可以添加线程组，其中线程组有下面几种重要的参数。</strong></p><ul><li>线程数：虚拟用户数，用于并发测试。</li><li>Ramp-Up Period (in seconds) 准备时长：设置的虚拟用户数需要多长时间全部启动。如果线程数为 10，准备时长为 2，那么需要 2 秒钟启动 10 个线程，也就是每秒钟启动 5 个线程。</li><li>循环次数：每个线程发送请求的次数。如果线程数为 10，循环次数为 100，那么每个线程发送 100 次请求。总请求数为 10*100=1000 。如果勾选了 “永远”，那么所有线程会一直发送请求，一到选择停止运行脚本。</li></ul></li><li><p><strong>在线程组下添加测试的请求类型，例如 http 请求、TCP 请求等，注意一些请求可能需要添加额外的插件才能实现（例如 UDP）。下面以常用的 http 请求为例。</strong></p></li><li><p>协议：向目标服务器发送 HTTP 请求协议，可以是 HTTP 或 HTTPS，默认为 HTTP 。</p><ul><li>服务器名称或 IP ：HTTP 请求发送的目标服务器名称或 IP 。</li><li>端口号：目标服务器的端口号，默认值为 80 。</li><li>方法：发送 HTTP 请求的方法，可用方法包括 GET、POST、HEAD、PUT、OPTIONS、TRACE、DELETE 等。</li><li>路径：目标 URL 路径（URL 中去掉服务器地址、端口及参数后剩余部分）</li><li>Content encoding ：编码方式，默认为 ISO-8859-1 编码，这里配置为 utf-8。</li><li>前置处理器：主要用来对其覆盖范围内采样器请求和响应的内容进行修改或截获。url 的分配</li></ul></li></ul><p>setUP 线程组：在测试任务 ThreadGroup 运行前先被运行。通常用在运行测试任务前，做初始化工作。例如建立数据库连接初始分化工作、用户登录<br> tearDown 线程组：在测试任务线程组运行结束后被运行。通常用来做清理测试脏数据、登出、关闭资源等工作。例如关闭数据库连接<br>线程组： 执行核心任务</p><p><img data-src="https://pic.imgdb.cn/item/62cea14cf54cd3f937161cdb.jpg" alt=""></p><h5 id="注"><a class="anchor" href="#注">#</a> 注：</h5><p>POST 和 GET 请求方法各有利弊，简单介绍一下 POST 和 GET 的请求方法的区别，POST 是把参数放在 body 里面，而 GET 的是把请求的参数放在 URL 里面，这样传递参数的长度会受到限制。</p><h2 id="四-实例演示"><a class="anchor" href="#四-实例演示">#</a> 四、实例演示</h2><h3 id="1学生登录接口"><a class="anchor" href="#1学生登录接口">#</a> 1. 学生登录接口</h3><h4 id="11接口的地址"><a class="anchor" href="#11接口的地址">#</a> 1.1 接口的地址</h4><p><span class="exturl" data-url="aHR0cHM6Ly9tYXBpLmVrd2luZy5jb20vc3R1ZGVudC9Vc2VyL2xvZ2lu">https://mapi.ekwing.com/student/User/login</span></p><p><img data-src="https://pic.imgdb.cn/item/62cea166f54cd3f9371644ad.jpg" alt=""></p><p>（1）协议：https   服务器名称：<span class="exturl" data-url="aHR0cDovL21hcGkuZWt3aW5nLmNvbQ==">mapi.ekwing.com</span>    端口号：空</p><p>（2）请求方法：GET　路径：/student/User/login　　内容编码：utf-8</p><p>注意：路径输入的时候，不能有空格。</p><p>（3）请求的参数</p><p drivertype:hma-al00,is_http:1,drivercode:3.9.0,osv:10,username:13528263544,client:student,v:3.7.8,password:f379eaf3c831b04de153469d1bec345e,os:android,devicetoken:f4%3a63%3a1f%3a1d%3a45%3afe=""></p><p>（4）请求头参数</p><p>{"Accept-Language": "zh-Hans-CN;q=1", "Accept-Encoding": "utf-8", "Connection": "keep-alive", "Accept": "<em>/</em>", "User-Agent": "EKWStudent/3.8.8 (iPhone; iOS 13.2.3; Scale/2.00)", "Host": "<span class="exturl" data-url="aHR0cDovL21hcGkuZWt3aW5nLmNvbQ==">mapi.ekwing.com</span>", "Content-Type": "application/json"}</p><p>（5）点击运行</p><p>（6）察看结果树</p><p><img data-src="https://pic.imgdb.cn/item/62cea17bf54cd3f93716650d.jpg" alt=""></p><h3 id="2获取作业列表的接口"><a class="anchor" href="#2获取作业列表的接口">#</a> 2. 获取作业列表的接口</h3><p>地址：<span class="exturl" data-url="aHR0cHM6Ly9tYXBpLmVrd2luZy5jb20vc3R1ZGVudC9Idy9nZXRsaXN0">https://mapi.ekwing.com/student/Hw/getlist</span></p><p><img data-src="https://pic.imgdb.cn/item/62cea190f54cd3f9371688a7.jpg" alt=""></p><p>（1）协议：https   服务器名称：<span class="exturl" data-url="aHR0cDovL21hcGkuZWt3aW5nLmNvbQ==">mapi.ekwing.com</span>    端口号：空</p><p>（2）请求方法：POST　路径：/student/Hw/getlist　内容编码：utf-8</p><p>注意：路径输入的时候，前面不能有空格。</p><p>（3）请求的参数</p><p>{"driverType": "HMA-AL00", "is_http": "1", "uid": "<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mi>u</mi><mi>i</mi><mi>d</mi></mrow><mi mathvariant="normal">"</mi><mo separator="true">,</mo><mi mathvariant="normal">"</mi><mi>s</mi><mi>o</mi><mi>r</mi><mi>t</mi><mi>F</mi><mi>i</mi><mi>e</mi><mi>l</mi><mi>d</mi><mi mathvariant="normal">"</mi><mo>:</mo><mi mathvariant="normal">"</mi><mi>p</mi><mi>u</mi><mi>b</mi><mi>l</mi><mi>i</mi><mi>s</mi><msub><mi>h</mi><mi>t</mi></msub><mi>i</mi><mi>m</mi><mi>e</mi><mi>s</mi><mi mathvariant="normal">"</mi><mo separator="true">,</mo><mi mathvariant="normal">"</mi><mi>d</mi><mi>r</mi><mi>i</mi><mi>v</mi><mi>e</mi><mi>r</mi><mi>C</mi><mi>o</mi><mi>d</mi><mi>e</mi><mi mathvariant="normal">"</mi><mo>:</mo><mi mathvariant="normal">"</mi><mn>3.9.0</mn><mi mathvariant="normal">"</mi><mo separator="true">,</mo><mi mathvariant="normal">"</mi><mi>s</mi><mi>o</mi><mi>r</mi><mi>t</mi><mi>M</mi><mi>e</mi><mi>t</mi><mi>h</mi><mi>o</mi><mi>d</mi><mi mathvariant="normal">"</mi><mo>:</mo><mi mathvariant="normal">"</mi><mi>d</mi><mi>e</mi><mi>s</mi><mi>c</mi><mi mathvariant="normal">"</mi><mo separator="true">,</mo><mi mathvariant="normal">"</mi><mi>o</mi><mi>s</mi><mi>v</mi><mi mathvariant="normal">"</mi><mo>:</mo><mi mathvariant="normal">"</mi><mn>10</mn><mi mathvariant="normal">"</mi><mo separator="true">,</mo><mi mathvariant="normal">"</mi><mi>t</mi><mi>o</mi><mi>k</mi><mi>e</mi><mi>n</mi><mi mathvariant="normal">"</mi><mo>:</mo><mi mathvariant="normal">"</mi></mrow><annotation encoding="application/x-tex">{uid}", "sortField": "publish_times", "driverCode": "3.9.0", "sortMethod": "desc", "osv": "10", "token": "</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">u</span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span></span><span class="mord">"</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">"</span><span class="mord mathnormal">s</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal">i</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">d</span><span class="mord">"</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">"</span><span class="mord mathnormal">p</span><span class="mord mathnormal">u</span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">i</span><span class="mord mathnormal">m</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span><span class="mord">"</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">"</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mord">"</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">"</span><span class="mord">3</span><span class="mord">.</span><span class="mord">9</span><span class="mord">.</span><span class="mord">0</span><span class="mord">"</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">"</span><span class="mord mathnormal">s</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">e</span><span class="mord mathnormal">t</span><span class="mord mathnormal">h</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mord">"</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">"</span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span><span class="mord mathnormal">c</span><span class="mord">"</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">"</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord">"</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">"</span><span class="mord">1</span><span class="mord">0</span><span class="mord">"</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">"</span><span class="mord mathnormal">t</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord">"</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">"</span></span></span></span>{token}", "client": "student", "v": "3.7", "author_id": "${uid}", "os": "Android", "method": "unfinish", "deviceToken": "F4%3A63%3A1F%3A1D%3A45%3AFE", "page": "1"}</p><p>（4）请求头参数</p><p>{"Accept-Language": "zh-Hans-CN;q=1", "Accept-Encoding": "utf-8", "Connection": "keep-alive", "Accept": "<em>/</em>", "User-Agent": "EKWStudent/3.8.8 (iPhone; iOS 13.2.3; Scale/2.00)", "Host": "<span class="exturl" data-url="aHR0cDovL21hcGkuZWt3aW5nLmNvbQ==">mapi.ekwing.com</span>", "Content-Type": "application/json"}</p><p>（5）点击运行</p><p>（6）察看结果树</p><p><img data-src="https://pic.imgdb.cn/item/62cea1aaf54cd3f93716b0f6.jpg" alt=""></p><p>因为获取作业列表接口的一些请求参数值是登录接口的返回参数值，也就是说获取作业列表接口和登录接口存在依赖的关系，下面重点了解一下如何使用 Jmeter 做多个接口的测试。</p><h2 id="五-访问多个接口"><a class="anchor" href="#五-访问多个接口">#</a> 五、访问多个接口</h2><h3 id="1-什么是接口参数依赖"><a class="anchor" href="#1-什么是接口参数依赖">#</a> 1、什么是接口参数依赖</h3><p>接口参数依赖又称作接口依赖，简单点说就是后面的接口要用到前面的接口产生的数据。</p><p>比如：我们一个接口 B 需要 A 接口返回的参数 token 作为自己的请求参数。常见的场景如：访问一个需要登录才能浏览的接口。</p><p>下面以获取作业列表的接口需要依赖登录接口为例，进行介绍。</p><h3 id="2json提取器的使用"><a class="anchor" href="#2json提取器的使用">#</a> 2.json 提取器的使用</h3><p>利用 Jmeter 进行接口参数依赖的测试，主要有两种方式，第一种利用正则表达式，第二种是 JSON 提取器，本次先介绍 JSON 提取器解决接口参数之间的依赖的方法。</p><p>（1）创建 Json 提取器</p><p>http 请求 --&gt; 右击 --&gt; 添加 --&gt; 后置处理器 --&gt;JSON 提取器</p><p><img data-src="https://pic.imgdb.cn/item/62cea1bdf54cd3f93716cef7.jpg" alt=""></p><p>（2）填写参数值</p><p><img data-src="https://pic.imgdb.cn/item/62cea1e0f54cd3f937170564.jpg" alt=""></p><p><img data-src="https://pic.imgdb.cn/item/62cea1e9f54cd3f937171280.jpg" alt=""></p><p>需要填写数据的字段是 Names of created variables、JSON Path expressins、Match No.(0 for Random)</p><p>Names of created variables 指的是登录接口中的参数名，如 token，uid</p><p>JSON Path expressins 是对登录接口的参数 token 和 uid 进行提取，格式为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">.</mi><mi>d</mi><mi>a</mi><mi>t</mi><mi>a</mi><mi mathvariant="normal">.</mi><mi>t</mi><mi>o</mi><mi>k</mi><mi>e</mi><mi>n</mi><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">.data.token,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">.</span><span class="mord mathnormal">d</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord">.</span><span class="mord mathnormal">t</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mpunct">,</span></span></span></span>.data.uid</p><p>Match No.(0 for Random) 是指匹配数字（0 代表随机，1 代表第一个，-1 代表所有），可为空即默认第一个</p><p>（3）保存</p><h3 id="3学生的登录接口和获取作业列表接口之间的依赖关系"><a class="anchor" href="#3学生的登录接口和获取作业列表接口之间的依赖关系">#</a> ３. 学生的登录接口和获取作业列表接口之间的依赖关系</h3><p>(1) 首先，如上述介绍成功访问了学生的登录接口，获得 token 值。</p><p>(2) 使用 Jmeter 工具中的 json 提取器，提取登录接口的 token 值，uid 值，author_id 值作为获取作业列表的接口的参数。</p><p author_id="">在第二个接口的察看结果树中的请求的 Request Body 能够看到 token、uid、author_id 值和登录接口的响应数据中的 Body 值是一样的，就说明提取成功了，然后在获取作业列表接口的 token、uid、author_id 的参数后加上值，格式分别是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mi>t</mi><mi>o</mi><mi>k</mi><mi>e</mi><mi>n</mi></mrow><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">{token},</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span></span><span class="mpunct">,</span></span></span></span>{uid},$</p><p><img data-src="https://pic.imgdb.cn/item/62cea190f54cd3f9371688a7.jpg" alt=""></p><p>(3) 点击运行</p><p>(4) 察看结果树</p><p>响应数据中的 Response Body 中 stasus 值为 0，代表获取作业列表接口请求成功了。</p><p><img data-src="https://pic.imgdb.cn/item/62cf78acf54cd3f9370f03d0.jpg" alt=""></p><p>补充：这里将两个接口都放在一个线程组下，更为操作简单，也可以将两个接口都放在两个线程组下，操作起来相对复杂。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vscode+GitHub+jsDelivr+PicGo绑定图床</title>
      <link href="vscode-GitHub-jsDelivr-PicGo%E7%BB%91%E5%AE%9A%E5%9B%BE%E5%BA%8A/"/>
      <url>vscode-GitHub-jsDelivr-PicGo%E7%BB%91%E5%AE%9A%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<p>新建 GitHub 仓库</p><p>登录 GitHub 帐号之后，选择 New Repository（新建仓库）</p><p><span class="exturl" data-url="aHR0cHM6Ly9waWMuaW1nZGIuY24vaXRlbS82MjU3OWIzNTIzOTI1MGY3YzU3NjZkODgucG5n">https://pic.imgdb.cn/item/62579b35239250f7c5766d88.png</span></p><p><img data-src="https://pic.imgdb.cn/item/6257ae11239250f7c592c095.jpg" alt="image.png"></p><p>仓库名填 trmpblog，类型为 public（若设为 private，将无法正常使用），最后 Create repository（生成仓库）。</p><p>生成 Token</p><p><img data-src="https://pic.imgdb.cn/item/6257ae26239250f7c592e37a.jpg" alt="image.png"></p><p>在右上方点击头像，然后选择 Settings（设置）。</p><p><img data-src="https://pic.imgdb.cn/item/6257ae45239250f7c5930c48.jpg" alt="image.png"></p><p>选择左边列表最下方的 Developer settings（开发者设置）。</p><p><img data-src="https://pic.imgdb.cn/item/6257ae5a239250f7c5933154.jpg" alt="image.png"></p><p>选择 Personal access tokens（个人访问密钥），再点击 Generate new token（生成新的密钥）。</p><p>填写 Note（说明），这个值随便填，方便自己以后查看即可，repo 栏，全部勾上。</p><p><img data-src="https://pic.imgdb.cn/item/6257ae85239250f7c59367ad.jpg" alt="image.png"></p><p>密钥此时已经生成了，如图中红框处，此密钥值只会出现一次，务必在生成后保存到合适的地方，以后也无法查看。</p><p><img data-src="https://pic.imgdb.cn/item/6257ae98239250f7c5937c36.jpg" alt="image.png"></p><p>配置 VS Code</p><p><img data-src="https://pic.imgdb.cn/item/6257aeaa239250f7c59397f1.jpg" alt="image.png"></p><p>在 vs code 扩展商店中，下载 PicGo 扩展。</p><p>配置 PicGo 扩展的选项，共需要配置 6 个设置。</p><p><img data-src="https://pic.imgdb.cn/item/6257aebc239250f7c593b1a7.jpg" alt="image.png"></p><p>图床类型，选择 github；<br>分支，推荐使用 main 分支即可（注意自己的主分支）；<br>自定义 Url，<span class="exturl" data-url="aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doLyVFMyU4MCU5MCVFNCVCRCVBMCVFNyU5QSU4NEdpdEh1YiVFNyU5NCVBOCVFNiU4OCVCNyVFNSU5MCU4RCVFMyU4MCU5MS8lRTMlODAlOTAlRTQlQkQlQTAlRTclOUElODQlRTQlQkIlOTMlRTUlQkElOTMlRTUlOTAlOEQlRTMlODAlOTElRUYlQkMlOEMlRTQlQjglOEQlRTUlQkIlQkElRTglQUUlQUUlRTYlOUIlQjQlRTYlOTQlQjklRTYlQUQlQTQlRTUlQTQlODQlRTglQUUlQkUlRTclQkQlQUUlRTMlODAlODIlRTUlOEYlQTYlRTUlQTQlOTYlRTYlQjMlQTglRTYlODQlOEYlRUYlQkMlOEMlRTUlOUMlQjAlRTUlOUQlODAlRTclOUElODQlRTYlOUMlODAlRTUlOTAlOEUlRTUlOEQlODMlRTQlQjglODclRTQlQjglOEQlRTglQTYlODElRTclOTUlOTklRTYlOUMlODklRTYlOTYlOUMlRTYlOUQlQTA=">https://cdn.jsdelivr.net/gh/【你的 GitHub 用户名】/【你的仓库名】，不建议更改此处设置。另外注意，地址的最后千万不要留有斜杠</span> / ；<br>路径，使用 image/ 即可，注意格式，前面不要有 / ，后面必须有 / ；<br>仓库，【你的 GitHub 用户名】/【你的仓库名】，注意格式，前后都不要用 / ；<br>密钥，填入之前生成的访问密钥。<br>内容创作<br>一切就绪，现在可以进行图片内容的创作了，在 VS code 编辑器，使用以下快捷键即可选择图片文件并上传到 GitHub，之后可以看到生成的图片的 markdown 代码了。</p><p>在这我用到了一个 vscode 中 md 的显示插件 (非必要) 可视化：Clipboard</p><p><img data-src="https://pic.imgdb.cn/item/6257aed3239250f7c593d5ce.jpg" alt="image.png"></p><p>github 中就成功上传了图片<img data-src="https://pic.imgdb.cn/item/6257aee0239250f7c593ea67.jpg" alt="image.png"></p><p>参考链接：</p><p><span class="exturl" data-url="aHR0cHM6Ly9sb3ZlankuYmxvZy5jc2RuLm5ldC9hcnRpY2xlL2RldGFpbHMvMTA4MTU2MDcwP3NwbT0xMDAxLjIxMDEuMzAwMS42NjYxLjEmYW1wO3V0bV9tZWRpdW09ZGlzdHJpYnV0ZS5wY19yZWxldmFudF90MC5ub25lLXRhc2stYmxvZy0y">https://lovejy.blog.csdn.net/article/details/108156070?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2</span><sub>default</sub>CTRLIST<sub>Rate-1.pc_relevant_paycolumn_v3&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2</sub>default<sub>CTRLIST</sub>Rate-1.pc_relevant_paycolumn_v3&amp;utm_relevant_index=1</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>感悟</title>
      <link href="%E6%84%9F%E6%82%9F/"/>
      <url>%E6%84%9F%E6%82%9F/</url>
      
        <content type="html"><![CDATA[<p>最近看到少年天使，让我对世界多了一些感想。终于有人对网络暴力下手了。希望在不就的将来会有相关的法律诞生。</p><p>本身对于这篇文章就不是想和热点靠近，去对未知的事情揣测。只是处于身处同一个时代或者说更多的是佩服他来谈谈自己的感悟。</p><p>从这件事情发生到现在让我们由衷的为这位天使感伤但这个始终努力发光的又善良的人，世界对其太不公平了。沉浸在这悲伤中久久不能平静。</p><pre><code>当第二天带着这份悲伤时，发现身边的人和世界依然和平运转似乎没有什么不同。当与人提及时好多人不知道这件事。这次时间虽然是第三方的角度发生，但由衷感觉看到了第二人称似的。可能是因为人生经历中遇到的有些人有些事和他的经历相楔合，但都发生在不同的人身上。果然世界上少了谁都不可能不运转，再悲壮的人生在悲惨的遭遇在他人的世界中都是故事，一听即过。本就如此，本就无感同身受。</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jmeter官网实例</title>
      <link href="jmeter%E5%AE%98%E7%BD%91%E5%AE%9E%E4%BE%8B/"/>
      <url>jmeter%E5%AE%98%E7%BD%91%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql安装教程</title>
      <link href="computer/app/mysql%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
      <url>computer/app/mysql%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>mysql 安装教程</p><h3 id="正文"><a class="anchor" href="#正文">#</a> <strong>正文：</strong></h3><p>现在作为服务器操作系统的一般有三种，Windows Server，Linux，Unix，在这里我们只介绍在 windows 下和 linux 下安装 mysql，Unix 下安装应该和 linux 差不多。</p><h3 id="windows下安装mysql"><a class="anchor" href="#windows下安装mysql">#</a> <strong>Windows 下安装 MySQL：</strong></h3><ol><li>在浏览器中打开<span class="exturl" data-url="aHR0cHM6Ly93d3cubXlzcWwuY29tLw=="> https://www.mysql.com/</span>，进入 MySQL 的官方网站，国内的网打开可能有点儿慢，稍微等待一下</li><li>在打开的网页中选择 downloads 标签，如下图：</li></ol><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=MjQxNmE3YWRjMDIyYTJmNTY4ZjYyNDUzODZlZjA1YmJfblBwb2NKREtrNDNZNkR5V2ZXZ0dUdVN5M2dweWJOdktfVG9rZW46Ym94Y25WbHZOdFpUOE1hOE43blRFS2VQaVpPXzE2NDE0MzU0MDY6MTY0MTQzOTAwNl9WNA" alt=""></p><ol start="3"><li>在打开的标签页中，滑到页面的最下面，可以看到 MySQL Community Edition  <span class="exturl" data-url="aHR0cDovL2Rldi5teXNxbC5jb20vZG93bmxvYWRzLw==">Community (GPL) Downloads »</span>  的字样，点击<span class="exturl" data-url="aHR0cDovL2Rldi5teXNxbC5jb20vZG93bmxvYWRzLw=="> Community (GPL) Downloads »</span>，如下图：</li></ol><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=MTk0YmI0NzRjNzk0OTA0ZjM4Mzk2NjY0YzZmMjhhZTFfYXVEUUp5ck40UWdTa0FkWFdoUXJ1SEZKeVRrekl5ZTlfVG9rZW46Ym94Y25rYVI2Z2VSVmNFZERUZUR1a0hDMXNmXzE2NDE0MzU0MDY6MTY0MTQzOTAwNl9WNA" alt=""></p><ol start="4"><li>在之后打开的页面中，点击<span class="exturl" data-url="aHR0cDovL2Rldi5teXNxbC5jb20vZG93bmxvYWRzL215c3FsLw=="> MySQL Community Server</span> (GPL)，如下图：</li></ol><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=ZDc4ZTM2MTExNjdiMTI1OTY4NGJhMjJlYzYzMWI0NWNfTVZ6R0w4REdPc3JzVFJaWmIzNWZiZVRSUDVleWpZNmlfVG9rZW46Ym94Y242eDNGZnd1MWc5UUNHU2dIbTVmbDdjXzE2NDE0MzU0MDY6MTY0MTQzOTAwNl9WNA" alt=""></p><ol start="5"><li>在之后打开的页面中就可以看到相关的下载项了，如下图：</li></ol><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=NDI0ZjAwYjBmOTUyOTg5ODE3NjU5ZDMwZGZiODI2ZjZfZ0FwT2YyRkZ5UVJ1SUlJUFRJenAyMVZMQ1lNUzlaczVfVG9rZW46Ym94Y25kVVZNQ1VmMjYxeHVBTm85VlRuMlBjXzE2NDE0MzU0MDY6MTY0MTQzOTAwNl9WNA" alt=""></p><p>在图中第一个红色框标注的地方就是选择操作系统，这里我们选择 Microsoft Windows，可以看到第二个红色框是 Recommended download，这里就要区分了，如果是新手建议点击这个，因为这个版本的 MySQL 不用自己配置，就是普通的安装文件，直接一路 next 就安装完了，如果想深入学习，那么点击 Other downloads 内容区的下载，可以看到前两个是正式版，后两个是 debug 版，一般选择前两个，根据自己的机器 32 位还是 64 位选择下载，下载下来是个 zip 文件，安装的自己配置，相对复杂</p><ol start="6"><li>如果选择了 MySQL Installer 进去页面之后，如下：</li></ol><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=YjMwM2I3ZjczMjkzYWRkM2FmYWQ5N2IyZDM5MWM1MDhfVHg5N1RiSVRxTjFnTHM1eDFCTTBsRDlkck9XSjJJeWhfVG9rZW46Ym94Y24zYWtobzhtNVg1MWU4NFZoYWowUVBoXzE2NDE0MzU0MDY6MTY0MTQzOTAwNl9WNA" alt=""></p><p>选择第二个下载项进行下载，这里不管是新手还是老手，都会要求先登录再下载，如果没有账号可以注册一个，因为现在 MySQL 归 Oracle 所有了，不得不遵循这个规矩</p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=M2ZmNjVlYmVjMmFiNDhhYzRhODJlMjM4MWFlMjgwMjdfS3pUUmNZMFNHa0MwNnRoUGltVzM5eEI2MlppZmxCWGhfVG9rZW46Ym94Y25EcDJTREg4VnRuZm9VMkxqY2VFbkFnXzE2NDE0MzU0MDY6MTY0MTQzOTAwNl9WNA" alt=""></p><h4 id="为防止有的同学无法下载这里贴出下载链接"><a class="anchor" href="#为防止有的同学无法下载这里贴出下载链接">#</a> <strong>为防止有的同学无法下载，这里贴出下载链接：</strong></h4><p>MySQL Installer 5.7 ：<span class="exturl" data-url="aHR0cDovL2Nkbi5teXNxbC5jb20vL0Rvd25sb2Fkcy9NeVNRTEluc3RhbGxlci9teXNxbC1pbnN0YWxsZXItY29tbXVuaXR5LTUuNy4xNi4wLm1zaQ==">http://cdn.mysql.com//Downloads/MySQLInstaller/mysql-installer-community-5.7.16.0.msi</span></p><p>MySQL 5.7 Windows (x86, 32-bit), ZIP Archive ：<span class="exturl" data-url="aHR0cDovL2Nkbi5teXNxbC5jb20vL0Rvd25sb2Fkcy9NeVNRTC01LjcvbXlzcWwtNS43LjE2LXdpbjMyLnppcA==">http://cdn.mysql.com//Downloads/MySQL-5.7/mysql-5.7.16-win32.zip</span></p><p>MySQL 5.7 Windows (x86, 64-bit), ZIP Archive ：<span class="exturl" data-url="aHR0cDovL2Nkbi5teXNxbC5jb20vL0Rvd25sb2Fkcy9NeVNRTC01LjcvbXlzcWwtNS43LjE2LXdpbng2NC56aXA=">http://cdn.mysql.com//Downloads/MySQL-5.7/mysql-5.7.16-winx64.zip</span></p><p>MySQL Installer 只有 32 位的，没有 64 位的</p><h3 id="如果下载的是mysql-installer请看这里"><a class="anchor" href="#如果下载的是mysql-installer请看这里">#</a> <strong>如果下载的是 mysql installer，请看这里：</strong></h3><ol><li>双击安装文件，可能会出现下面的画面：</li></ol><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=OTIwM2ZiYjA1MWFlNGVlMDQzMDE1MzI5ZmYxNmM2MjVfMEVrek9qbEdFMU5MTlNEME9nUVUySzVKaEx3Q1dURkpfVG9rZW46Ym94Y245d25uRUlRR2tldE5QaDJuZFlEekhnXzE2NDE0MzU0MDY6MTY0MTQzOTAwNl9WNA" alt=""></p><p><span class="exturl" data-url="aHR0cDovL3huLS1NeVNRTC03NzhpaDh1azJicDd0dTUyZzM5NGEuTkVU">意思就是 MySQL 需要.NET</span> Framework4.0 才能继续安装，那我们就安装一下</p><ol start="2"><li>用浏览器打开<span class="exturl" data-url="aHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3poLWNuL2Rvd25sb2FkL2RldGFpbHMuYXNweD9pZD0xNzcxOA=="> http://www.microsoft.com/zh-cn/download/details.aspx?id=17718</span>，点击下载，就可以很顺利的下载下来了，下载完直接安装</li></ol><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=N2EwMjU3Y2Q2ZGEwMDcwODIxYTk0ODZiMDQwY2ZjYTZfRElTc1dtb094ZXVOalI3NVhMMEViemx5cVRWQmptcGVfVG9rZW46Ym94Y243elRjZ2Q3M1VCUVJldHZYMWxUNk81XzE2NDE0MzU0MDY6MTY0MTQzOTAwNl9WNA" alt=""></p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=ODI5YjczZDM5OGFiMzMxZTI3NmFmNjg2YTI1ZjQxMmRfSVJ0amF1ZTh4aUtPeW82ZjBBSUJ3YVRGSXBSTTFiWWdfVG9rZW46Ym94Y25nVTlCNkJNa1BrMVRmQW9iVTBpM3ZCXzE2NDE0MzU0MDY6MTY0MTQzOTAwNl9WNA" alt=""></p><ol start="3"><li>点击完成，然后再双击 MySQL 安装文件，这次就能正常安装了～</li></ol><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=ZjkxZmFiOWNjOTNkMjFiOWI4ZTE4NTYyN2I1Y2RiZDRfaHAxUHNtVnZjY21LZDJtdDhvaGJIaUYzSFhJUEFvbm9fVG9rZW46Ym94Y25qNWRtUWhabmFkTFBUcTZ0N01UWjFiXzE2NDE0MzU0MDY6MTY0MTQzOTAwNl9WNA" alt=""></p><ol start="4"><li>接下来就是一些说明协议啥的</li></ol><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=NjhmZTA2MDMwNTY2ZTFmYmE1MTMwN2UxZjEwODk1YzlfYjR0eW9DbndLRUZtUzZPa2owMTFDQXlGeGJyclBtbDZfVG9rZW46Ym94Y25xMXlOcEhZRHYxT0FrM0RxWGhjSW1kXzE2NDE0MzU0MDY6MTY0MTQzOTAwNl9WNA" alt=""></p><ol start="5"><li>同意协议，打钩之后，点击 next，然后出现，选择安装选项的界面，一般选择第一个就行，这个选项包含了一些 MySQL 其它组件，像 MySQL Workbench，MySQL for Excel 等等，如果只安装 MySQL 数据库，选择第二项 Server only 就行，这里我选择了第一项</li></ol><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=MWM3YmI0MTgzOTdlNjM0NjJmY2Y5MjhkOTA2Y2RkNDJfajByVnJNaGtRTExncDhYNWxrdnFyaDFIY0VWdDdpVFVfVG9rZW46Ym94Y25HVkwycEJSREVqM29WeGJZRTVpWVNnXzE2NDE0MzU0MDY6MTY0MTQzOTAwNl9WNA" alt=""></p><ol start="6"><li>点击 next 出现检查必需项，如果电脑安装了 VC2013 运行库，Excel，VisualStudio 前三项就会自动打上勾，因为我是虚拟机演示的，所以没有装这些，点击 next 的时候会出现警告框，不去管它，直接点击是跳过</li></ol><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=OTdlNzhhZGNlZTM3YTYxNTEyZjNjZmNmOTgyNjRmMDdfN2ZmZlZaQTRTUEVKUk5wTGpjOEdnVkFrSGw3cldVcjBfVG9rZW46Ym94Y25ValNrbGNaWkxrdmg4UEMwanRPd1NiXzE2NDE0MzU0MDY6MTY0MTQzOTAwNl9WNA" alt=""></p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=NWM0ODBkZGFhMTk3MmQ1ODVhMzk3MDJkNWZhYTYzZTBfNHRhVUJsdVhwbTJBUTJqbzRYMVJrVms1ejVGQk95ZDZfVG9rZW46Ym94Y251bmRKU1lIaWZpS25nNnAzMENpVDJlXzE2NDE0MzU0MDY6MTY0MTQzOTAwNl9WNA" alt=""></p><ol start="7"><li>然后出现即将要安装的软件和插件</li></ol><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=YjAzMjYzY2I3ZjNhYzlmMDkyNzEwZTZkNjM5ZGRhZWNfZUdpY0c2OXk2YjMyeVdWV1k2YmFoWmk2RHZ4YTNqek9fVG9rZW46Ym94Y25pZzZrZlk0N1NlajVmOG1uME5peHVBXzE2NDE0MzU0MDY6MTY0MTQzOTAwNl9WNA" alt=""></p><ol start="8"><li>点击 execute 开始执行安装，等全部安装完之后，点击 next，图中第三项表示安装失败，不去管它，是一个 odbc 数据源，我们一般不用这个</li></ol><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=YzVkMmQzZTM3NzYwMmExYjE3NWIxMGUyNDJlYWM1NzJfYXJKQlU5eGVKaFdZajBDcXV2M1VhMjE3Ylg3R0dzUXBfVG9rZW46Ym94Y25SUDBkcWZCTmREOWRPaFAwUHZpeEVmXzE2NDE0MzU0MDY6MTY0MTQzOTAwNl9WNA" alt=""></p><ol start="9"><li>之后出现配置界面</li></ol><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=NWQxNjVhMWY3OTcxOTE0MGJlNmVjNjZhY2QyZWEzOWFfSVZCSGZmaUR5UkdVUFhkMkNzT0xqWHJjZ2xGMFRwMzhfVG9rZW46Ym94Y25TckVNR0VXbTFDMkg3SHZ6dmhHbmZnXzE2NDE0MzU0MDY6MTY0MTQzOTAwNl9WNA" alt=""></p><ol start="10"><li>点击 next 之后开始配置，第一个配置的是 mysql 的运行模式和网络，其中 Config Type 表示运行模式，如果安装 mysql 是做开发用，就直接选择第一个默认的就行，第二个 Server Machine 表示运行模式为服务器模式，这些模式的不同会导致 MySQL 占用系统资源的不同，第二个配置的是网络相关，表示链接 MySQL 的时候使用 TCP/IP 协议，并指定端口号为 3306，这些如果没有特殊要求就不要去改</li></ol><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=NmRiODYzMTQxYjUxNzFjZWFlMzIzMDc2MGMwNWE3ZmRfVzAybXZ4MDJtNTlESUY1TjNMS2g1ZnhNc1FPc3lCUHZfVG9rZW46Ym94Y25PMHVCYmhiNVM5RllrS0tpSUtCMXRkXzE2NDE0MzU0MDY6MTY0MTQzOTAwNl9WNA" alt=""></p><ol start="11"><li>配置完成之后点击 next，需要填写 MySQL 中 root 用户的密码，长度最低为 4 位，第二栏中还可以添加普通用户，一般开发用不用再建立用户了，直接使用 root 就可以，所以我们填完密码之后点击 next</li></ol><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=NjkxNmZiZTllM2Q2NmJkZmJiZjUyNTBmOTE2ZWI4MmFfdnFJS2dLWTU5ZVpNWXlmY1JrMzZ2V3lacUNldHYzd1dfVG9rZW46Ym94Y24wS2RmUW5ZVEg1eFN1S2oxcGRWeVRrXzE2NDE0MzU0MDY6MTY0MTQzOTAwNl9WNA" alt=""></p><ol start="12"><li>以下图片中需要配置的是 MySQL 的运行方式，第一个单选框表示是否将 MySQL 服务作为一个 windows 服务来运行，windows server name 表示 MySQL 服务在 windows server 中的名称，第二个单选框表示是否在系统启动时自动启动 MySQL，</li></ol><p>第三个单选框表示 MySQL 服务以哪个账户运行，这一页的基本别动，直接 next</p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=NzEzMDJhZGUzMWM5OWI3MWE5MTBhMjc0ZDNlZGUyNzFfb1JzVlZ1NGRnbWI5cmpZb29RQUUxTGZRWko5TzN0UkhfVG9rZW46Ym94Y241RFhQSk5MWUY0V0FmRDlwaU96N2plXzE2NDE0MzU0MDY6MTY0MTQzOTAwNl9WNA" alt=""></p><ol start="13"><li>下面这个是关于 MySQL 的插件和扩展，直接 next</li></ol><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=MzFjZmQ4NDU0Zjg5NjhkZTIyMzRmNTdhNWUzMGFjYTlfSHBXM0x6NWU4SExUUk5UN094ZzBpa1p5czJMc1paQURfVG9rZW46Ym94Y25PcFdKd3NpMUJKWVBTcDF5Y0NmYUFiXzE2NDE0MzU0MDY6MTY0MTQzOTAwNl9WNA" alt=""></p><ol start="14"><li>然后出现下面的界面，直接点击 execute</li></ol><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=ZTRlMTVjMDUyYzRhMzA3YTZjZjI0ZjA0Njk0MjE3OTRfYnRieDdSOTRoVDhiSXZIRVdZdVlpRG15c280U0Q2Z3lfVG9rZW46Ym94Y251SWsyQVkyRU5iT0ZNZTlkODdsMURoXzE2NDE0MzU0MDY6MTY0MTQzOTAwNl9WNA" alt=""></p><ol start="15"><li>配置完之后点击 finish</li></ol><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=ZWE4OWY3MzA0ZWFjOGNhNWMxMThhYmI4MWQ1NzNhZjNfT1hqNWowcTBSQ1daZXVZMWY5YnlkVjZHTWozYVJKSG5fVG9rZW46Ym94Y24xR3V4U1dGT3pZYXhTOTFwWEJXcjlNXzE2NDE0MzU0MDY6MTY0MTQzOTAwNl9WNA" alt=""></p><ol start="16"><li>然后再配置 MySQL 的实例，点击下图中的 next</li></ol><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=ZDM1NzViN2Y0OGIyZjgyMTI4NTI4YzUwMGRmMTdiYTVfMEFkRExvVU5ldXlMMVVlOURqdFR4MGRuMVZlQ3gxOTVfVG9rZW46Ym94Y25mVE9xdUM1MTdCTFYydUJwa29CRnJkXzE2NDE0MzU0MDY6MTY0MTQzOTAwNl9WNA" alt=""></p><ol start="17"><li>之后点击下图中的 check，然后点击 next</li></ol><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=OWQzMTQ5N2JjZTcwMTMyMGJiZmVlYzE2Yjk5YmIzNWJfMUl5VjJYUTdaQTZJVXB3RzFJaTdaNFgwck9iS0NyanRfVG9rZW46Ym94Y25MSXh3MDlvTVlhdU5BWWFJNmZmbjRnXzE2NDE0MzU0MDY6MTY0MTQzOTAwNl9WNA" alt=""></p><ol start="18"><li>点击下图中的 execute</li></ol><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=MTNhM2Y2MzA1ZDUzMzcxOTAxNzFkZTgwNjlkOTIwOTlfNXpsUFpqTHNRdW9lQlFyUHJ2a2tOcE9MU1JFem9FTFVfVG9rZW46Ym94Y25rR0l2TlRLRjAwWHA2NTlmVWNhREJkXzE2NDE0MzU0MDY6MTY0MTQzOTAwNl9WNA" alt=""></p><ol start="19"><li>执行完毕之后点击 finish，又回到了主程序，然后点击 next</li></ol><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=N2UyMzM1ZmFiMzhlZTYwMzZmNDc1NzE1ZDg1YzA5MThfYWxWSTIzelRFWW0yVHhnZHN4T0VWYlY5ejlzQWJzMHRfVG9rZW46Ym94Y25CM3JxN29XbmdhVEhmZkY2cjFQUnpmXzE2NDE0MzU0MDY6MTY0MTQzOTAwNl9WNA" alt=""></p><ol start="20"><li>然后点击下图中的 finish</li></ol><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=OGYzZGQ1MDhkNjYyYjM4ZDgwYThhODU5MGQyMzI3OTZfaXZYY2JqT2FvR0RjRmFZOGU2SXZSV3VRdENYVTFhMEtfVG9rZW46Ym94Y25ScmFkTGxWeXBzQVlGakIzbXp4R0pMXzE2NDE0MzU0MDY6MTY0MTQzOTAwNl9WNA" alt=""></p><p>finally，配置完了～～～我们开始验证一下，在开始菜单找到 MySQL 5.7 Command Line Client 打开，之后提示输入密码，输入刚开始安装的时候你配置的密码，出现下图表示你安装成功了</p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=YjNiMTdlM2E2NzIzMWYyMGUyNWEzZTU4NzViNTlmZGJfZzNiUERHVTA2aFVxYW1NaEsyNGZ4VWhHWXR2cG5wcjJfVG9rZW46Ym94Y25ZTWlsS09HS2VEZ2Z2RFZvbUQ3bEY1XzE2NDE0MzU0MDY6MTY0MTQzOTAwNl9WNA" alt=""></p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=ODNjMWM1MjkzMTgyMmEzMWIyMWY1ZDdhZTFkZmIwYzlfS0ZkYU1wOTBtMkRKOEpkeUpTWm1JaHpCcjc4bXNSQ0xfVG9rZW46Ym94Y244S0l4aUsyd3ZORTlwOU9QUXV1TmdnXzE2NDE0MzU0MDY6MTY0MTQzOTAwNl9WNA" alt=""></p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=N2E5MzkyOTA4ZTQxMWNjNDNkZjU4ZmU3NjE4NDgzM2RfT2x0ZWc3NTNxUmZBTnlkQWxjaTBBQ1JPaG0zRGZlV1VfVG9rZW46Ym94Y25UamdFbHIxeUF4THFTZkQ3YXoxNFNlXzE2NDE0MzU0MDY6MTY0MTQzOTAwNl9WNA" alt=""></p><h3 id="下载zip安装包的看这里"><a class="anchor" href="#下载zip安装包的看这里">#</a> <strong>下载 zip 安装包的看这里：</strong></h3><ol><li>首先解压你下载的安装包，得到一个名为 mysql… 的文件夹</li></ol><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=MGIzMzA3NGRmNWQ2YTI1NzgyZmVkNTBhMjI0ZDEyY2VfMmlvbmZtV3NoRWxweGg0RlpKTmJQNFZHRDFLajZ4Y21fVG9rZW46Ym94Y25sMGpNemw3N2Y3eFlBRTk0NXdhNlJmXzE2NDE0MzU0MDY6MTY0MTQzOTAwNl9WNA" alt=""></p><ol start="2"><li>把这个文件夹移动到你想安装 mysql 的地方，也就是你移动到的目录就是安装 mysql 的目录，比如我的放在 C:\Program Files 下面</li><li>打开我的电脑 -&gt; 属性 -&gt; 高级 -&gt; 环境变量，在系统变量里选择 PATH, 在其后面添加：你的 mysql bin 文件夹的路径 (如: C:\Program Files\mysql-5.7.16-winx64\bin)，注意是追加，不是覆盖 ，然后确定</li></ol><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=NzBhOWU5Yjg0Njg3MjM2Nzg4OThiMjYzODAyYWRjOTBfanVXbDk4MmYxNmJIS0I1RUZ4MkdRTHFVanlFc2V1dVNfVG9rZW46Ym94Y24yRGxyZk1DS0JKQjR5NU5Wd2VpQVBaXzE2NDE0MzU0MDY6MTY0MTQzOTAwNl9WNA" alt=""></p><ol start="4"><li>在 mysql 目录中新建文件夹 data，还需要修改一下配置文件，mysql 默认的配置文件是 mysql 目录中的 my-default.ini，比如我的是 C:\Program Files\mysql-5.7.16-winx64\my-default.ini</li></ol><p>用记事本打开在其中修改或添加配置，之后保存关闭</p><p>[mysqld]</p><p>basedir= C:\Program Files\mysql-5.7.16-winx64（mysql 所在目录）</p><p>datadir= C:\Program Files\mysql-5.7.16-winx64\data（mysql 所在目录 \data）</p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=YThhZTZiMmEwMzBiZWMyY2E1MThmY2UxZmY3MmU0NTlfNnFJbW43WUVqbXB1Z0c1OXNMOUdaVjJkWWZiN1pvRm1fVG9rZW46Ym94Y25QRXhmcVF5bXBiQ0NjUERmN1JvT3FiXzE2NDE0MzU0MDY6MTY0MTQzOTAwNl9WNA" alt=""></p><ol start="5"><li>以管理员身份运行 cmd（一定要用管理员身份运行，不然权限不够），输入命令 cd C:\Program Files\mysql-5.7.16-winx64\bin  回车</li></ol><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=ZmRkYTY4NjliZWFiZjhlY2MwYTM4YjI1MTkwNDVlODFfdzkwMlJuWEhHa2xNUm1Eald2ZEFyS3VkQkEyQlR5U0pfVG9rZW46Ym94Y25pdW1hbEY4ZmdiWm91V2xGd2N1ZkFoXzE2NDE0MzU0MDY6MTY0MTQzOTAwNl9WNA" alt=""></p><ol start="6"><li>然后再输入 mysqld --initialize-insecure --user=mysql 回车</li></ol><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=MTE0NjhkZTRjY2FhMzZmNzVhMThjMDM5NGQ3MDZjNjZfb3hKdDluV2ZNelAwRHExUlgzWDJNcVMwTWNHdERyUlJfVG9rZW46Ym94Y24yenhWZHVyek5JdVpwMGlLRTg3dktkXzE2NDE0MzU0MDY6MTY0MTQzOTAwNl9WNA" alt=""></p><ol start="7"><li>之后再输入 mysqld install 回车</li></ol><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=NGU1ZTFmZmMxMmUzZTYwNTQyYjNiZTI0ODkxNTk5MDJfWmV6TkNobFJvZXRDSkhaRzNLTEFlY0dJdlg1MzVlSG1fVG9rZW46Ym94Y24yeE1YdGVybjJ1aDNibDNWdnVKR1ZDXzE2NDE0MzU0MDY6MTY0MTQzOTAwNl9WNA" alt=""></p><ol start="8"><li>输入 net start mysql 回车启动 mysql 服务</li></ol><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=MGMxZGY4ZDE2YjRjZTczZTBmNjMxZDA4MDZjNGM2NTFfamRTbHQ0bjFtck8zYkkzbDF3NFVMN1JicUxLMEllZEZfVG9rZW46Ym94Y25JT3hJejBES0tqYlZaRWEwbDI2Z09iXzE2NDE0MzU0MDY6MTY0MTQzOTAwNl9WNA" alt=""></p><ol start="9"><li>从上图看到 mysql 服务已经启动了，我们输入 mysql -u root -p 回车登录 mysql 数据库</li></ol><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=OWNhNDVjYjg1N2QwZDVkN2RmOTNhYzkzN2NmYjhkNDFfRmllSWd4OE10T3ZRZnhrSUV4bnQzazBIQzEwOWJVQWJfVG9rZW46Ym94Y240TjZodzgycTlzVEtURzVKaTBvYjNjXzE2NDE0MzU0MDY6MTY0MTQzOTAwNl9WNA" alt=""></p><ol start="10"><li>要求输入密码，刚刚安装完是没有密码的，直接回车</li></ol><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=YjQzOGJlYTQwYWZmNGQ4MTJmMDU0NGNkYzE3NDE5NWRfb2RaWXlIaGpQODZYb2szYlJrdVpOVDZDZkNLWlBSODFfVG9rZW46Ym94Y256bzNidW1pU0NyVkNiQTZrVkRPdHBjXzE2NDE0MzU0MDY6MTY0MTQzOTAwNl9WNA" alt=""></p><p>看到已经进入了 mysql，我们输入 show databases; 回车可以看到数据库已经显示出来了，这个是不是比安装版的更简单</p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=MzJiYTg1NGFjZGZmYzRhMzI3OWE5YzE2Njg4NWMwNjhfb0t1T1BVWDFSVUltd2I4RjRYR3VoekVsNHJrVGVqREhfVG9rZW46Ym94Y25jcGxmVUpIWExjWVhSa3JuYmpEOGFlXzE2NDE0MzU0MDY6MTY0MTQzOTAwNl9WNA" alt=""></p><h3 id="linux下安装mysql"><a class="anchor" href="#linux下安装mysql">#</a> <strong>Linux 下安装 mysql：</strong></h3><p>这个请看其他人写好的：<span class="exturl" data-url="aHR0cDovL2ppbmd5YW4uYmFpZHUuY29tL2FydGljbGUvZmVjN2ExZTVmOGQzMjAxMTkwYjRlNzgyLmh0bWw=">http://jingyan.baidu.com/article/fec7a1e5f8d3201190b4e782.html</span></p><blockquote><p><span class="exturl" data-url="aHR0cDovL3d3dy5jbmJsb2dzLmNvbS9zaGVubGlhbmcxMjMvcC8zMjAzNTQ2Lmh0bWw=">http://www.cnblogs.com/shenliang123/p/3203546.html</span></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 电脑 </category>
          
          <category> 软件配置 </category>
          
          <category> 安装教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mvn安装配置教程</title>
      <link href="computer/app/mvn%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/"/>
      <url>computer/app/mvn%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>mvn 安装配置教程</p><h1 id="maven配置"><a class="anchor" href="#maven配置">#</a> Maven 配置</h1><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9NYXZlbg==">Maven</span> 项目对象模型 (POM)，可以通过一小段描述信息来管理项目的构建，报告和文档的软件<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTklQTElQjklRTclOUIlQUUlRTclQUUlQTElRTclOTAlODYlRTUlQjclQTUlRTUlODUlQjc=">项目管理工具</span>。</p></blockquote><blockquote><p>Maven 的配置却让一些初学者望而却步，这里我就把 Maven 的详细配置过程写下，希望能对你有所帮助。</p></blockquote><h3 id="文章目录"><a class="anchor" href="#文章目录">#</a> 文章目录</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1bzkyMC9hcnRpY2xlL2RldGFpbHMvODIwODI0MDMjTWF2ZW5fMA==">Maven 配置</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1bzkyMC9hcnRpY2xlL2RldGFpbHMvODIwODI0MDMjTWF2ZW5fNw==">Maven 的下载</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1bzkyMC9hcnRpY2xlL2RldGFpbHMvODIwODI0MDMjTWF2ZW5fMTc=">Maven 常用配置</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1bzkyMC9hcnRpY2xlL2RldGFpbHMvODIwODI0MDMjMV9fMjE=">1. 环境变量配置</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1bzkyMC9hcnRpY2xlL2RldGFpbHMvODIwODI0MDMjMl9fNDE=">2. 修改配置文件</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1bzkyMC9hcnRpY2xlL2RldGFpbHMvODIwODI0MDMjMV9fNTE=">1. 本地仓库位置修改</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1bzkyMC9hcnRpY2xlL2RldGFpbHMvODIwODI0MDMjMl9tYXZlbkpES182NQ==">2. 修改 maven 默认的 JDK 版本</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1bzkyMC9hcnRpY2xlL2RldGFpbHMvODIwODI0MDMjM19fODQ=">3. 添加国内镜像源</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1bzkyMC9hcnRpY2xlL2RldGFpbHMvODIwODI0MDMjSURFTWF2ZW5fMTE0">常用 IDE 下配置 Maven</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1bzkyMC9hcnRpY2xlL2RldGFpbHMvODIwODI0MDMjSURFQU1hdmVuXzExOA==">IDEA 下配置 Maven</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1bzkyMC9hcnRpY2xlL2RldGFpbHMvODIwODI0MDMjRWNsaXBzZU1hdmVuXzEzNA==">Eclipse 下配置 Maven</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1bzkyMC9hcnRpY2xlL2RldGFpbHMvODIwODI0MDMjU2V0dGluZ3N4bWxfMTQ1">附：完整的 Settings.xml 文件</span></li></ul><h2 id="maven的下载"><a class="anchor" href="#maven的下载">#</a> Maven 的下载</h2><ol><li>在 Maven 的官网即可下载，点击访问<span class="exturl" data-url="aHR0cDovL21hdmVuLmFwYWNoZS5vcmcvZG93bmxvYWQuY2dp"> Apache Maven</span>。</li></ol><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=YTlhYjc5MDkwN2NmYmM4YjZjMjkzMmZlMDUxMTdjYTNfdG5VQ2RKVjhEc0hFNXdvN2JkZEhNZlJyVWRhdjZKemtfVG9rZW46Ym94Y244ZkhjQ3k5UXR6cDMyVWNYUlVCY1pmXzE2NDE0MzUzMzM6MTY0MTQzODkzM19WNA" alt=""></p><ol start="2"><li>下载后解压即可，解压后目录结构如下：</li></ol><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=ZjM0NGJlYTQ1OWM0YmQxZGZjYjRiZjVmMTA5NjJjMDdfZWw3RUNyZEd4TTY5eHlQQklvUDNSUEwzb215QWViWHhfVG9rZW46Ym94Y25aeTVjbDdNMUtKS2xvM0tVc24xelRmXzE2NDE0MzUzMzM6MTY0MTQzODkzM19WNA" alt=""></p><h2 id="maven常用配置"><a class="anchor" href="#maven常用配置">#</a> Maven 常用配置</h2><p>在配置之前请将 JDK 安装好。</p><h3 id="1-环境变量配置"><a class="anchor" href="#1-环境变量配置">#</a> 1. 环境变量配置</h3><ol start="3"><li>添加 <strong>M2_HOME</strong> : 对应 Maven 的解压目录即可。</li></ol><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=YmYyYzA0Nzk3ODY5YzAyYmQ2ZDU3ZTVhNmJjMjg1MTdfMldRNkpsd2M1SjNMcFVVZ2F6bjNZTndnaWhlOFYxWEVfVG9rZW46Ym94Y25hVE9GMEVkaGpNYVFNMk9pMG1keEZmXzE2NDE0MzUzMzM6MTY0MTQzODkzM19WNA" alt=""></p><ol start="4"><li>编辑<strong> Path</strong> 环境变量：</li></ol><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=ODFjMDQ1ZTg4NDRmNGQ5MThkMTY0YWUxYWQzMDEyZjhfUU1OQ013TkxCSlc4UXRuZ2s0NUFSOERmSFVwc1dVa0JfVG9rZW46Ym94Y25zTWZHd3l4RzdqWFVMaWF4WlNpWXJjXzE2NDE0MzUzMzM6MTY0MTQzODkzM19WNA" alt=""></p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=YWI1N2I4Yzc1Y2YyYjA1NWEwNjVjMGU4ZDNmYjlhMjZfc1FKSzB6RlltdHFPb0xVRU1MRkZjc1RvY0pjeHZBSktfVG9rZW46Ym94Y24yaEdhZEkwTWFjVFRyeW0wSldERnFlXzE2NDE0MzUzMzM6MTY0MTQzODkzM19WNA" alt=""></p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/file/out/FTnJjm0rD9VVeCGVx1soysIGNV1cwFs3h8FOPePgXGEcAvxEeD/" alt=""></p><ol start="6"><li>测试，在 cmd 窗口输入 mvn -v 查看</li></ol><p>显示如下即配置成功：</p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=OGM2YzgwYzQwZGJjMzY1ZWVmZWJiYWUzYmM5ZmIzM2FfNGNkbVZ5RU5JVmsxU1NHMUFOb0pnRXAwVzBtWjQ1cHFfVG9rZW46Ym94Y25XdUc4TWJGUHFjbmVTN0NHNEVyb3loXzE2NDE0MzUzMzM6MTY0MTQzODkzM19WNA" alt=""></p><h3 id="2-修改配置文件"><a class="anchor" href="#2-修改配置文件">#</a> 2. 修改配置文件</h3><p>通常我们需要修改解压目录下 conf/settings.xml 文件，这样可以更好的适合我们的使用。</p><ul><li>此处注意：所有的修改一定要在注释标签外面，不然修改无效。Maven 很多标签都是给的例子，都是注释掉的。</li></ul><p><strong>文章最后附上我的整个 Settings.xml 文件配置。</strong></p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=YmM2MDdkNTBiMWVjZTRiYWJhNWMxOTJkMTEyN2RmZmVfd0cwRGV5ekNuVjFUQ2RIdGhEdHJSeFpZN1liaUlnRVlfVG9rZW46Ym94Y25ieGI3SmJpVzFWUkxOb1FjVDhrZW5oXzE2NDE0MzUzMzM6MTY0MTQzODkzM19WNA" alt=""></p><h4 id="1-本地仓库位置修改"><a class="anchor" href="#1-本地仓库位置修改">#</a> 1. 本地仓库位置修改</h4><p>在 &lt; <strong>localRepository</strong> &gt; 标签内添加自己的本地位置路径</p><pre><code class="language-Plain%2520Text">  &lt;!-- localRepository   | The path to the local repository maven will use to store artifacts.   |   | Default: ${user.home}/.m2/repository  &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;  --&gt;        &lt;localRepository&gt;D:\tools\repository&lt;/localRepository&gt;</code></pre><h4 id="2-修改maven默认的jdk版本"><a class="anchor" href="#2-修改maven默认的jdk版本">#</a> 2. 修改 maven 默认的 JDK 版本</h4><p>在 &lt; <strong>profiles</strong> &gt; 标签下添加一个 &lt; <strong>profile</strong> &gt; 标签，修改 maven 默认的 JDK 版本。</p><pre><code class="language-Plain%2520Text">&lt;profile&gt;       &lt;id&gt;JDK-1.8&lt;/id&gt;       &lt;activation&gt;           &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;           &lt;jdk&gt;1.8&lt;/jdk&gt;       &lt;/activation&gt;       &lt;properties&gt;           &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;           &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;           &lt;maven.compiler.compilerVersion&gt;1.8&lt;/maven.compiler.compilerVersion&gt;       &lt;/properties&gt;   &lt;/profile&gt;</code></pre><h4 id="3-添加国内镜像源"><a class="anchor" href="#3-添加国内镜像源">#</a> 3. 添加国内镜像源</h4><p>添加 &lt; <strong>mirrors</strong> &gt; 标签下 &lt; <strong>mirror</strong> &gt;，添加国内镜像源，这样下载 jar 包速度很快。默认的中央仓库有时候甚至连接不通。一般使用阿里云镜像库即可。这里我就都加上了，Maven 会默认从这几个开始下载，没有的话就会去中央仓库了。</p><pre><code class="language-Plain%2520Text">&lt;!-- 阿里云仓库 --&gt;&lt;mirror&gt;    &lt;id&gt;alimaven&lt;/id&gt;    &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;    &lt;name&gt;aliyun maven&lt;/name&gt;    &lt;url&gt;http://maven.aliyun.com/nexus/content/repositories/central/&lt;/url&gt;&lt;/mirror&gt;&lt;!-- 中央仓库1 --&gt;&lt;mirror&gt;    &lt;id&gt;repo1&lt;/id&gt;    &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;    &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;    &lt;url&gt;http://repo1.maven.org/maven2/&lt;/url&gt;&lt;/mirror&gt;&lt;!-- 中央仓库2 --&gt;&lt;mirror&gt;    &lt;id&gt;repo2&lt;/id&gt;    &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;    &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;    &lt;url&gt;http://repo2.maven.org/maven2/&lt;/url&gt;&lt;/mirror&gt;</code></pre><h2 id="常用ide下配置maven"><a class="anchor" href="#常用ide下配置maven">#</a> 常用 IDE 下配置 Maven</h2><p>目前常用的开发工具如 idea，eclipse 都自身集成了一个版本的 Maven。但是通常我们使用自己已经配置好的 Maven。</p><h3 id="idea下配置maven"><a class="anchor" href="#idea下配置maven">#</a> IDEA 下配置 Maven</h3><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=Yjc2MzA2MDA0MWQ4NDA2ZTk2ZWQ0MTNjODI5ODEwZTdfeEdCdW1neDluV3lEWThtN29SaUxuUUpvOGljRzZCcmlfVG9rZW46Ym94Y25lQ25jZlB5bDh1ZmtMZ0dZcFNCWFBjXzE2NDE0MzUzMzM6MTY0MTQzODkzM19WNA" alt=""></p><p>1：此处修改为自己解压的 Maven 目录</p><p>2：勾选 <strong>Override</strong> ，修改为自己目录下的<strong> settings.xml</strong> 目录</p><p>3：修改为自己的本地仓库地址，一般会自动识别。</p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=MDBlODEzYWI5NGJmNmNmMzdjOGUxMzIwMmI4YjU5ZjZfVWU2UktFTWhoaE1HWnlKWk9zWWZjUXp2NHo5c2JyTkNfVG9rZW46Ym94Y253c1V2VURYN1FRdG9CTUV0andWcXVkXzE2NDE0MzUzMzM6MTY0MTQzODkzM19WNA" alt=""></p><p>此处勾选，当修改 pom 文件时，Maven 就能帮我们自动导包了。</p><h3 id="eclipse下配置maven"><a class="anchor" href="#eclipse下配置maven">#</a> Eclipse 下配置 Maven</h3><ol start="7"><li>将 eclipse 使用的 Maven 修改为自己的。点击 add 后选择自己 Maven 的安装目录即可。添加好之后记得勾选。</li></ol><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=MzZhY2QwY2IyZjc4ZGIzOWNhZDk4ZDFlZGE5YTA2YTBfRjFxZkJFb3d1U3RPWEZnSjdETUFKZ05nS0M5RHcwNXpfVG9rZW46Ym94Y25yeU9aTXhsZFY3UUVwSmR3MDBvQkZiXzE2NDE0MzUzMzM6MTY0MTQzODkzM19WNA" alt=""></p><ol start="8"><li>将所有的 settings 修改为自己 Maven 目录下的 <strong>conf/settings.xml</strong> . 点击<strong> Update Settings</strong> 按钮，下面的 Local Respository 会自动识别出来。</li></ol><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=YmE3ZjdjNzE5OGZmMmU5MWU1NjQ5NDhiNWVhMTE1ODRfeDlzZWZLMXpsNUoycU1tSmRTTmRqSlpNTFNGcTRwVTJfVG9rZW46Ym94Y25WSXV5RkMya1dQZ3JLTGRncklCOVVnXzE2NDE0MzUzMzM6MTY0MTQzODkzM19WNA" alt=""></p><h2 id="附完整的settingsxml文件"><a class="anchor" href="#附完整的settingsxml文件">#</a> 附：完整的 Settings.xml 文件</h2><pre><code class="language-Plain%2520Text">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!--Licensed to the Apache Software Foundation (ASF) under oneor more contributor license agreements.  See the NOTICE filedistributed with this work for additional informationregarding copyright ownership.  The ASF licenses this fileto you under the Apache License, Version 2.0 (the"License"); you may not use this file except in compliancewith the License.  You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing,software distributed under the License is distributed on an"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANYKIND, either express or implied.  See the License for thespecific language governing permissions and limitationsunder the License.--&gt;&lt;!-- | This is the configuration file for Maven. It can be specified at two levels: | |  1. User Level. This settings.xml file provides configuration for a single user, |                 and is normally provided in ${user.home}/.m2/settings.xml. | |                 NOTE: This location can be overridden with the CLI option: | |                 -s /path/to/user/settings.xml | |  2. Global Level. This settings.xml file provides configuration for all Maven |                 users on a machine (assuming they're all using the same Maven |                 installation). It's normally provided in |                 ${maven.conf}/settings.xml. | |                 NOTE: This location can be overridden with the CLI option: | |                 -gs /path/to/global/settings.xml | | The sections in this sample file are intended to give you a running start at | getting the most out of your Maven installation. Where appropriate, the default | values (values used when the setting is not specified) are provided. | |--&gt;&lt;settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"          xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd"&gt;  &lt;!-- localRepository   | The path to the local repository maven will use to store artifacts.   |   | Default: ${user.home}/.m2/repository  &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;  --&gt;        &lt;localRepository&gt;D:\tools\repository&lt;/localRepository&gt;  &lt;!-- interactiveMode   | This will determine whether maven prompts you when it needs input. If set to false,   | maven will use a sensible default value, perhaps based on some other setting, for   | the parameter in question.   |   | Default: true  &lt;interactiveMode&gt;true&lt;/interactiveMode&gt;  --&gt;  &lt;!-- offline   | Determines whether maven should attempt to connect to the network when executing a build.   | This will have an effect on artifact downloads, artifact deployment, and others.   |   | Default: false  &lt;offline&gt;false&lt;/offline&gt;  --&gt;  &lt;!-- pluginGroups   | This is a list of additional group identifiers that will be searched when resolving plugins by their prefix, i.e.   | when invoking a command line like "mvn prefix:goal". Maven will automatically add the group identifiers   | "org.apache.maven.plugins" and "org.codehaus.mojo" if these are not already contained in the list.   |--&gt;  &lt;pluginGroups&gt;    &lt;!-- pluginGroup     | Specifies a further group identifier to use for plugin lookup.    &lt;pluginGroup&gt;com.your.plugins&lt;/pluginGroup&gt;    --&gt;  &lt;/pluginGroups&gt;  &lt;!-- proxies   | This is a list of proxies which can be used on this machine to connect to the network.   | Unless otherwise specified (by system property or command-line switch), the first proxy   | specification in this list marked as active will be used.   |--&gt;  &lt;proxies&gt;    &lt;!-- proxy     | Specification for one proxy, to be used in connecting to the network.     |    &lt;proxy&gt;      &lt;id&gt;optional&lt;/id&gt;      &lt;active&gt;true&lt;/active&gt;      &lt;protocol&gt;http&lt;/protocol&gt;      &lt;username&gt;proxyuser&lt;/username&gt;      &lt;password&gt;proxypass&lt;/password&gt;      &lt;host&gt;proxy.host.net&lt;/host&gt;      &lt;port&gt;80&lt;/port&gt;      &lt;nonProxyHosts&gt;local.net|some.host.com&lt;/nonProxyHosts&gt;    &lt;/proxy&gt;    --&gt;  &lt;/proxies&gt;  &lt;!-- servers   | This is a list of authentication profiles, keyed by the server-id used within the system.   | Authentication profiles can be used whenever maven must make a connection to a remote server.   |--&gt;  &lt;servers&gt;    &lt;!-- server     | Specifies the authentication information to use when connecting to a particular server, identified by     | a unique name within the system (referred to by the 'id' attribute below).     |     | NOTE: You should either specify username/password OR privateKey/passphrase, since these pairings are     |       used together.     |    &lt;server&gt;      &lt;id&gt;deploymentRepo&lt;/id&gt;      &lt;username&gt;repouser&lt;/username&gt;      &lt;password&gt;repopwd&lt;/password&gt;    &lt;/server&gt;    --&gt;    &lt;!-- Another sample, using keys to authenticate.    &lt;server&gt;      &lt;id&gt;siteServer&lt;/id&gt;      &lt;privateKey&gt;/path/to/private/key&lt;/privateKey&gt;      &lt;passphrase&gt;optional; leave empty if not used.&lt;/passphrase&gt;    &lt;/server&gt;    --&gt;  &lt;/servers&gt;  &lt;!-- mirrors   | This is a list of mirrors to be used in downloading artifacts from remote repositories.   |   | It works like this: a POM may declare a repository to use in resolving certain artifacts.   | However, this repository may have problems with heavy traffic at times, so people have mirrored   | it to several places.   |   | That repository definition will have a unique id, so we can create a mirror reference for that   | repository, to be used as an alternate download site. The mirror site will be the preferred   | server for that repository.   |--&gt;  &lt;mirrors&gt;    &lt;!-- mirror     | Specifies a repository mirror site to use instead of a given repository. The repository that     | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used     | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.     |    &lt;mirror&gt;      &lt;id&gt;mirrorId&lt;/id&gt;      &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt;      &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;      &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt;    &lt;/mirror&gt;     --&gt;            &lt;!-- 阿里云仓库 --&gt;        &lt;mirror&gt;            &lt;id&gt;alimaven&lt;/id&gt;            &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;            &lt;name&gt;aliyun maven&lt;/name&gt;            &lt;url&gt;http://maven.aliyun.com/nexus/content/repositories/central/&lt;/url&gt;        &lt;/mirror&gt;        &lt;!-- 中央仓库1 --&gt;        &lt;mirror&gt;            &lt;id&gt;repo1&lt;/id&gt;            &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;            &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;            &lt;url&gt;http://repo1.maven.org/maven2/&lt;/url&gt;        &lt;/mirror&gt;        &lt;!-- 中央仓库2 --&gt;        &lt;mirror&gt;            &lt;id&gt;repo2&lt;/id&gt;            &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;            &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;            &lt;url&gt;http://repo2.maven.org/maven2/&lt;/url&gt;        &lt;/mirror&gt;  &lt;/mirrors&gt;  &lt;!-- profiles   | This is a list of profiles which can be activated in a variety of ways, and which can modify   | the build process. Profiles provided in the settings.xml are intended to provide local machine-   | specific paths and repository locations which allow the build to work in the local environment.   |   | For example, if you have an integration testing plugin - like cactus - that needs to know where   | your Tomcat instance is installed, you can provide a variable here such that the variable is   | dereferenced during the build process to configure the cactus plugin.   |   | As noted above, profiles can be activated in a variety of ways. One way - the activeProfiles   | section of this document (settings.xml) - will be discussed later. Another way essentially   | relies on the detection of a system property, either matching a particular value for the property,   | or merely testing its existence. Profiles can also be activated by JDK version prefix, where a   | value of '1.4' might activate a profile when the build is executed on a JDK version of '1.4.2_07'.   | Finally, the list of active profiles can be specified directly from the command line.   |   | NOTE: For profiles defined in the settings.xml, you are restricted to specifying only artifact   |       repositories, plugin repositories, and free-form properties to be used as configuration   |       variables for plugins in the POM.   |   |--&gt;  &lt;profiles&gt;    &lt;!-- profile     | Specifies a set of introductions to the build process, to be activated using one or more of the     | mechanisms described above. For inheritance purposes, and to activate profiles via &lt;activatedProfiles/&gt;     | or the command line, profiles have to have an ID that is unique.     |     | An encouraged best practice for profile identification is to use a consistent naming convention     | for profiles, such as 'env-dev', 'env-test', 'env-production', 'user-jdcasey', 'user-brett', etc.     | This will make it more intuitive to understand what the set of introduced profiles is attempting     | to accomplish, particularly when you only have a list of profile id's for debug.     |     | This profile example uses the JDK version to trigger activation, and provides a JDK-specific repo.    &lt;profile&gt;      &lt;id&gt;jdk-1.4&lt;/id&gt;      &lt;activation&gt;        &lt;jdk&gt;1.4&lt;/jdk&gt;      &lt;/activation&gt;      &lt;repositories&gt;        &lt;repository&gt;          &lt;id&gt;jdk14&lt;/id&gt;          &lt;name&gt;Repository for JDK 1.4 builds&lt;/name&gt;          &lt;url&gt;http://www.myhost.com/maven/jdk14&lt;/url&gt;          &lt;layout&gt;default&lt;/layout&gt;          &lt;snapshotPolicy&gt;always&lt;/snapshotPolicy&gt;        &lt;/repository&gt;      &lt;/repositories&gt;    &lt;/profile&gt;    --&gt;    &lt;!--     | Here is another profile, activated by the system property 'target-env' with a value of 'dev',     | which provides a specific path to the Tomcat instance. To use this, your plugin configuration     | might hypothetically look like:     |     | ...     | &lt;plugin&gt;     |   &lt;groupId&gt;org.myco.myplugins&lt;/groupId&gt;     |   &lt;artifactId&gt;myplugin&lt;/artifactId&gt;     |     |   &lt;configuration&gt;     |     &lt;tomcatLocation&gt;${tomcatPath}&lt;/tomcatLocation&gt;     |   &lt;/configuration&gt;     | &lt;/plugin&gt;     | ...     |     | NOTE: If you just wanted to inject this configuration whenever someone set 'target-env' to     |       anything, you could just leave off the &lt;value/&gt; inside the activation-property.     |    &lt;profile&gt;      &lt;id&gt;env-dev&lt;/id&gt;      &lt;activation&gt;        &lt;property&gt;          &lt;name&gt;target-env&lt;/name&gt;          &lt;value&gt;dev&lt;/value&gt;        &lt;/property&gt;      &lt;/activation&gt;      &lt;properties&gt;        &lt;tomcatPath&gt;/path/to/tomcat/instance&lt;/tomcatPath&gt;      &lt;/properties&gt;    &lt;/profile&gt;    --&gt;        &lt;profile&gt;         &lt;id&gt;JDK-1.8&lt;/id&gt;         &lt;activation&gt;           &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;           &lt;jdk&gt;1.8&lt;/jdk&gt;         &lt;/activation&gt;         &lt;properties&gt;           &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;           &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;           &lt;maven.compiler.compilerVersion&gt;1.8&lt;/maven.compiler.compilerVersion&gt;         &lt;/properties&gt;       &lt;/profile&gt;  &lt;/profiles&gt;  &lt;!-- activeProfiles   | List of profiles that are active for all builds.   |  &lt;activeProfiles&gt;    &lt;activeProfile&gt;alwaysActiveProfile&lt;/activeProfile&gt;    &lt;activeProfile&gt;anotherAlwaysActiveProfile&lt;/activeProfile&gt;  &lt;/activeProfiles&gt;  --&gt;&lt;/settings&gt;</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 电脑 </category>
          
          <category> 软件配置 </category>
          
          <category> 安装教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java安装教程</title>
      <link href="computer/app/java%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
      <url>computer/app/java%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>java 安装教程</p><h1 id="javawindows安装教程"><a class="anchor" href="#javawindows安装教程">#</a> <strong>JAVA (windows) 安装教程</strong></h1><p>闲来无聊，把电脑给重装系统了，导致什么环境都没得；下面简单说下 windoes 系统下 jdk 的安装步骤</p><h1 id="一-下载"><a class="anchor" href="#一-下载">#</a> <strong>一、下载</strong></h1><p>首先点击地址进行下载：<span class="exturl" data-url="aHR0cHM6Ly93d3cub3JhY2xlLmNvbS90ZWNobmV0d29yay9qYXZhL2phdmFzZS9kb3dubG9hZHMvamRrOC1kb3dubG9hZHMtMjEzMzE1MS5odG1s">https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</span></p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=MjQ2NGRlNjcxNzg0YmY0MDE1NTU3ZjgyOGQ1ZTAxZGZfamVsamZYc3cwNXB4d2lRY2ZPZVpsR1JHRlNoc0RRZDZfVG9rZW46Ym94Y25kcm5QUGVITEVIRHJpUEhtWktia1l3XzE2NDE0MzUyOTM6MTY0MTQzODg5M19WNA" alt=""></p><p><strong>二、安装</strong></p><h3 id="1-双击下载的程序包出现如图所示"><a class="anchor" href="#1-双击下载的程序包出现如图所示">#</a> <strong>1、双击下载的程序包，出现如图所示</strong></h3><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=NGU4MmFhMjVhODk0ZjY5ZDc1NjJiMzEwMzFlYzk3NTJfRW84VjVmbFdndmkxOERURmxlWmdXcjdIQ0FzTEl1SmtfVG9rZW46Ym94Y25pc3pMVUlmbFM0SW1GbWlydGlydmZpXzE2NDE0MzUyOTM6MTY0MTQzODg5M19WNA" alt=""></p><p><strong>2、点击下一步；这里我把路径给改成了（D 盘下的 jdk1.8）</strong></p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=YWFmNWYwMTBmZThlNTI4YzhhNWNhMGVmYmM1ZGU2NGJfUEN4QlhnT3VSQmh5VUc1QWdxMHByQ0xKNGhNSFdzdm5fVG9rZW46Ym94Y25nQkFQQVlCRVZndG5YUUxFeE13ck1nXzE2NDE0MzUyOTM6MTY0MTQzODg5M19WNA" alt=""></p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=NmQ1MzliODRhN2VjZjE5MTMxNjUyNzI5MmM3MGZlZmNfZUZ1dnBMNWFkTDhVT21hQ05CbjlMZWF3Wmd6ZEJXR0VfVG9rZW46Ym94Y25sZHFjMllscDU1dGxGdXZ3WmpuS3lkXzE2NDE0MzUyOTM6MTY0MTQzODg5M19WNA" alt=""></p><p><strong>3、继续下一步，会出现弹框，点击确定</strong></p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=OTg0OTQ1MjYxOGYzMTc2ZDkzMGIxNzEzNTM1NDQ2NjBfb1pBVDRXUXdsOXo0d2NLM2NORER4Q3FjVmhTMGxoMzBfVG9rZW46Ym94Y25SbGozaVpPNnJDVjgyaXd1R3loR1plXzE2NDE0MzUyOTM6MTY0MTQzODg5M19WNA" alt=""></p><p><strong>4、点击确定，会出现安装 jre 的提示，点击下一步即可</strong></p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=OTllMGFkNjFmNTk0YmMxYzViMTVjMzIxMzVkM2UxNGVfVnVtVTNuQ25qc0tBUHBOSDJRRUpQSnphUmdBbHpVZUZfVG9rZW46Ym94Y25tdE84ODRZcFNNZHdCNTRXMEdEdU5iXzE2NDE0MzUyOTM6MTY0MTQzODg5M19WNA" alt=""></p><p><strong>5、等待安装完成</strong></p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=ODNiN2E2NjBjODQ3ZjM4NjZhMDQ5OTI0YWJmN2JmYTVfdHRSZ1pZTEJtSFhabzh2T3BkMWJqUkdSRFk3RTZ4Yk1fVG9rZW46Ym94Y25CTno4Z3VYRjFjOW94RURDdW01dWRmXzE2NDE0MzUyOTM6MTY0MTQzODg5M19WNA" alt=""></p><p><strong>6、之后窗口左侧会有一个弹框，把它拉出来即可</strong></p><h3 id="7-点击关闭"><a class="anchor" href="#7-点击关闭">#</a> <strong>7、点击关闭</strong></h3><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=M2ViMmRhY2RmNWUyMTFmNjU3YzM1ZTQyMzVhYmZlMmJfUlVyblhqcEFYMXl1VXBKWElwYmhkR0JVT3E3VHBvdDlfVG9rZW46Ym94Y25oQ3p6T2t2Z2Z4dVVaellSdzRnOVlnXzE2NDE0MzUyOTM6MTY0MTQzODg5M19WNA" alt=""></p><p><strong>三、接下来进行环境变量的配置</strong></p><h3 id="1-右键我的电脑点击最下面的属性之后再弹框里点击高级系统设置再点击环境变量"><a class="anchor" href="#1-右键我的电脑点击最下面的属性之后再弹框里点击高级系统设置再点击环境变量">#</a> <strong>1、右键我的电脑，点击最下面的属性，之后再弹框里点击高级系统设置，再点击环境变量</strong></h3><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=N2MxZTk3NDY4Yjk0NTdmNzFlNWNkMzAyZjk1M2VlNzRfbkxkMHJHTE9FTThHWTFyOUREWHYwRGsxRGkxRW5EbVlfVG9rZW46Ym94Y25mYmNDaWRFMW1DRkZHSU84Sm5CSjBnXzE2NDE0MzUyOTM6MTY0MTQzODg5M19WNA" alt=""></p><p><strong>2、点击新建</strong></p><p>(1) 新建 -&gt; 变量名 "JAVA_HOME"，变量值 <strong>C:\Java\jdk1.8.0_05</strong> （即 JDK 的安装路径）</p><p>(2) 编辑 -&gt; 变量名 "Path"，在原变量值的最后面加上 <strong>%JAVA_HOME%\bin</strong></p><p>之后一路点击确定</p><h1 id="四-接下来进行验证看是否成功安装了java"><a class="anchor" href="#四-接下来进行验证看是否成功安装了java">#</a> <strong>四、接下来进行验证，看是否成功安装了 java</strong></h1><h3 id="1-打开cmd"><a class="anchor" href="#1-打开cmd">#</a> <strong>1、打开 cmd</strong></h3><p>使用快捷键，** (win+r) ** ，输入 cmd</p><h3 id="2-输入-java-观察是否有输出出现下面就说明这个命令是ok的"><a class="anchor" href="#2-输入-java-观察是否有输出出现下面就说明这个命令是ok的">#</a> <strong>2、输入 java 观察是否有输出，出现下面就说明这个命令是 OK 的</strong></h3><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=NzFiMWU2YWY0MjZhZjg5NGQ1NTg4YzhiMmJlNGQ1NjRfVmVFWjZ4YllNWDBaQlNoUUpPOFBSUlRpbExBMUk1ak1fVG9rZW46Ym94Y25uS1FGS1VReFhEOVg3QlpwQXQ0V09nXzE2NDE0MzUyOTM6MTY0MTQzODg5M19WNA" alt=""></p><p><strong>3、输入 java -version 观察；出现下面现象就表示 OK</strong></p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=OGYzOWQzNTBiMjYzNDA3YzU3ZGFjYmVhODk1YjJkZTZfa1hwcGM2THFOdDBvUjVHajR2cWJFb25keXRhRlVVeDBfVG9rZW46Ym94Y25WYVNXYUVUWHpPcERRcGcwdUVpWmxkXzE2NDE0MzUyOTM6MTY0MTQzODg5M19WNA" alt=""></p><p><strong>4、输入 javac，观察</strong></p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=NTE3ZjllNmViNDVlOTdjNTg2ZTIzNzJhZjY1ZWNjYzBfNG5PYU9nWUpXWXFHRWk2SldOUzA1RjI5WkJBT3dVSWxfVG9rZW46Ym94Y25XOXRJWVQxUjhWVnBIV2FBWW9FZHdmXzE2NDE0MzUyOTM6MTY0MTQzODg5M19WNA" alt=""></p><p><strong>PPS： 上面的命令，如果输入完之后，没有出现相对应的界面，说明环境变量配置的有问题；仔细去检查即可</strong></p><h1 id="六-接下来验证让我们来写一段java代码并试着运行它"><a class="anchor" href="#六-接下来验证让我们来写一段java代码并试着运行它">#</a> <strong>六、接下来验证，让我们来写一段 java 代码，并试着运行它</strong></h1><h3 id="1-首先创建一个java后缀的文件-helloworldjava文件名需与类名一致"><a class="anchor" href="#1-首先创建一个java后缀的文件-helloworldjava文件名需与类名一致">#</a> <strong>1、首先创建一个 java 后缀的文件 HelloWorld.java (文件名需与类名一致),</strong></h3><h3 id="代码如下"><a class="anchor" href="#代码如下">#</a> <strong>代码如下</strong></h3><pre><code class="language-C%23">public class HelloWorld {    public static void main(String[] args) {        System.out.println("Hello World");    }}</code></pre><h3 id="2-编辑并保存文件打开cmd控制台进入java文件的目录"><a class="anchor" href="#2-编辑并保存文件打开cmd控制台进入java文件的目录">#</a> <strong>2、编辑并保存文件，打开 cmd 控制台，进入 java 文件的目录</strong></h3><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=OWExNmJjOTFjOGVlNTZkNDM0YjYyZGExM2IxZTczYjBfbE1kNHF1dWJpNjloT1ZLTXV5UmJORTlIdkJ3Z1hJbVdfVG9rZW46Ym94Y24xdnNYSU1VTU9WbnN2TnF6MDE4dmNnXzE2NDE0MzUyOTM6MTY0MTQzODg5M19WNA" alt=""></p><p><strong>3、命令解析</strong></p><p>以上我们使用了两个命令 javac 和 java。</p><p>javac 后面跟着的是 java 文件的文件名，例如 HelloWorld.java。 该命令用于将 java 源文件编译为 class 字节码文件，如： javac HelloWorld.java。</p><p>运行 javac 命令后，如果成功编译没有错误的话，会出现一个 HelloWorld.class 的文件。</p><p>java 后面跟着的是 java 文件中的类名，例如 HelloWorld 就是类名，如: java HelloWorld。</p><p>注意：java 命令后面不要加.class。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 电脑 </category>
          
          <category> 软件配置 </category>
          
          <category> 安装教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Idea安装配置教程</title>
      <link href="computer/app/Idea%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/"/>
      <url>computer/app/Idea%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>Idea 安装配置教程</p><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbnNoYW9sdW4wNzAxL2FydGljbGUvZGV0YWlscy85MDI4NzIyMA==">IDEA 安装和使用_linshaolun0701 的博客 - CSDN 博客_idea 安装</span> IntelliJ Idea 下载与安装 (含注册码)</p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS9pZGVhLw==">IntelliJ IDEA</span> 号称当前 Java 开发效率最高的 IDE 工具。</p><p>IntelliJ IDEA 有两个版本：社区版 (Community) 和旗舰版 (Ultimate)。</p><p><strong>社区版</strong> 是免费的、开源的，但功能较少；</p><p><strong>旗舰版</strong> 提供了较多的功能</p><h3 id="intellij-idea-官网httpswwwjetbrainscomidea"><a class="anchor" href="#intellij-idea-官网httpswwwjetbrainscomidea">#</a> IntelliJ IDEA 官网：<span class="exturl" data-url="aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS9pZGVhLw==">https://www.jetbrains.com/idea/</span></h3><h3 id="1-打开官网"><a class="anchor" href="#1-打开官网">#</a> 1. 打开官网</h3><h3 id="2选择终极版本并下载安装程序"><a class="anchor" href="#2选择终极版本并下载安装程序">#</a> 2. 选择终极版本，并下载安装程序</h3><h3 id="3下载之后双击开始安装点击next"><a class="anchor" href="#3下载之后双击开始安装点击next">#</a> 3. 下载之后双击，开始安装，点击 next</h3><h3 id="4选择安装路径"><a class="anchor" href="#4选择安装路径">#</a> 4. 选择安装路径</h3><h3 id="5这里选择安装64位点击next"><a class="anchor" href="#5这里选择安装64位点击next">#</a> 5. 这里选择安装 64 位，点击 next</h3><h3 id="6默认选择点击install"><a class="anchor" href="#6默认选择点击install">#</a> 6. 默认选择，点击 install</h3><h3 id="7开始安装"><a class="anchor" href="#7开始安装">#</a> 7. 开始安装</h3><h3 id="8安装完成勾选启动"><a class="anchor" href="#8安装完成勾选启动">#</a> 8. 安装完成，勾选启动</h3><h3 id="9点击ok"><a class="anchor" href="#9点击ok">#</a> 9. 点击 OK</h3><h3 id="10点击接受"><a class="anchor" href="#10点击接受">#</a> 10. 点击接受</h3><h3 id="11激活注册打开激活网站现用-httpideacongmin-可以激活"><a class="anchor" href="#11激活注册打开激活网站现用-httpideacongmin-可以激活">#</a> 11. 激活注册（打开激活网站：现用 <span class="exturl" data-url="aHR0cDovL2lkZWEuY29uZ20uaW4=">http://idea.congm.in</span>  可以激活）</h3><p><strong>或选择 Activation code，复制下方激活码到输入框</strong></p><pre><code class="language-Apache">D87IQPUU3Q-eyJsaWNlbnNlSWQiOiJEODdJUVBVVTNRIiwibGljZW5zZWVOYW1lIjoiTnNzIEltIiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiSUkiLCJwYWlkVXBUbyI6IjIwMTktMDItMDcifSx7ImNvZGUiOiJSUzAiLCJwYWlkVXBUbyI6IjIwMTktMDItMDcifSx7ImNvZGUiOiJXUyIsInBhaWRVcFRvIjoiMjAxOS0wMi0wNyJ9LHsiY29kZSI6IlJEIiwicGFpZFVwVG8iOiIyMDE5LTAyLTA3In0seyJjb2RlIjoiUkMiLCJwYWlkVXBUbyI6IjIwMTktMDItMDcifSx7ImNvZGUiOiJEQyIsInBhaWRVcFRvIjoiMjAxOS0wMi0wNyJ9LHsiY29kZSI6IkRCIiwicGFpZFVwVG8iOiIyMDE5LTAyLTA3In0seyJjb2RlIjoiUk0iLCJwYWlkVXBUbyI6IjIwMTktMDItMDcifSx7ImNvZGUiOiJETSIsInBhaWRVcFRvIjoiMjAxOS0wMi0wNyJ9LHsiY29kZSI6IkFDIiwicGFpZFVwVG8iOiIyMDE5LTAyLTA3In0seyJjb2RlIjoiRFBOIiwicGFpZFVwVG8iOiIyMDE5LTAyLTA3In0seyJjb2RlIjoiR08iLCJwYWlkVXBUbyI6IjIwMTktMDItMDcifSx7ImNvZGUiOiJQUyIsInBhaWRVcFRvIjoiMjAxOS0wMi0wNyJ9LHsiY29kZSI6IkNMIiwicGFpZFVwVG8iOiIyMDE5LTAyLTA3In0seyJjb2RlIjoiUEMiLCJwYWlkVXBUbyI6IjIwMTktMDItMDcifSx7ImNvZGUiOiJSU1UiLCJwYWlkVXBUbyI6IjIwMTktMDItMDcifV0sImhhc2giOiI4MDI4NjgyLzAiLCJncmFjZVBlcmlvZERheXMiOjAsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZX0=-iPLvfrIl0qTga/F9rnjf0Sz6yYvw+2FWgZpcLOFbvb3CllsE2ui4+bw8emxzcYr3GyxN4/4BhfcX6gmmI4EJaTSihP+m4Oa8jZApb5zGEHENJE+I8hewQWIyiekNE7+21meJ3swPCYiTWKkUXMIVUWNfieZhqHd96dHpD335dSRCmAImgQ31qpmzemMxztu1/FAIiaUrav1VU/M0waj9B9xuhDG77PU7deSxX363RQjbmRdWBorjH6gSyUpCXnyh6Crlhtj+lC+VndAdnT4HUXXsmpCw6uLotL5Gv/TM7/fAqIjSQghlnm4vpss4Pc7xI9n07KwQE9ok4fuF3HMRUA==-MIIEPjCCAiagAwIBAgIBBTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE1MTEwMjA4MjE0OFoXDTE4MTEwMTA4MjE0OFowETEPMA0GA1UEAwwGcHJvZDN5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQC9WZuYgQedSuOc5TOUSrRigMw4/+wuC5EtZBfvdl4HT/8vzMW/oUlIP4YCvA0XKyBaCJ2iX+ZCDKoPfiYXiaSiH+HxAPV6J79vvouxKrWg2XV6ShFtPLP+0gPdGq3x9R3+kJbmAm8w+FOdlWqAfJrLvpzMGNeDU14YGXiZ9bVzmIQbwrBA+c/F4tlK/DV07dsNExihqFoibnqDiVNTGombaU2dDup2gwKdL81ua8EIcGNExHe82kjF4zwfadHk3bQVvbfdAwxcDy4xBjs3L4raPLU3yenSzr/OEur1+jfOxnQSmEcMXKXgrAQ9U55gwjcOFKrgOxEdek/Sk1VfOjvS+nuM4eyEruFMfaZHzoQiuw4IqgGc45ohFH0UUyjYcuFxxDSU9lMCv8qdHKm+wnPRb0l9l5vXsCBDuhAGYD6ss+Ga+aDY6f/qXZuUCEUOH3QUNbbCUlviSz6+GiRnt1kA9N2Qachl+2yBfaqUqr8h7Z2gsx5LcIf5kYNsqJ0GavXTVyWh7PYiKX4bs354ZQLUwwa/cG++2+wNWP+HtBhVxMRNTdVhSm38AknZlD+PTAsWGu9GyLmhti2EnVwGybSD2Dxmhxk3IPCkhKAK+pl0eWYGZWG3tJ9mZ7SowcXLWDFAk0lRJnKGFMTggrWjV8GYpw5bq23VmIqqDLgkNzuoog==</code></pre><ul><li>1</li><li>2</li><li>1</li><li>2</li></ul><h3 id="12注册完成之后选择主题点击下一步"><a class="anchor" href="#12注册完成之后选择主题点击下一步">#</a> 12. 注册完成之后选择主题，点击下一步</h3><h3 id="13这个界面是配置idea支持的功能"><a class="anchor" href="#13这个界面是配置idea支持的功能">#</a> 13. 这个界面是配置 idea 支持的功能</h3><blockquote><p>我们可以自行选择，因为如果使用它默认的有很多没用的插件，我们都用不着，会让你的 idea 特别卡，所以我们最好是按照自己的需求定制功能插件，首先我们点击 java Frameworks 下面的 Customize 来配置 Java 相关的</p></blockquote><h3 id="14点击customize进入"><a class="anchor" href="#14点击customize进入">#</a> 14. 点击 Customize 进入</h3><h3 id="15选择自己需要的点击保存返回继续选择其他的都是以同样的方式点击customize来配置"><a class="anchor" href="#15选择自己需要的点击保存返回继续选择其他的都是以同样的方式点击customize来配置">#</a> 15. 选择自己需要的，点击保存返回，继续选择其他的，都是以同样的方式点击 Customize 来配置</h3><h3 id="16这里选择构建工具"><a class="anchor" href="#16这里选择构建工具">#</a> 16. 这里选择构建工具</h3><h3 id="17配置web开放相关"><a class="anchor" href="#17配置web开放相关">#</a> 17. 配置 web 开放相关</h3><h3 id="18配置版本控制"><a class="anchor" href="#18配置版本控制">#</a> 18. 配置版本控制</h3><h3 id="19选择测试工具"><a class="anchor" href="#19选择测试工具">#</a> 19. 选择测试工具</h3><h3 id="20选择服务器"><a class="anchor" href="#20选择服务器">#</a> 20. 选择服务器</h3><h3 id="21选择云相关的"><a class="anchor" href="#21选择云相关的">#</a> 21. 选择云相关的</h3><h3 id="22如果想直接禁言某一个模块的所以功能插件可以直接点击disable-all"><a class="anchor" href="#22如果想直接禁言某一个模块的所以功能插件可以直接点击disable-all">#</a> 22. 如果想直接禁言某一个模块的所以功能插件，可以直接点击 Disable All</h3><h3 id="23选择uml"><a class="anchor" href="#23选择uml">#</a> 23. 选择 UML</h3><h3 id="24配置好之后点击next这里配置的功能以后也可以修改所以不用担心"><a class="anchor" href="#24配置好之后点击next这里配置的功能以后也可以修改所以不用担心">#</a> 24. 配置好之后点击 next，这里配置的功能，以后也可以修改，所以不用担心</h3><h3 id="25安装插件以后再安装点击开始使用"><a class="anchor" href="#25安装插件以后再安装点击开始使用">#</a> 25. 安装插件，以后再安装，点击开始使用</h3><h3 id="26启动界面很炫"><a class="anchor" href="#26启动界面很炫">#</a> 26. 启动界面，很炫</h3><h3 id="27这个界面就可以配置"><a class="anchor" href="#27这个界面就可以配置">#</a> 27. 这个界面就可以配置</h3><h3 id="28点击configure下面的setting"><a class="anchor" href="#28点击configure下面的setting">#</a> 28. 点击 Configure 下面的 Setting</h3><h3 id="29这里是设置界面"><a class="anchor" href="#29这里是设置界面">#</a> 29. 这里是设置界面</h3><blockquote><p>根据自己需求配置，现在不配置也行，以后也可以再配置，这里我们不配置，点击下面的 Cancel 返回</p></blockquote><h3 id="30点击configure下面的plugins可以进入这个界面"><a class="anchor" href="#30点击configure下面的plugins可以进入这个界面">#</a> 30. 点击 Configure 下面的 Plugins 可以进入这个界面</h3><blockquote><p>这里就是前面配置的功能插件，在这里也可以配置，以后也可以配置，点击 Cancel 返回</p></blockquote><h3 id="31所有配置完成后这里点击创建新项目"><a class="anchor" href="#31所有配置完成后这里点击创建新项目">#</a> 31. 所有配置完成后，这里点击创建新项目</h3><h3 id="32选择java项目就可以了"><a class="anchor" href="#32选择java项目就可以了">#</a> 32. 选择 Java 项目就可以了</h3><blockquote><p>注意:java Enterprise 是 JavaEE 项目，我们先不管，先创建一个 Java 的简单项目，右边还要配置 JDK, 选择你 JDK 的安装目录</p></blockquote><h3 id="33点击next"><a class="anchor" href="#33点击next">#</a> 33. 点击 next</h3><h3 id="34填上项目名和项目保存地址点击完成"><a class="anchor" href="#34填上项目名和项目保存地址点击完成">#</a> 34. 填上项目名和项目保存地址，点击完成</h3><h3 id="35点击ok"><a class="anchor" href="#35点击ok">#</a> 35. 点击 OK</h3><h3 id="35双击hello这个项目就可以将项目展开"><a class="anchor" href="#35双击hello这个项目就可以将项目展开">#</a> 35. 双击 hello 这个项目就可以将项目展开</h3><h3 id="36在src下创建package"><a class="anchor" href="#36在src下创建package">#</a> 36. 在 src 下创建 package</h3><h3 id="37在新建的package下面创建一个class"><a class="anchor" href="#37在新建的package下面创建一个class">#</a> 37. 在新建的 package 下面创建一个 class</h3><h3 id="38这里你可以选择创建类接口或者其他"><a class="anchor" href="#38这里你可以选择创建类接口或者其他">#</a> 38. 这里你可以选择创建类，接口或者其他</h3><h3 id="39写上代码右键运行"><a class="anchor" href="#39写上代码右键运行">#</a> 39. 写上代码，右键运行</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 电脑 </category>
          
          <category> 软件配置 </category>
          
          <category> 安装教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Git安装教程</title>
      <link href="computer/app/Git%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
      <url>computer/app/Git%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>Git 安装教程</p><h2 id="获取git安装程序"><a class="anchor" href="#获取git安装程序">#</a> <strong>获取 Git 安装程序</strong></h2><p>到 Git 官网下载，网站地址：<span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb3dubG9hZHMlRUYlQkMlOEMlRTUlQTYlODIlRTQlQjglOEIlRTUlOUIlQkUlRUYlQkMlOUE=">https://git-scm.com/downloads，如下图：</span></p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=MDBiMWNlNWI1N2M2ZDM1ZjI2MmMyN2E3NGFkZDhiMzNfZVUybVhDNXVzdWVSQVFRR0xINTJPNDVDSmNZRkY3MTBfVG9rZW46Ym94Y242VnlyTlhMNEwxcTQ1U3hYNW1RZW1nXzE2NDE0MzUxMTg6MTY0MTQzODcxOF9WNA" alt=""></p><p>因为我们是用 Windows 系统上的浏览器访问的，Git 官网自动之别到了我使用的操作系统，所以右侧直接显示下载使用 Windows 系统的最新版本（如果识别错误，可以在中间选择系统），点击即可下载。我下载的是 2.24.0 for Windows，文件名称是 “Git-2.24.0.2-64-bit.exe”。下载到电脑上之后，鼠标双击这个文件即可进入安装过程。</p><h2 id="git安装过程"><a class="anchor" href="#git安装过程">#</a> <strong>Git 安装过程</strong></h2><p>双击看到的第一个界面如下图：</p><h3 id="01-使用许可声明"><a class="anchor" href="#01-使用许可声明">#</a> <strong>01、使用许可声明</strong></h3><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=ZWJkYTkxMmIxYTVhNzAzOTYyYzllZTA1MDI5M2M5MTVfbDU3dGtrd1VPMm5rOEdHMHgzdjg3aGVVUFBFYjg4TUNfVG9rZW46Ym94Y25Ia0hPUnpqTTg4T1dmeTZ3eE9XdUllXzE2NDE0MzUxMTg6MTY0MTQzODcxOF9WNA" alt=""></p><p>点击 “Next” 进入下图页面：</p><h3 id="02-选择安装路径"><a class="anchor" href="#02-选择安装路径">#</a> <strong>02、选择安装路径</strong></h3><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=NWI4NjkzYzBmZTc0MmQ0ZDE0NGUzMjRlMjlmYmYwY2VfdUZ2TlJnN0RGNDJsZFl4QkJ2QVdSZmwxMG9qdWxVRjZfVG9rZW46Ym94Y25qenZiRWxqNkhMWWlRYVBPNTBWd0JkXzE2NDE0MzUxMTg6MTY0MTQzODcxOF9WNA" alt=""></p><p>在输入框内输入想要安装到的本机路径，也就是实际文件夹位置，或点击 “Browse...” 选择已经存在的文件夹，然后点击 “Next” 按钮继续，进入下图界面：</p><h3 id="03-选择安装组件"><a class="anchor" href="#03-选择安装组件">#</a> <strong>03、选择安装组件</strong></h3><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=MGNiYWI4NDg1YmViNzI3MjMzMDA3ZmJjYjBkNTMyNjJfblNQdmtib21DM2hhSlNmbTlIU3BNTmFnbVBUdlBTSnVfVG9rZW46Ym94Y25ESU9pQVk2eTVYbGNNU2VDeHhiemFjXzE2NDE0MzUxMTg6MTY0MTQzODcxOF9WNA" alt=""></p><p>上图红框内的选项是默认勾选的，建议不要动。绿色框 1 是决定是否在桌面创建快捷方式的。绿色框 2 是决定在所有控制台窗口中使用 TrueType 字体和是否每天检查 Git 是否有 Windows 更新的。这些根据自己需要选择。</p><p>点击 “Next” 按钮进入下图界面：</p><h3 id="04-选择开始菜单页"><a class="anchor" href="#04-选择开始菜单页">#</a> <strong>04、选择开始菜单页</strong></h3><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=ZTdjM2E5ZGVkMWNmZmI1ZDY3NTg5NGQyNzk4OWZjZjhfTHJISENpVGZtbGE5akJpUjFZek9GcEdxUHVyY0lVTXhfVG9rZW46Ym94Y25uRHdQTmtES3NEejVReFhTcFNPamxkXzE2NDE0MzUxMTg6MTY0MTQzODcxOF9WNA" alt=""></p><p>这个界面是创建开始菜单中的名称，不需要修改，直接点 “Next” 按钮继续到下图的界面：</p><h3 id="05-选择git文件默认的编辑器"><a class="anchor" href="#05-选择git文件默认的编辑器">#</a> <strong>05、选择 Git 文件默认的编辑器</strong></h3><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=NGM3ZWM5NjUwYmViZDVjMjI5YjQ3ZTgyNWFlM2Q3MTFfa29CUGMwaXBPeFFSY0V0ajVSenF1NmtHZWNWZ0ptbEpfVG9rZW46Ym94Y25zdlJWSkQyUWliSVFjRXhENnQ3R3liXzE2NDE0MzUxMTg6MTY0MTQzODcxOF9WNA" alt=""></p><p>这个页面是在选择 Git 文件默认的编辑器，很少用到，所以默认 Vim 即可，直接点 “Next” 按钮继续到下图的界面：</p><h3 id="06-调整您的path环境"><a class="anchor" href="#06-调整您的path环境">#</a> <strong>06、调整您的 PATH 环境</strong></h3><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=NTUyOTZmNjU0MTFkNjg2Y2FmMDI2MGJmMDRhZjlkMjZfV0VGSnFNN3dUVDJvTnFZNnhGbGkzbnBRTklaSGVmRGRfVG9rZW46Ym94Y25ITmlVVTJFVUFzMkx3OE9EamRMY1ZlXzE2NDE0MzUxMTg6MTY0MTQzODcxOF9WNA" alt=""></p><p>这个界面是调整您的 PATH 环境。</p><p>第一种配置是 “仅从 Git Bash 使用 Git”。这是最安全的选择，因为您的 PATH 根本不会被修改。您只能使用 Git Bash 的 Git 命令行工具。但是这将不能通过第三方软件使用。</p><p>第二种配置是 “从命令行以及第三方软件进行 Git”。该选项被认为是安全的，因为它仅向 PATH 添加了一些最小的 Git 包装器，以避免使用可选的 Unix 工具造成环境混乱。</p><p>您将能够从 Git Bash，命令提示符和 Windows PowerShell 以及在 PATH 中寻找 Git 的任何第三方软件中使用 Git。这也是推荐的选项。</p><p>第三种配置是 “从命令提示符使用 Git 和可选的 Unix 工具”。警告：这将覆盖 Windows 工具，如 “ find 和 sort ”。只有在了解其含义后才使用此选项。</p><p>我选择推荐的选项第二种配置，点击 “Next” 按钮继续到下图的界面：</p><h3 id="07-选择https后端传输"><a class="anchor" href="#07-选择https后端传输">#</a> <strong>07、选择 HTTPS 后端传输</strong></h3><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=NDlmYTlkOWE3MWE5ZmU5MGRhMWZkZGZiMWVkMjlkMmZfNGdmQzBLN2RQRklwa3pkZmpNUnFNNkt2OTRvSzgwNUhfVG9rZW46Ym94Y25XVmtyb1FTRHA4YmVqb1ZqRWtOc1RjXzE2NDE0MzUxMTg6MTY0MTQzODcxOF9WNA" alt=""></p><p>这个界面是选择 HTTPS 后端传输。</p><p>第一个选项是 “使用 OpenSSL 库”。服务器证书将使用 ca-bundle.crt 文件进行验证。这也是我们常用的选项。</p><p>第二个选项是 “使用本地 Windows 安全通道库”。服务器证书将使用 Windows 证书存储验证。此选项还允许您使用公司的内部根 CA 证书，例如通过 Active Directory Domain Services 。</p><p>我使用默认选项第一项，点击 “Next” 按钮继续到下图的界面：</p><h3 id="08-配置行尾符号转换"><a class="anchor" href="#08-配置行尾符号转换">#</a> <strong>08、配置行尾符号转换</strong></h3><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=NzcwNzEzNDQwZjAxOWRjNmUxMzlhNTdiODZlMmMwZjVfNUVRdlVjOUY1eHl2bldWMFdmaUVFa01nUkV5RWhRaTRfVG9rZW46Ym94Y25ldmRBSTJOelA2NlZxUDB5bFlTNkRmXzE2NDE0MzUxMTg6MTY0MTQzODcxOF9WNA" alt=""></p><p>这个界面是配置行尾符号转换。</p><p>第一个选项是 “签出 Windows 风格，提交 Unix 风格的行尾”。签出文本文件时，Git 会将 LF 转换为 CRLF。提交文本文件时，CRLF 将转换为 LF。对于跨平台项目，这是 Windows 上的推荐设置（“ core.autocrlf” 设置为 “ true”）</p><p>第二个选项是 “按原样签出，提交 Unix 样式的行尾”。签出文本文件时，Git 不会执行任何转换。 提交文本文件时，CRLF 将转换为 LF。对于跨平台项目，这是 Unix 上的建议设置（“ core.autocrlf” 设置为 “ input”）</p><p>第三种选项是 “按原样签出，按原样提交”。当签出或提交文本文件时，Git 不会执行任何转换。不建议跨平台项目选择此选项（“ core.autocrlf” 设置为 “ false”）</p><p>我选择第一种选项，点击 “Next” 按钮继续到下图的界面：</p><h3 id="09-配置终端模拟器以与git-bash一起使用"><a class="anchor" href="#09-配置终端模拟器以与git-bash一起使用">#</a> <strong>09、配置终端模拟器以与 Git Bash 一起使用</strong></h3><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=ZjJhZmEzY2E4NjY5MWY0N2ZhY2ExMzQzNmU1NGIwMDJfWEN1UjhoeElNTmtZYVlhaTZ5Nk1jdXVXZWtLRElqMHdfVG9rZW46Ym94Y25EeGNINHhkbnVncXViWnNyWFh0R2RjXzE2NDE0MzUxMTg6MTY0MTQzODcxOF9WNA" alt=""></p><p>这个界面是配置终端模拟器以与 Git Bash 一起使用。</p><p>第一个选项是 “使用 MinTTY（MSYS2 的默认终端）”。Git Bash 将使用 MinTTY 作为终端模拟器，该模拟器具有可调整大小的窗口，非矩形选择和 Unicode 字体。Windows 控制台程序（例如交互式 Python）必须通过 “ winpty” 启动才能在 MinTTY 中运行。</p><p>第二个选项是 “使用 Windows 的默认控制台窗口”。Git 将使用 Windows 的默认控制台窗口（“cmd.exe”），该窗口可以与 Win32 控制台程序（如交互式 Python 或 node.js）一起使用，但默认的回滚非常有限，需要配置为使用 unicode 字体以正确显示非 ASCII 字符，并且在 Windows 10 之前，其窗口不能自由调整大小，并且只允许矩形文本选择。</p><p>我选择默认的第一种选项，点击 “Next” 按钮继续到下图的界面：</p><h3 id="10-配置配置额外的选项"><a class="anchor" href="#10-配置配置额外的选项">#</a> <strong>10、配置配置额外的选项</strong></h3><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=YzU1YTEyNmJiOTAxMjRlMmFjNDcwYjMzZTg1OTZkODNfcElhNDVPbjl0c2lFeXUzeE5vZ29tZXJRY1lENkRQUmVfVG9rZW46Ym94Y25iN3c2a0NLd1U4UHlwWWgybVB0S0kwXzE2NDE0MzUxMTg6MTY0MTQzODcxOF9WNA" alt=""></p><p>这个界面是配置配置额外的选项。</p><p>第一个选项是 “启用文件系统缓存”。文件系统数据将被批量读取并缓存在内存中用于某些操作（“core.fscache” 设置为 “true”）。 这提供了显著的性能提升。</p><p>第二个选项是 “启用 Git 凭证管理器”。Windows 的 Git 凭证管理器为 Windows 提供安全的 Git 凭证存储，最显着的是对 Visual Studio Team Services 和 GitHub 的多因素身份验证支持。 （<span class="exturl" data-url="aHR0cDovL3huLS1kdzJhdDl4Lk5FVA==">需要.NET</span> Framework v4.5.1 或更高版本）。</p><p>第三个选项是 “启用符号链接”。启用符号链接（需要 SeCreateSymbolicLink 权限）。请注意，现有存储库不受此设置的影响。</p><p>我勾选默认的第一、第二选项，点击 “Next” 按钮继续到下图的界面：</p><h3 id="11-配置实验选项"><a class="anchor" href="#11-配置实验选项">#</a> <strong>11、配置实验选项</strong></h3><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=YTZlNmIzNzFmOThlYjViZmViNzExZmZkYzhiOTRhYTNfUThtZkNwYUp0WGM1SlFrODFrM3IyVlhSajl1enRqdnNfVG9rZW46Ym94Y25pSDRSZnYxaVZrUU4xWnd3aVJEbTFiXzE2NDE0MzUxMTg6MTY0MTQzODcxOF9WNA" alt=""></p><p>这个界面是配置实验选项。</p><p>启用实验性的内置添加 -i /-p。（新！）使用实验性的内置交互式 add（“git add -i” 或 “ git add -p”）。这使其速度更快（尤其是启动！），但尚未被认为是可靠的。</p><p>默认不勾选，直接点击 “Next” 按钮继续到下图的安装进度界面：</p><h3 id="12-安装进度指示"><a class="anchor" href="#12-安装进度指示">#</a> <strong>12、安装进度指示</strong></h3><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=ZjM1MDFhMjdlZDI3OGMxZjg3NzEyOGE4Y2RkOGI0ZDBfdXk0S2pnTUlnRWxleENlTDZ3RVluQjB4SlRKUEg4NVZfVG9rZW46Ym94Y241S29VbmJacVdNd1hISmlOYnVwWHFlXzE2NDE0MzUxMTg6MTY0MTQzODcxOF9WNA" alt=""></p><p>安装进度结束之后，会出现下图的完成 Git 安装向导界面：</p><h3 id="13-安装完成"><a class="anchor" href="#13-安装完成">#</a> <strong>13、安装完成</strong></h3><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=ZGM1ODA5MTUzNDJkMDE4ZjZkNDQ4MGI0MDYyNDdmMjdfdHJVNmtnU2xYeTI2alNSVGkwN3RCNzJhS3BpYXQ0SlFfVG9rZW46Ym94Y24ySklNWjE5TFFPSlZxOE5GdFNERWlmXzE2NDE0MzUxMTg6MTY0MTQzODcxOF9WNA" alt=""></p><p>在这个界面，可以勾选是否启动启动 Git Bash 和是否查看发行说明，然后点 “Finish” 按钮退出安装界面。</p><h3 id="14-启动测试"><a class="anchor" href="#14-启动测试">#</a> <strong>14、启动测试</strong></h3><p>到此，Git 的安装完成，可以在开始菜单中看到 Git 的三个启动图标（Git Bash、Git CMD (Deprecated)、Git GUI）。</p><p>Git Bash，是 Git 配套的一个控制台，点击打开如下图：</p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=M2RkYWQ2ZmMzMTY0ZGUwNDlmYzFiMjZiMDk5ODFmZjZfdjBBYWJhTUxEWnVwUTY5YjJucmZaZWVIcVV6eE11R2JfVG9rZW46Ym94Y25NUnpSRWlTYUZzWDVJMTJyUnhHWkpjXzE2NDE0MzUxMTg6MTY0MTQzODcxOF9WNA" alt=""></p><p>Git CMD (Deprecated)，是通过 CMD 使用 Git（不推荐使用），点击打开如下图：</p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=ZWJlNDlhYWQ2OTRhZmQ2NWJiZWIxMzI1NWFmNzJiNDRfNklGTTFoaWtORXF2QXVIbFhTdFphOVNxRnNTS29KVWVfVG9rZW46Ym94Y254dGZTMHBkU3pOUGRWN3dhYjhzQnpjXzE2NDE0MzUxMTg6MTY0MTQzODcxOF9WNA" alt=""></p><p>Git GUI，是 Git 的可视化操作工具，点击打开如下图：</p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=ZGNjOTQ4ZTE5YzUyM2YxMDY3MjJiNmYwM2E4NWJiZTlfT0N1TmxJN0JJMHg5Tm5EZDRFamdvbDZnTzYyRVRINklfVG9rZW46Ym94Y25PcXpXUUk5UmdZVndwNEgzRUVzcVBjXzE2NDE0MzUxMTg6MTY0MTQzODcxOF9WNA" alt=""></p><p></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 电脑 </category>
          
          <category> 软件配置 </category>
          
          <category> 安装教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>cmder使用配置教程</title>
      <link href="computer/app/cmder%E4%BD%BF%E7%94%A8%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/"/>
      <url>computer/app/cmder%E4%BD%BF%E7%94%A8%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>cmder 使用配置教程</p><h2 id="1-安装-cmder"><a class="anchor" href="#1-安装-cmder">#</a> 1. 安装 Cmder</h2><p>打开 Cmder 官网（ <strong><span class="exturl" data-url="aHR0cHM6Ly9jbWRlci5uZXQv">https://cmder.net</span></strong> ），下拉页面找到 <strong>Download</strong> 项选择下载，下载的时候，两个版本，分别是 mini 与 full 版；唯一的差别在于有没有内建 git-for-windows 工具，这是 Git for Windows 的标准配备；全安装版 Cmder 自带了 msysgit，除了 git 本身这个命令之外， cmder 完全支持 Linux 命令行，里面可以使用大量的 linux 命令，比如 grep、curl (没有 wget)、vim、grep、tar、unzip、ssh、ls、bash、perl 等，而且可以多开，快捷键复制粘贴，分屏等，功能非常强大</p><p>这里选择 full 版本点击下载。下载的是 Cmder 的压缩包，解压即可以使用。</p><h3 id="启动-cmder"><a class="anchor" href="#启动-cmder">#</a> <strong>启动 Cmder</strong></h3><p>Cmder 解压后，双击 Cmder.exe 即可运行。</p><p>如果每次都进入到 Cmder 解压目录双击 Cmder.exe 打开的方式很麻烦，可以使用下面几种方式很好的解决问题；</p><ul><li>1、 <strong>把 Cmder 加到环境变量</strong> 。把 Cmder.exe 存放的目录添加到系统环境变量；加完之后，win+r 然后输入 cmder 即可。</li><li>2、 <strong>添加 cmder 到右键菜单。</strong> 添加后在任意文件夹中即可打开 Cmder，上一步的把 Cmder 加到环境变量就是为此服务的，在管理员权限的终端输入以下语句即可: <strong>Cmder.exe /REGISTER ALL</strong></li><li>3、 <strong>为 Cmder.exe 创建快捷方式</strong> ，右击 Cmder.exe 选择 "创建快捷方式" 点击即可，或者把创建的 ** 快捷方式 <strong>放到 ** C:\Windows\System32，</strong> 加完之后，win+r 然后输入 cmder 即可。</li></ul><h3 id="cmder-常用功能介绍"><a class="anchor" href="#cmder-常用功能介绍">#</a> Cmder 常用功能介绍</h3><p>cmder 功能极为强大，这里就先说下常用的功能：</p><ul><li><strong>1. Cmder 常用快捷键</strong></li></ul><pre><code class="language-Bash">tab           自动路径补全； ctrl + t      建立新页签；ctrl + w      关闭页签;ctrl + tab    切换页签;ctrl + 1      快速切换到第1个页签ctrl + n      快速切换到第n个页签( n值无上限)alt + F4      关闭所有页签 ctr + r       历史命令搜索alt + enter   切换到全屏状态 alt + shift + 1    开启 cmd.exealt + shift + 2    开启 powershell.exealt + Shift + 3    开启 powershell.exe (系统管理员权限)</code></pre><ul><li><ol start="2"><li>可在 <strong>视窗内</strong> 搜寻 画面上 出现过的任意关键字。</li></ol></li><li><ol start="3"><li>新增 <strong>页签</strong> 按钮。</li></ol></li><li><ol start="4"><li>切换 <strong>页签</strong> 按钮。</li></ol></li><li><ol start="5"><li><strong>锁定</strong>  <strong>视窗</strong> ，让视窗无法再输入。</li></ol></li><li><ol start="6"><li>切换 视窗 是否提供卷轴功能，启动时可查询之前显示过的内容。</li></ol></li><li><ol start="7"><li>按下滑鼠左键可开启系统选单，滑鼠右键可开启工具选项视窗。 Win+Alt+P  ：开启 <strong>工具选项</strong> 视窗</li></ol></li></ul><p><strong>cmder 分屏功能： ctrl + t  或者 点击 右下角 + 号</strong></p><p><strong>分屏功能 快捷键 设置：</strong></p><h3 id="cmder-进阶功能"><a class="anchor" href="#cmder-进阶功能">#</a> Cmder 进阶功能</h3><ul><li>Cmder 增加了 alias 功能：可以给 <strong>超长又难以记忆的指令</strong> 起一个 <strong>别名</strong>  <strong>，</strong> 输入 **alias ** 可以查看已有的  <strong>别名</strong> 。打开安装目录 config/user-aliases.cmd 文件，直接修改。自定义 aliases：打开 Cmder 目录下的 config 文件夹，里面的 aliases 文件就是我们可以配置的别名文件，直接修改。</li><li><pre><code>这里将 ls 命令的别名按下列方式修改，添加至文件末尾，就可以在 ls 命令下显示中文，同时增强命令并添加颜色区分。</code></pre></li><li><pre><code>    l=ls --show-control-chars</code></pre></li><li><pre><code>    la=ls -aF --show-control-chars</code></pre></li><li><pre><code>    ll=ls -alF --show-control-chars</code></pre></li><li><pre><code>    ls=ls --show-control-chars -F</code></pre></li><li>主控台文字自动放大缩小功能，只要按下 <strong>Ctrl + 滑鼠滚轮</strong> 就可以办到，还有 up 向上翻历史命令。</li><li>鼠标选中自动复制到剪切板。直接 鼠标右键 即可 粘贴，或者使用 Ctrl + v 进行粘贴。</li></ul><h2 id="2-cmder-设置"><a class="anchor" href="#2-cmder-设置">#</a> 2. Cmder 设置</h2><p><strong>右下角 的 三杠</strong> ，然后选择  **Settings ** ，或者 使用快捷键 <strong>Windows+Alt+p</strong> 打开 <strong>设置</strong></p><h3 id="解决文字重叠"><a class="anchor" href="#解决文字重叠">#</a> <strong>解决文字重叠</strong> ：</h3><p>Win + ALT + P 打开设置界面 monospce，去掉勾勾即可。</p><h3 id="设置编码解决中文乱码"><a class="anchor" href="#设置编码解决中文乱码">#</a> <strong>设置编码，解决中文乱码</strong></h3><p>** 设置：set LC_ALL=zh_CN.UTF-8 **   或者    <strong>set LANG=zh_CN.UTF-8</strong></p><p><strong>查看 git log 时乱码</strong></p><p>在 Startup ---&gt; Environment 中添加下面的语句：</p><pre><code class="language-C%2B%2B">set LANG=zh_CN.UTF-8</code></pre><p>然后执行下面的命令，来配置 git log 的输出</p><pre><code class="language-JavaScript">git config --global i18n.logoutputencoding utf-8</code></pre><blockquote><p>或者在 .gitconfig 文件中配置</p></blockquote><blockquote><p>更多乱码问题见： <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1aXlpbmcxMjM0NTYvYXJ0aWNsZS9kZXRhaWxzLzYyODgxNDAw">cmder 中文乱码 - CSDN 博客</span></p></blockquote><p><strong>设置中文界面</strong> ： 选择   **General ** ---&gt; Interface language ---&gt; zh: 简体中文</p><h3 id="设置为默认终端"><a class="anchor" href="#设置为默认终端">#</a> <strong>设置为默认终端</strong></h3><p>setting ---&gt; 集成 ---&gt; 默认终端 ---&gt; 强制使用 ConEmu 作为控制台应用程序的默认终端。如果允许某些程序出现错误，需要关闭此选项；比如 mkcert。</p><ul><li>图中绿色设置可以强制将 cmder 注册成 Windows 的默认终端</li><li><blockquote><p>设置此选项后，系统启动后就会生效，且，即使你打开的是 cmd，也会被放到 cmder 的窗口中执行</p></blockquote></li><li>红色选项可以解决每次关闭控制台时，弹出确认关闭的弹窗</li></ul><p><strong>窗口位置大小记忆</strong> ：勾选这两个设置，只需要设置一次，下次会自动记住上次终端在桌面出现的位置和窗口大小</p><h3 id="设置-vi-模式下-esc-键最小化窗口的问题"><a class="anchor" href="#设置-vi-模式下-esc-键最小化窗口的问题">#</a> <strong>设置 vi 模式下 ESC 键最小化窗口的问题</strong></h3><ul><li>将图中红色改成除了总是的其他选项，否则使用 vi 时会出现无法切换模式的问题</li><li>勾选绿色的选项可以解决打开多个终端，<strong>任务栏显示多个窗口</strong>的问题</li></ul><h3 id="解决粘贴多行文本时的弹窗"><a class="anchor" href="#解决粘贴多行文本时的弹窗">#</a> <strong>解决粘贴多行文本时的弹窗</strong></h3><p>例如在终端中执行多行 SQL 语句，总会弹出提示，勾选选项可以解决</p><h3 id="将命令提示改成"><a class="anchor" href="#将命令提示改成">#</a> <strong>将命令提示改成 $</strong></h3><p>默认的命令提示符是 λ, 大家都知道 Linux 是 $，这里提供一下修改的方法，并不是必须的</p><ul><li><ol><li>首先在 cmder 的安装目录下，找到 vendor / 目录，然后找到 clink.lua 文件</li></ol></li><li><ol start="2"><li>打开后可以 Ctrl+F 查找下面的字段 local lambda =</li></ol></li><li><ol start="3"><li>将 local lambda ="" 的值替换成 $</li></ol></li></ul><pre><code class="language-Ruby">可以修改文件 ${CMDER_HOME}\vendor\clink.lua    if env == nil then        lambda = "λ"    else        lambda = "("..env..") λ"    end改成    if env == nil then        lambda = "$"    else        lambda = "("..env..") $"    end</code></pre><h3 id="将-idea-的-terminal-终端换成-cmder"><a class="anchor" href="#将-idea-的-terminal-终端换成-cmder">#</a> 将 Idea 的 Terminal 终端换成 cmder</h3><ol><li>在 idea 中打开其他设置界面，在 idea 中 settings 是对当前项目生效，Other Settings 是对所有项目生效</li><li>修改 shell Path 的路径，替换成下面的内容</li></ol><p>注意将 cmder 安装目录换成你的安装目录</p><pre><code class="language-Python">//这种方式比较可靠，避免了环境变量失效的问题"cmd.exe" /k ""你的cmder安装目录\vendor\init.bat"" //或者，这个需要有环境变量"cmd.exe" /k ""%环境变量配置的cmder home目录名称%\vendor\init.bat""</code></pre><ol start="3"><li>再次打开 Terminal 终端就可以使用 Linux 命令了</li></ol><h3 id="将-vscode-的-terminal-终端设置成-cmder"><a class="anchor" href="#将-vscode-的-terminal-终端设置成-cmder">#</a> <strong>将 vscode 的 Terminal 终端设置成 cmder</strong></h3><p>1) 打开设置</p><ol start="2"><li>搜索 code save, 点击打开设置 json 文件</li></ol><p>3) 将下面的代码粘贴到文件中，修改为自己需要的内容。注意：修改 cmder 的安装目录为自己的安装目录</p><pre><code class="language-Python">// 设置终端为cmder"terminal.integrated.shell.windows": "cmd.exe","terminal.integrated.env.windows": {    //设置cmder的根目录    "CMDER_ROOT": "cmder的根目录" }, "terminal.integrated.shellArgs.windows": [ "/k", //设置启动初始化目录 "cmder的根目录\\vendor\\init.bat" ], //下面的设置可以不需要 //终端颜色配置 "workbench.colorCustomizations": { //可以将鼠标放到下面的色号上根据自己的偏好进行选择 "terminal.foreground": "#37FF13", "terminal.background": "#2b2424" }, "terminal.integrated.cursorBlinking": true, //设置terminal中的行高 "terminal.integrated.lineHeight": 1.1, "terminal.integrated.letterSpacing": 0.1, "terminal.integrated.fontSize": 12, //字体大小设置 "terminal.integrated.fontFamily": "monaco", //字体设置 "terminal.integrated.shell.linux": "/bin/zsh"</code></pre><ol start="4"><li>Ctrl+J 打开终端，就可以使用了</li></ol><h3 id="cmder-启动选项"><a class="anchor" href="#cmder-启动选项">#</a> Cmder 启动选项</h3><p>默认选择的启动项应该是 {cmd::Cmder} 这个命名任务，我们可以更改成其它的命令任务或者直接切换到其它的启动项。</p><p>默认的是 cmd，这里演示设置 PowerShell 的方法。也可使 设置 默认使用 bash，这个看个人需求。</p><h3 id="自定义启动目录"><a class="anchor" href="#自定义启动目录">#</a> 自定义启动目录</h3><p>下面就来克隆现有的 {cmd::Cmder} 添加一个设置自定义的启动目录的任务 (Task)：</p><ul><li>任务参数：下面来看  "Task parameters" 命令参数，阅读实例可知参数 /icon 指定图标位置，/dir 指定启动目录，所以我们可以添加下面的参数：/icon "% CMDER_ROOT%\icons\cmder.ico" /dir "C:\Users\Fan"</li><li>记得在 startup 的 "Specified named task" 处选择 cmd::diy1</li><li>保存设置，退出，重新打开 cmder 查看效果</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 电脑 </category>
          
          <category> 软件配置 </category>
          
          <category> 安装教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>win10上安装 Emscripten 安装</title>
      <link href="computer/app/win10%E4%B8%8A%E5%AE%89%E8%A3%85-Emscripten-%E5%AE%89%E8%A3%85/"/>
      <url>computer/app/win10%E4%B8%8A%E5%AE%89%E8%A3%85-Emscripten-%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>背景</p><p><strong>WebAssembly 的出现为 Web 开发者打开了一扇新的大门</strong> 。在去年，wasm 对你来说也许还仅是技术文章中的一个常见名词，你压根想不到他会在浏览器中得到怎样的应用，什么时候会被大公司真正用起来。 <strong>在今年，你很有可能已在不知不觉中成为 wasm 的使用者了</strong> 。目前国内外越来越多的团队基于 wasm 进行了业务实践</p><p>一、Emscripten 是什么？</p><p>Emscripten 编译器，是 WebAssembly 开发的重要工具之一，主要是通过 emcc（Emscripten Compiler Frontend）来工作的。这是个命令行工</p><p>二、安装步骤</p><p>1. 环境准备</p><p>git 2.32.0 python 3.7</p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=MmM5MGFkN2JhODAxZjc0MmZkYzQzZDM1NGI4NWQ2OTVfSVFvUE0yTXZCSk5LWEthNzVqa0FzWm5jOTBBemJtU05fVG9rZW46Ym94Y250ZFJuUElFdkRTaGdwSTRlaEZrZ21nXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=YWI1YmY5YTQxNTg5YmYxNjg1ZWQ3NTk1ZTlmNWM4ZTFfcHZibHJiYktqOExNZlFCOGtiMzNHcTlRRktwUEhvdjRfVG9rZW46Ym94Y25PNElidEVBTXZaRGdMNnZESnJJWDhnXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p>2. 安装</p><p>创建文件夹</p><p>python</p><p>mkdir d:\WebAssemblyTestmkdir</p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=NzYyOGRkMzhhZThjNWFhNWRkYTIzZTUwODJhMTYyNjRfWmw3MGxEWEpIUExKS1NHNEx2Q0VWWkwwMUdwb1pQRHFfVG9rZW46Ym94Y25nUGllczdYZDhHREFNUFcyQ3Mwb1lkXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p>进入目录🧐</p><p>python</p><p>cd WebAssemblyTestmkdir\</p><p>Emscripten 环境安装</p><p>python</p><p>git clone <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Vtc2NyaXB0ZW4tY29yZS9lbXNkay5naXQ=">https://github.com/emscripten-core/emsdk.git</span></p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=YTJkZmMwZmI5ZmQ1NTE1OTVjYmMyNWM2MWU3Y2MzZWRfS0JzSjdJMkdUemhvMUNmTzVzcEp0aER4THU4V3QxeU5fVG9rZW46Ym94Y25FY3lxWWhTNkFZR3UwaHpLMzZhZ2hkXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p>python</p><p>cd emsdk</p><p>安装最新根据包</p><p>python</p><p>emsdk install latest</p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=YzUzNjIzMGI2ZDczYWQ4NWM2MDQ5ZTYwZTMxMDE5MGVfVWhDWDdvS201TXhRcnVIVnRuM0NYM21nRzJzVFg1M3VfVG9rZW46Ym94Y25UMU9yQkNucUg2M3p3YTc5T2hPaHhwXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p>激活 sdk</p><p>python</p><p>emsdk activate latest</p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=NDQ0MTQ0YmE5Y2M2MjJkNjJlNzJkNTM0NTI5NzVhNjFfcHo3RHlyMXY4ZVRUVk9nWkpld242SzRCckY0ZGlveDJfVG9rZW46Ym94Y25zYkRPUG9FQWpHSkxhM2ZrRXd1QVVoXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p>执行环境变量</p><p>python</p><p>emsdk_env.bat</p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=ZTc5MzY2NTVkMjYxZjRlMWU2YTcyMjQxOTVkMjgxY2NfRUg1UmVQbkZrV1VnRzZvbUFLQTRSUEVxdDRVR2toZ0pfVG9rZW46Ym94Y25jeGZtakNsRVlST0VpRURRQTZPQVFkXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p>安装完成</p><p>测试一下</p><p>python</p><p>emcc -v</p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=MDUyYjI4MjNkN2ZjMGZjMzI5ZWQwMTE3MDQzMDc1YjJfYXFWTDZhWmJ0c1FoR2hla3RKVFdUVTJNMDAyaGJrbVpfVG9rZW46Ym94Y242SzI3NndwblZVM3JiTlNDYXRRQVJoXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p>开始 helloworld</p><p>创建个文件夹</p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=YWJmODcyN2E2N2RlY2I5ZjViYWQ5YjgzNjkzNTUxODRfcUdzcjJ6bjl4bE5hNHNtNVVITjc0TUZROTBkMGJocm1fVG9rZW46Ym94Y240TG5qbjNhRVFMdkpZS3lXWU9MTWljXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=ZTRmOTRhMmZhZDEwYWIzOTBjMzRjYzIwZTQzNThlMWVfczl0OE83SGpuZk9Qb2NhWGFDY1ZycHBsb3BJdzFDODlfVG9rZW46Ym94Y245OVJxUERPQUxNa0RhbnB4ZTV3SUpkXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p>创建 hello_world.c 文件内容如下🧐</p><p>python</p><p>#include &lt;stdio.h&gt;</p><p>int main(int argc, char ** argv) {</p><p>printf("Hello World\n");</p><p>}</p><p>运行一下</p><p>emcc 执行 c 文件路径 -s WASM=1 -o 目标文件名.html</p><p>python</p><p>emcc  hello_world.c -s WASM=1 -o hello_world.html</p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=YjEwZWEyNTA0MTU3MzNhNmU5NTE3MDkxMDhiNmM3NmZfeVI5clJnaTlMb3M3WVlSYlUwVGRRTmNnSVpjY1ZVVmhfVG9rZW46Ym94Y25aSmFUazllNGl5TWlhU25PVEFUNGJjXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p>文件 c 变成</p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=NWIxNjEwNjUyM2JhMDczOWQzMzc4YzljZGNhODhkMmRfeGhSVnRPbVBodUNESndMaHdSZnA3YW1Mb3pZczFlVEZfVG9rZW46Ym94Y25DeW5NU1VqejJNNXpzdDdWSkhCQnljXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p>启动 http 服务命令</p><p>python</p><p>emrun --no_browser --port 8080 hello_world.html</p><p>访问网址🧐</p><p><span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo4MDgwL2hlbGxvX3dvcmxkLmh0bWw=">http://localhost:8080/hello_world.html</span></p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=NDM1MWM0MDgyYjIxNWNlZTJmMmZhNDNmNmI2MzAwMDNfazFnRGlaMmF1ZjEwOXBlczYwM1VzdXZ1QlNQYTVMSkNfVG9rZW46Ym94Y25IZ2RJcjI1MERZQVI1NE9ZZ3Qzc3hnXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p>参考链接</p><p>(19 条消息) Windows10 中 Emscripten 安装详解_cnds123 的专栏 - CSDN 博客_emscripten 安装</p><p>开发者引导 - WebAssembly 中文网 | Wasm 中文文档</p><p>在 Windows10 搭建 WebAssembly 开发环境 - kunger - 博客园 (<span class="exturl" data-url="aHR0cDovL2NuYmxvZ3MuY29t">cnblogs.com</span>)</p><p>2021 年大前端技术趋势解读 - InfoQ</p><p>win10 上安装 Emscripten 安装</p><p>背景</p><p><strong>WebAssembly 的出现为 Web 开发者打开了一扇新的大门</strong> 。在去年，wasm 对你来说也许还仅是技术文章中的一个常见名词，你压根想不到他会在浏览器中得到怎样的应用，什么时候会被大公司真正用起来。 <strong>在今年，你很有可能已在不知不觉中成为 wasm 的使用者了</strong> 。目前国内外越来越多的团队基于 wasm 进行了业务实践</p><p>一、Emscripten 是什么？</p><p>Emscripten 编译器，是 WebAssembly 开发的重要工具之一，主要是通过 emcc（Emscripten Compiler Frontend）来工作的。这是个命令行工</p><p>二、安装步骤</p><p>1. 环境准备</p><p>git 2.32.0 python 3.7</p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=MmM5MGFkN2JhODAxZjc0MmZkYzQzZDM1NGI4NWQ2OTVfSVFvUE0yTXZCSk5LWEthNzVqa0FzWm5jOTBBemJtU05fVG9rZW46Ym94Y250ZFJuUElFdkRTaGdwSTRlaEZrZ21nXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=YWI1YmY5YTQxNTg5YmYxNjg1ZWQ3NTk1ZTlmNWM4ZTFfcHZibHJiYktqOExNZlFCOGtiMzNHcTlRRktwUEhvdjRfVG9rZW46Ym94Y25PNElidEVBTXZaRGdMNnZESnJJWDhnXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p>2. 安装</p><p>创建文件夹</p><p>python</p><p>mkdir d:\WebAssemblyTestmkdir</p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=NzYyOGRkMzhhZThjNWFhNWRkYTIzZTUwODJhMTYyNjRfWmw3MGxEWEpIUExKS1NHNEx2Q0VWWkwwMUdwb1pQRHFfVG9rZW46Ym94Y25nUGllczdYZDhHREFNUFcyQ3Mwb1lkXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p>进入目录🧐</p><p>python</p><p>cd WebAssemblyTestmkdir\</p><p>Emscripten 环境安装</p><p>python</p><p>git clone <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Vtc2NyaXB0ZW4tY29yZS9lbXNkay5naXQ=">https://github.com/emscripten-core/emsdk.git</span></p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=YTJkZmMwZmI5ZmQ1NTE1OTVjYmMyNWM2MWU3Y2MzZWRfS0JzSjdJMkdUemhvMUNmTzVzcEp0aER4THU4V3QxeU5fVG9rZW46Ym94Y25FY3lxWWhTNkFZR3UwaHpLMzZhZ2hkXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p>python</p><p>cd emsdk</p><p>安装最新根据包</p><p>python</p><p>emsdk install latest</p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=YzUzNjIzMGI2ZDczYWQ4NWM2MDQ5ZTYwZTMxMDE5MGVfVWhDWDdvS201TXhRcnVIVnRuM0NYM21nRzJzVFg1M3VfVG9rZW46Ym94Y25UMU9yQkNucUg2M3p3YTc5T2hPaHhwXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p>激活 sdk</p><p>python</p><p>emsdk activate latest</p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=NDQ0MTQ0YmE5Y2M2MjJkNjJlNzJkNTM0NTI5NzVhNjFfcHo3RHlyMXY4ZVRUVk9nWkpld242SzRCckY0ZGlveDJfVG9rZW46Ym94Y25zYkRPUG9FQWpHSkxhM2ZrRXd1QVVoXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p>执行环境变量</p><p>python</p><p>emsdk_env.bat</p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=ZTc5MzY2NTVkMjYxZjRlMWU2YTcyMjQxOTVkMjgxY2NfRUg1UmVQbkZrV1VnRzZvbUFLQTRSUEVxdDRVR2toZ0pfVG9rZW46Ym94Y25jeGZtakNsRVlST0VpRURRQTZPQVFkXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p>安装完成</p><p>测试一下</p><p>python</p><p>emcc -v</p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=MDUyYjI4MjNkN2ZjMGZjMzI5ZWQwMTE3MDQzMDc1YjJfYXFWTDZhWmJ0c1FoR2hla3RKVFdUVTJNMDAyaGJrbVpfVG9rZW46Ym94Y242SzI3NndwblZVM3JiTlNDYXRRQVJoXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p>开始 helloworld</p><p>创建个文件夹</p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=YWJmODcyN2E2N2RlY2I5ZjViYWQ5YjgzNjkzNTUxODRfcUdzcjJ6bjl4bE5hNHNtNVVITjc0TUZROTBkMGJocm1fVG9rZW46Ym94Y240TG5qbjNhRVFMdkpZS3lXWU9MTWljXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=ZTRmOTRhMmZhZDEwYWIzOTBjMzRjYzIwZTQzNThlMWVfczl0OE83SGpuZk9Qb2NhWGFDY1ZycHBsb3BJdzFDODlfVG9rZW46Ym94Y245OVJxUERPQUxNa0RhbnB4ZTV3SUpkXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p>创建 hello_world.c 文件内容如下🧐</p><p>python</p><p>#include &lt;stdio.h&gt;</p><p>int main(int argc, char ** argv) {</p><p>printf("Hello World\n");</p><p>}</p><p>运行一下</p><p>emcc 执行 c 文件路径 -s WASM=1 -o 目标文件名.html</p><p>python</p><p>emcc  hello_world.c -s WASM=1 -o hello_world.html</p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=YjEwZWEyNTA0MTU3MzNhNmU5NTE3MDkxMDhiNmM3NmZfeVI5clJnaTlMb3M3WVlSYlUwVGRRTmNnSVpjY1ZVVmhfVG9rZW46Ym94Y25aSmFUazllNGl5TWlhU25PVEFUNGJjXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p>文件 c 变成</p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=NWIxNjEwNjUyM2JhMDczOWQzMzc4YzljZGNhODhkMmRfeGhSVnRPbVBodUNESndMaHdSZnA3YW1Mb3pZczFlVEZfVG9rZW46Ym94Y25DeW5NU1VqejJNNXpzdDdWSkhCQnljXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p>启动 http 服务命令</p><p>python</p><p>emrun --no_browser --port 8080 hello_world.html</p><p>访问网址🧐</p><p><span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo4MDgwL2hlbGxvX3dvcmxkLmh0bWw=">http://localhost:8080/hello_world.html</span></p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=NDM1MWM0MDgyYjIxNWNlZTJmMmZhNDNmNmI2MzAwMDNfazFnRGlaMmF1ZjEwOXBlczYwM1VzdXZ1QlNQYTVMSkNfVG9rZW46Ym94Y25IZ2RJcjI1MERZQVI1NE9ZZ3Qzc3hnXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p>参考链接</p><p>(19 条消息) Windows10 中 Emscripten 安装详解_cnds123 的专栏 - CSDN 博客_emscripten 安装</p><p>开发者引导 - WebAssembly 中文网 | Wasm 中文文档</p><p>在 Windows10 搭建 WebAssembly 开发环境 - kunger - 博客园 (<span class="exturl" data-url="aHR0cDovL2NuYmxvZ3MuY29t">cnblogs.com</span>)</p><p>2021 年大前端技术趋势解读 - InfoQ</p><p>win10 上安装 Emscripten 安装</p><p>背景</p><p><strong>WebAssembly 的出现为 Web 开发者打开了一扇新的大门</strong> 。在去年，wasm 对你来说也许还仅是技术文章中的一个常见名词，你压根想不到他会在浏览器中得到怎样的应用，什么时候会被大公司真正用起来。 <strong>在今年，你很有可能已在不知不觉中成为 wasm 的使用者了</strong> 。目前国内外越来越多的团队基于 wasm 进行了业务实践</p><p>一、Emscripten 是什么？</p><p>Emscripten 编译器，是 WebAssembly 开发的重要工具之一，主要是通过 emcc（Emscripten Compiler Frontend）来工作的。这是个命令行工</p><p>二、安装步骤</p><p>1. 环境准备</p><p>git 2.32.0 python 3.7</p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=MmM5MGFkN2JhODAxZjc0MmZkYzQzZDM1NGI4NWQ2OTVfSVFvUE0yTXZCSk5LWEthNzVqa0FzWm5jOTBBemJtU05fVG9rZW46Ym94Y250ZFJuUElFdkRTaGdwSTRlaEZrZ21nXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=YWI1YmY5YTQxNTg5YmYxNjg1ZWQ3NTk1ZTlmNWM4ZTFfcHZibHJiYktqOExNZlFCOGtiMzNHcTlRRktwUEhvdjRfVG9rZW46Ym94Y25PNElidEVBTXZaRGdMNnZESnJJWDhnXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p>2. 安装</p><p>创建文件夹</p><p>python</p><p>mkdir d:\WebAssemblyTestmkdir</p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=NzYyOGRkMzhhZThjNWFhNWRkYTIzZTUwODJhMTYyNjRfWmw3MGxEWEpIUExKS1NHNEx2Q0VWWkwwMUdwb1pQRHFfVG9rZW46Ym94Y25nUGllczdYZDhHREFNUFcyQ3Mwb1lkXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p>进入目录🧐</p><p>python</p><p>cd WebAssemblyTestmkdir\</p><p>Emscripten 环境安装</p><p>python</p><p>git clone <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Vtc2NyaXB0ZW4tY29yZS9lbXNkay5naXQ=">https://github.com/emscripten-core/emsdk.git</span></p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=YTJkZmMwZmI5ZmQ1NTE1OTVjYmMyNWM2MWU3Y2MzZWRfS0JzSjdJMkdUemhvMUNmTzVzcEp0aER4THU4V3QxeU5fVG9rZW46Ym94Y25FY3lxWWhTNkFZR3UwaHpLMzZhZ2hkXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p>python</p><p>cd emsdk</p><p>安装最新根据包</p><p>python</p><p>emsdk install latest</p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=YzUzNjIzMGI2ZDczYWQ4NWM2MDQ5ZTYwZTMxMDE5MGVfVWhDWDdvS201TXhRcnVIVnRuM0NYM21nRzJzVFg1M3VfVG9rZW46Ym94Y25UMU9yQkNucUg2M3p3YTc5T2hPaHhwXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p>激活 sdk</p><p>python</p><p>emsdk activate latest</p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=NDQ0MTQ0YmE5Y2M2MjJkNjJlNzJkNTM0NTI5NzVhNjFfcHo3RHlyMXY4ZVRUVk9nWkpld242SzRCckY0ZGlveDJfVG9rZW46Ym94Y25zYkRPUG9FQWpHSkxhM2ZrRXd1QVVoXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p>执行环境变量</p><p>python</p><p>emsdk_env.bat</p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=ZTc5MzY2NTVkMjYxZjRlMWU2YTcyMjQxOTVkMjgxY2NfRUg1UmVQbkZrV1VnRzZvbUFLQTRSUEVxdDRVR2toZ0pfVG9rZW46Ym94Y25jeGZtakNsRVlST0VpRURRQTZPQVFkXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p>安装完成</p><p>测试一下</p><p>python</p><p>emcc -v</p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=MDUyYjI4MjNkN2ZjMGZjMzI5ZWQwMTE3MDQzMDc1YjJfYXFWTDZhWmJ0c1FoR2hla3RKVFdUVTJNMDAyaGJrbVpfVG9rZW46Ym94Y242SzI3NndwblZVM3JiTlNDYXRRQVJoXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p>开始 helloworld</p><p>创建个文件夹</p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=YWJmODcyN2E2N2RlY2I5ZjViYWQ5YjgzNjkzNTUxODRfcUdzcjJ6bjl4bE5hNHNtNVVITjc0TUZROTBkMGJocm1fVG9rZW46Ym94Y240TG5qbjNhRVFMdkpZS3lXWU9MTWljXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=ZTRmOTRhMmZhZDEwYWIzOTBjMzRjYzIwZTQzNThlMWVfczl0OE83SGpuZk9Qb2NhWGFDY1ZycHBsb3BJdzFDODlfVG9rZW46Ym94Y245OVJxUERPQUxNa0RhbnB4ZTV3SUpkXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p>创建 hello_world.c 文件内容如下🧐</p><p>python</p><p>#include &lt;stdio.h&gt;</p><p>int main(int argc, char ** argv) {</p><p>printf("Hello World\n");</p><p>}</p><p>运行一下</p><p>emcc 执行 c 文件路径 -s WASM=1 -o 目标文件名.html</p><p>python</p><p>emcc  hello_world.c -s WASM=1 -o hello_world.html</p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=YjEwZWEyNTA0MTU3MzNhNmU5NTE3MDkxMDhiNmM3NmZfeVI5clJnaTlMb3M3WVlSYlUwVGRRTmNnSVpjY1ZVVmhfVG9rZW46Ym94Y25aSmFUazllNGl5TWlhU25PVEFUNGJjXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p>文件 c 变成</p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=NWIxNjEwNjUyM2JhMDczOWQzMzc4YzljZGNhODhkMmRfeGhSVnRPbVBodUNESndMaHdSZnA3YW1Mb3pZczFlVEZfVG9rZW46Ym94Y25DeW5NU1VqejJNNXpzdDdWSkhCQnljXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p>启动 http 服务命令</p><p>python</p><p>emrun --no_browser --port 8080 hello_world.html</p><p>访问网址🧐</p><p><span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo4MDgwL2hlbGxvX3dvcmxkLmh0bWw=">http://localhost:8080/hello_world.html</span></p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=NDM1MWM0MDgyYjIxNWNlZTJmMmZhNDNmNmI2MzAwMDNfazFnRGlaMmF1ZjEwOXBlczYwM1VzdXZ1QlNQYTVMSkNfVG9rZW46Ym94Y25IZ2RJcjI1MERZQVI1NE9ZZ3Qzc3hnXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p>参考链接</p><p>(19 条消息) Windows10 中 Emscripten 安装详解_cnds123 的专栏 - CSDN 博客_emscripten 安装</p><p>开发者引导 - WebAssembly 中文网 | Wasm 中文文档</p><p>在 Windows10 搭建 WebAssembly 开发环境 - kunger - 博客园 (<span class="exturl" data-url="aHR0cDovL2NuYmxvZ3MuY29t">cnblogs.com</span>)</p><p>2021 年大前端技术趋势解读 - InfoQ</p><p>win10 上安装 Emscripten 安装</p><p>背景</p><p><strong>WebAssembly 的出现为 Web 开发者打开了一扇新的大门</strong> 。在去年，wasm 对你来说也许还仅是技术文章中的一个常见名词，你压根想不到他会在浏览器中得到怎样的应用，什么时候会被大公司真正用起来。 <strong>在今年，你很有可能已在不知不觉中成为 wasm 的使用者了</strong> 。目前国内外越来越多的团队基于 wasm 进行了业务实践</p><p>一、Emscripten 是什么？</p><p>Emscripten 编译器，是 WebAssembly 开发的重要工具之一，主要是通过 emcc（Emscripten Compiler Frontend）来工作的。这是个命令行工</p><p>二、安装步骤</p><p>1. 环境准备</p><p>git 2.32.0 python 3.7</p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=MmM5MGFkN2JhODAxZjc0MmZkYzQzZDM1NGI4NWQ2OTVfSVFvUE0yTXZCSk5LWEthNzVqa0FzWm5jOTBBemJtU05fVG9rZW46Ym94Y250ZFJuUElFdkRTaGdwSTRlaEZrZ21nXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=YWI1YmY5YTQxNTg5YmYxNjg1ZWQ3NTk1ZTlmNWM4ZTFfcHZibHJiYktqOExNZlFCOGtiMzNHcTlRRktwUEhvdjRfVG9rZW46Ym94Y25PNElidEVBTXZaRGdMNnZESnJJWDhnXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p>2. 安装</p><p>创建文件夹</p><p>python</p><p>mkdir d:\WebAssemblyTestmkdir</p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=NzYyOGRkMzhhZThjNWFhNWRkYTIzZTUwODJhMTYyNjRfWmw3MGxEWEpIUExKS1NHNEx2Q0VWWkwwMUdwb1pQRHFfVG9rZW46Ym94Y25nUGllczdYZDhHREFNUFcyQ3Mwb1lkXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p>进入目录🧐</p><p>python</p><p>cd WebAssemblyTestmkdir\</p><p>Emscripten 环境安装</p><p>python</p><p>git clone <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Vtc2NyaXB0ZW4tY29yZS9lbXNkay5naXQ=">https://github.com/emscripten-core/emsdk.git</span></p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=YTJkZmMwZmI5ZmQ1NTE1OTVjYmMyNWM2MWU3Y2MzZWRfS0JzSjdJMkdUemhvMUNmTzVzcEp0aER4THU4V3QxeU5fVG9rZW46Ym94Y25FY3lxWWhTNkFZR3UwaHpLMzZhZ2hkXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p>python</p><p>cd emsdk</p><p>安装最新根据包</p><p>python</p><p>emsdk install latest</p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=YzUzNjIzMGI2ZDczYWQ4NWM2MDQ5ZTYwZTMxMDE5MGVfVWhDWDdvS201TXhRcnVIVnRuM0NYM21nRzJzVFg1M3VfVG9rZW46Ym94Y25UMU9yQkNucUg2M3p3YTc5T2hPaHhwXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p>激活 sdk</p><p>python</p><p>emsdk activate latest</p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=NDQ0MTQ0YmE5Y2M2MjJkNjJlNzJkNTM0NTI5NzVhNjFfcHo3RHlyMXY4ZVRUVk9nWkpld242SzRCckY0ZGlveDJfVG9rZW46Ym94Y25zYkRPUG9FQWpHSkxhM2ZrRXd1QVVoXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p>执行环境变量</p><p>python</p><p>emsdk_env.bat</p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=ZTc5MzY2NTVkMjYxZjRlMWU2YTcyMjQxOTVkMjgxY2NfRUg1UmVQbkZrV1VnRzZvbUFLQTRSUEVxdDRVR2toZ0pfVG9rZW46Ym94Y25jeGZtakNsRVlST0VpRURRQTZPQVFkXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p>安装完成</p><p>测试一下</p><p>python</p><p>emcc -v</p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=MDUyYjI4MjNkN2ZjMGZjMzI5ZWQwMTE3MDQzMDc1YjJfYXFWTDZhWmJ0c1FoR2hla3RKVFdUVTJNMDAyaGJrbVpfVG9rZW46Ym94Y242SzI3NndwblZVM3JiTlNDYXRRQVJoXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p>开始 helloworld</p><p>创建个文件夹</p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=YWJmODcyN2E2N2RlY2I5ZjViYWQ5YjgzNjkzNTUxODRfcUdzcjJ6bjl4bE5hNHNtNVVITjc0TUZROTBkMGJocm1fVG9rZW46Ym94Y240TG5qbjNhRVFMdkpZS3lXWU9MTWljXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=ZTRmOTRhMmZhZDEwYWIzOTBjMzRjYzIwZTQzNThlMWVfczl0OE83SGpuZk9Qb2NhWGFDY1ZycHBsb3BJdzFDODlfVG9rZW46Ym94Y245OVJxUERPQUxNa0RhbnB4ZTV3SUpkXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p>创建 hello_world.c 文件内容如下🧐</p><p>python</p><p>#include &lt;stdio.h&gt;</p><p>int main(int argc, char ** argv) {</p><p>printf("Hello World\n");</p><p>}</p><p>运行一下</p><p>emcc 执行 c 文件路径 -s WASM=1 -o 目标文件名.html</p><p>python</p><p>emcc  hello_world.c -s WASM=1 -o hello_world.html</p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=YjEwZWEyNTA0MTU3MzNhNmU5NTE3MDkxMDhiNmM3NmZfeVI5clJnaTlMb3M3WVlSYlUwVGRRTmNnSVpjY1ZVVmhfVG9rZW46Ym94Y25aSmFUazllNGl5TWlhU25PVEFUNGJjXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p>文件 c 变成</p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=NWIxNjEwNjUyM2JhMDczOWQzMzc4YzljZGNhODhkMmRfeGhSVnRPbVBodUNESndMaHdSZnA3YW1Mb3pZczFlVEZfVG9rZW46Ym94Y25DeW5NU1VqejJNNXpzdDdWSkhCQnljXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p>启动 http 服务命令</p><p>python</p><p>emrun --no_browser --port 8080 hello_world.html</p><p>访问网址🧐</p><p><span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo4MDgwL2hlbGxvX3dvcmxkLmh0bWw=">http://localhost:8080/hello_world.html</span></p><p><img data-src="https://u3dof6c39p.feishu.cn/space/api/box/stream/download/asynccode/?code=NDM1MWM0MDgyYjIxNWNlZTJmMmZhNDNmNmI2MzAwMDNfazFnRGlaMmF1ZjEwOXBlczYwM1VzdXZ1QlNQYTVMSkNfVG9rZW46Ym94Y25IZ2RJcjI1MERZQVI1NE9ZZ3Qzc3hnXzE2NDE0MzQ5NzE6MTY0MTQzODU3MV9WNA" alt=""></p><p>参考链接</p><p>(19 条消息) Windows10 中 Emscripten 安装详解_cnds123 的专栏 - CSDN 博客_emscripten 安装</p><p>开发者引导 - WebAssembly 中文网 | Wasm 中文文档</p><p>在 Windows10 搭建 WebAssembly 开发环境 - kunger - 博客园 (<span class="exturl" data-url="aHR0cDovL2NuYmxvZ3MuY29t">cnblogs.com</span>)</p><p>2021 年大前端技术趋势解读 - InfoQ</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 电脑 </category>
          
          <category> 软件配置 </category>
          
          <category> 安装教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MAC地址和IP地址的联系</title>
      <link href="computer/basics/networking/MAC%E5%9C%B0%E5%9D%80%E5%92%8CIP%E5%9C%B0%E5%9D%80%E7%9A%84%E8%81%94%E7%B3%BB/"/>
      <url>computer/basics/networking/MAC%E5%9C%B0%E5%9D%80%E5%92%8CIP%E5%9C%B0%E5%9D%80%E7%9A%84%E8%81%94%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<p>一、IP 地址</p><p>对于 IP 地址，相信大家都很熟悉，即指使用 TCP/IP 协议指定给主机的 32 位地址。IP 地址由用点分隔开的 4 个 8 八位组构成，如 192.168.0.1 就是一个 IP 地址，这种写法叫点分十进制格式。IP 地址由网络地址和主机地址两部分组成，分配给这两部分的位数随地址类（A 类、B 类、C 类等）的不同而不同。网络地址用于路由选择，而主机地址用于在网络或子网内部寻找一个单独的主机。一个 IP 地址使得将来自源地址的数据通过路由而传送到目的地址变为可能。</p><p>二、MAC 地址</p><p>对于 MAC 地址，由于我们不直接和它接触，所以大家不一定很熟悉。在 OSI（Open System Interconnection，开放系统互连）7 层网络协议（物理层，数据链路层，网络层，传输层，会话层，表示层，应用层）参考模型中，第二层为数据链路层（Data Link）。它包含两个子层，上一层是逻辑链路控制（LLC：Logical Link Control），下一层即是我们前面所提到的 MAC（Media Access Control）层，即介质访问控制层。所谓介质（Media），是指传输信号所通过的多种物理环境。常用网络介质包括电缆（如：双绞线，同轴电缆，光纤），还有微波、激光、红外线等，有时也称介质为物理介质。MAC 地址也叫物理地址、硬件地址或链路地址，由网络设备制造商生产时写在硬件内部。这个地址与网络无关，也即无论将带有这个地址的硬件（如网卡、集线器、路由器等）接入到网络的何处，它都有相同的 MAC 地址，MAC 地址一般不可改变，不能由用户自己设定。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 电脑 </category>
          
          <category> 计算机基础 </category>
          
          <category> 网络基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>shell学习</title>
      <link href="shell%E5%AD%A6%E4%B9%A0/"/>
      <url>shell%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211014133312-i7zm4n6.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928111346-aejqj42.png" alt="image.png"></p><h1 id="linux基础"><a class="anchor" href="#linux基础">#</a> linux 基础</h1><h2 id="冯诺依曼体系结构"><a class="anchor" href="#冯诺依曼体系结构">#</a> 冯诺依曼体系结构</h2><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211014133312-i7zm4n6.png" alt="image.png"></p><p>硬件，软件体系</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928111740-b3rbv58.png" alt="image.png"></p><h3 id="运算器"><a class="anchor" href="#运算器">#</a> 运算器</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928112216-izk7m4h.png" alt="image.png"></p><h3 id="控制器"><a class="anchor" href="#控制器">#</a> 控制器</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928112201-v384csi.png" alt="image.png"></p><h3 id="存储器"><a class="anchor" href="#存储器">#</a> 存储器</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928112134-3r5a08d.png" alt="image.png"></p><h3 id="输入设备"><a class="anchor" href="#输入设备">#</a> 输入设备</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928112106-pmidawi.png" alt="image.png"></p><h3 id="输出设备"><a class="anchor" href="#输出设备">#</a> 输出设备</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928112116-6pblg43.png" alt="image.png"></p><p>内存：容量小，效率高，运行效率快，快速集成数据</p><p>硬盘：容量大，运行速度慢</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928112630-n8uqrc4.png" alt="image.png"></p><h2 id="硬盘的分类"><a class="anchor" href="#硬盘的分类">#</a> 硬盘的分类</h2><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928112719-hk2pjns.png" alt="image.png"></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928112736-thpwus2.png" alt="image.png"></p><p>所有的形式都是以二进制存取的</p><h2 id="读取方式"><a class="anchor" href="#读取方式">#</a> 读取方式</h2><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928113142-sqqecy5.png" alt="image.png"></p><p>1 个扇区 4kb, 等大</p><h1 id="shell"><a class="anchor" href="#shell">#</a> shell</h1><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928114002-rvbwpsq.png" alt="image.png"></p><p>注意:</p><p>参数之间用空格隔开</p><p>区分大小写</p><h2 id="常见命令"><a class="anchor" href="#常见命令">#</a> 常见命令:</h2><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928114054-40tlgz1.png" alt="image.png"></p><h2 id="特殊字符"><a class="anchor" href="#特殊字符">#</a> 特殊字符</h2><h3 id="指向y隐藏文件当前目录"><a class="anchor" href="#指向y隐藏文件当前目录">#</a> . 指向 y 隐藏文件，当前目录</h3><h3 id="上一层目录"><a class="anchor" href="#上一层目录">#</a> .. 上一层目录</h3><h3 id="变量"><a class="anchor" href="#变量">#</a> $ 变量</h3><ul><li>通配符，所有</li></ul><h3 id="~家目录"><a class="anchor" href="#~家目录">#</a> ~ 家目录</h3><p>超级管理员 root/</p><h3 id="目录"><a class="anchor" href="#目录">#</a> / 目录</h3><h3 id="-参数-参数"><a class="anchor" href="#-参数-参数">#</a> - 参数 -- 参数</h3><p>- 简写</p><p>-- 单词</p><h2 id="文件系统"><a class="anchor" href="#文件系统">#</a> 文件系统</h2><p>因为每个用户项目分区不一样</p><p>没有盘符：采用树</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928115539-ihpgu1e.png" alt="image.png"></p><p>当存储空间不够的时候采用文件挂载增加内存，理论值：可挂在 65536 个硬盘</p><p>扩容</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928120013-zx4rfer.png" alt="image.png"></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928131621-49xo3te.png" alt="image.png">mount 挂载</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928132850-0z9e7ce.png" alt="image.png"></p><p>bin 可执行文件，脚本</p><p>boot 引导分区</p><p>dev 设备信息</p><p>etc 配置文件</p><p>home 家</p><p>lib 内库</p><p>lib64</p><p>media 多媒体</p><p>mnt 硬盘挂载 U 盘</p><p>opt 默认安装目录</p><p>proc 进程信息</p><p>root 管理员家目录</p><p>run 运行时的系统常量，变量</p><p>sbin 管理员可执行的权限和命令</p><p>srv  服务启动之后需要提取额数据</p><p>sys 系统内核信息</p><p>tmp 临时存放信息，变量，重启后可能会清除</p><p>usr 共享文件</p><p>var 临时存放信息，变量，重启不清除 eg: 日志</p><h3 id="cd-改变文件路径"><a class="anchor" href="#cd-改变文件路径">#</a> cd 改变文件路径</h3><h3 id="ll显示目录"><a class="anchor" href="#ll显示目录">#</a> ll 显示目录</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928133231-hwbcnch.png" alt="image.png"></p><h3 id="ls显示目录"><a class="anchor" href="#ls显示目录">#</a> ls 显示目录</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928133250-q8n540z.png" alt="image.png"></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928133330-4dni3cv.png" alt="image.png"></p><p>中</p><p>- 开头表示文件</p><p>d 开头表示文件夹</p><p>l 开头表示链接 [win 中叫快捷方式]</p><h3 id="mkdir创建目录"><a class="anchor" href="#mkdir创建目录">#</a> mkdir 创建目录</h3><p>-p 创建多级目录 mkdir -p a</p><p>mkdir -p haoduo {test1,test2,test3} 创建多个文件夹</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928134135-t044sr2.png" alt="image.png"></p><p>{}: 类似 java 中数组的含义</p><h3 id="rmdir删除目录"><a class="anchor" href="#rmdir删除目录">#</a> rmdir 删除目录</h3><p>rmdir 要求文件时空文件夹</p><h3 id="cp复制文件"><a class="anchor" href="#cp复制文件">#</a> cp 复制文件</h3><p>cp 源文件 目标文件</p><p>-r 文件夹，目录时</p><h3 id="mv文件和目录移动和改名"><a class="anchor" href="#mv文件和目录移动和改名">#</a> mv 文件和目录移动和改名</h3><p>文件和目录</p><h3 id="rm-删除"><a class="anchor" href="#rm-删除">#</a> rm 删除</h3><p>-f 强制删除</p><p>-r 文件夹</p><h3 id="touch创建文件"><a class="anchor" href="#touch创建文件">#</a> touch 创建文件</h3><h3 id="stat查看文件信息"><a class="anchor" href="#stat查看文件信息">#</a> stat 查看文件信息</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928140246-btdll99.png" alt="image.png"></p><h3 id="ln链接"><a class="anchor" href="#ln链接">#</a> ln 链接</h3><p>快捷方式</p><p>-s 软链接</p><h3 id="cat查看内容"><a class="anchor" href="#cat查看内容">#</a> cat 查看内容</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928141624-ks158n1.png" alt="image.png"></p><h3 id="tac查看内容倒序"><a class="anchor" href="#tac查看内容倒序">#</a> tac 查看内容倒序</h3><h3 id="moreless查看内容分页"><a class="anchor" href="#moreless查看内容分页">#</a> more,less 查看内容分页</h3><h3 id="head查看取前几行"><a class="anchor" href="#head查看取前几行">#</a> head 查看取前几行</h3><p>显示某一行</p><p>head -8 | tail -1</p><h3 id="tail查看取后几行"><a class="anchor" href="#tail查看取后几行">#</a> tail 查看取后几行</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928142146-aiqelcg.png" alt="image.png"></p><p>-f -F 显示追加内容，监控到数据变动</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928143318-30ut1q2.png" alt="image.png"></p><h3 id="find-搜索文件"><a class="anchor" href="#find-搜索文件">#</a> find 搜索文件</h3><p>find / 表示全局搜索</p><p>-name 文件名</p><p>用法<br> find    [命令选项]     [路径]     [表达式选项]<br> 选项<br>选项用法<br> - empty查找空白文件或目录<br> - group按组查找<br> - name按文档名称查找<br> - iname按文档名称查找，且不区分大小写<br> - mtime按修改时间查找<br> - size按容量大小查找<br> - type按文档类型查找，文件（f）、目录 (d)、设备 (b，c)、链接 (l) 等<br> - user按用户查找<br> - exec对找到的档案执行特定的命令<br> - a并且<br> - o或者<br>举例<br>查找当前目录下名称为 hello.txt 的文档</p><p>[root@test ~]# find -name hello.txt<br>1<br> 查找 /root 目录下所有名称以.log 结尾的文件</p><p>[root@test ~]# find  /var/log/  -name  "*.log"<br>1<br> 不区分大小写查找文件 test</p><p>[root@test ~]# find  -iname  "test"<br>1<br> 查找系统中所有的空白文件</p><p>[root@test ~]# find   /   -empty<br>1<br> 查找系统中所属组为 tom 的文件</p><p>[root@test ~]# find  /  -group  tom<br>1<br> 查找系统中所有 3 天内被修改过的文件</p><p>[root@test ~]# find  /  -mtime  -3<br>1<br> 查找系统中所有 4 天前被修改过的文件</p><p>[root@test ~]# find  /  -mtime  +4<br>1<br> 查找系统中 2 天前的当天被修改过的文件</p><p>[root@test ~]# find  /  -mtime   2<br>1<br> 查找当前目录下大于 10MB 的文件</p><p>[root@test ~]# find  ./  -size   +10M<br>1<br> 查找当前目录下的所有普通文件</p><p>[root@test ~]# find  ./  -type   f<br>1<br> 查找计算中 tom 所拥有的所有文件</p><p>[root@test ~]# find  /  -user  tom<br>1<br> 查找当前目录下大于 1MB 的文件后列出文件的详细信息</p><p>[root@test ~]# find  ./  -size  +1M  -exec ls -l {} ;<br>1<br> 查找计算机中所有大于 1MB 的文件</p><p>[root@test ~]# find   /  -size   +1M  -a  -type  f<br>1</p><h3 id="sort-排序文件列表输出"><a class="anchor" href="#sort-排序文件列表输出">#</a> sort 排序文件列表输出</h3><p>语法：sort (选项)(参数)<br>1<br> 选项：</p><p>-b：忽略每行前面开始出的空格字符；<br>-c：检查文件是否已经按照顺序排序；<br>-d：排序时，处理英文字母、数字及空格字符外，忽略其他的字符；<br>-f：排序时，将小写字母视为大写字母；<br>-i：排序时，除了 040 至 176 之间的 ASCII 字符外，忽略其他的字符；<br>-m：将几个排序号的文件进行合并；<br>-M：将前面 3 个字母依照月份的缩写进行排序；<br>-n：依照数值的大小排序；<br>-o &lt;输出文件&gt;：将排序后的结果存入制定的文件；<br>-r：以相反的顺序来排序；<br>-t &lt;分隔字符&gt;：指定排序时所用的栏位分隔字符；<br>+&lt;起始栏位&gt;-&lt; 结束栏位 &gt;：以指定的栏位来排序，范围由起始栏位到结束栏位的前一栏位。</p><p>-u 去重</p><h3 id="vi编辑"><a class="anchor" href="#vi编辑">#</a> vi 编辑</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928143730-uas6kpc.png" alt="image.png"></p><h4 id="打开文件"><a class="anchor" href="#打开文件">#</a> 打开文件</h4><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928143847-f9i7y6z.png" alt="image.png"></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928144507-v3wo5zv.png" alt="image.png"></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928144552-5s8cvbg.png" alt="image.png"></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928145045-0z40uen.png" alt="image.png"></p><h5 id="编辑模式"><a class="anchor" href="#编辑模式">#</a> 编辑模式</h5><p>常用的</p><p>15gg: 进入第 15 行</p><p>shift+G 最后一行</p><p>dd 删除一行</p><p>3dd 删除 3 行</p><p>w 光标单词移动</p><p>dw 将后面的单词删除</p><p>3dw 删除后面 3 个单词</p><p>yy 复制</p><p>pp 粘贴</p><p>yw 复制一个单词</p><p>yp 粘贴一个单词</p><p>u 撤销</p><p>shift+6 行首</p><p>shift+4 行尾</p><p>shift ZZ</p><p>r 替换</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928150309-fpg3e7x.png" alt="image.png"></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928150324-nmgcex3.png" alt="image.png"></p><h5 id="末行模式"><a class="anchor" href="#末行模式">#</a> 末行模式</h5><p>wq 保存并退出</p><p>wq!</p><p>w 保存</p><p>q 退出</p><p>q! 不保存退出</p><p><strong>set nu 显示行数</strong></p><p>/ 关键字 查找</p><p>s / 关键字 / 替换字 /g 加了 g 后当前行全部替换</p><p>g / 关键字 / 替换字 /g</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928151139-ewakaar.png" alt="image.png"></p><p>vi 编写时间经常出现🧐</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928151616-t2e954g.png" alt="image.png"></p><p>直接删除</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928151629-3thpu7r.png" alt="image.png"></p><h2 id="计算机间数据传输"><a class="anchor" href="#计算机间数据传输">#</a> 计算机间数据传输</h2><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928151755-37h8doa.png" alt="image.png"></p><h3 id="rz上传"><a class="anchor" href="#rz上传">#</a> rz 上传</h3><h3 id="sz下载"><a class="anchor" href="#sz下载">#</a> sz 下载</h3><p>创建虚拟机后如何修改🧐</p><p>root 登录</p><p>hostname 名字 修改主机名</p><p>vi /etc/hostname          主机名</p><p>vi /etc/sysconfig/network-scripts/ifcfg-eth0 中修改 IPADDR=172.17.20.145IP 地址</p><p>systemtcl restart  重启</p><h3 id="scp传递文件"><a class="anchor" href="#scp传递文件">#</a> scp 传递文件</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928153822-kxh168x.png" alt="image.png"></p><h3 id="df分区信息"><a class="anchor" href="#df分区信息">#</a> df 分区信息</h3><p>-h  包含单位</p><h3 id="du指定文件大小"><a class="anchor" href="#du指定文件大小">#</a> du 指定文件大小</h3><p>du -h --max-depth=1 /</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928154729-ls21wo2.png" alt="image.png"></p><h3 id="tar解压和压缩"><a class="anchor" href="#tar解压和压缩">#</a> tar 解压和压缩</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928155138-fxi7zul.png" alt="image.png"></p><p>tar -zxvf Python-3.7.1</p><p>zx 解压</p><p>zc 压缩</p><p>v 过程</p><p>f 文件</p><p>tar -zcf 目标文件名 需要压缩文件 dir.tar.gz dir</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928155835-e4mc2b0.png" alt="image.png"></p><h3 id="zip压缩"><a class="anchor" href="#zip压缩">#</a> zip 压缩</h3><p>zip -r dir.zip dir</p><h3 id="unzip解压"><a class="anchor" href="#unzip解压">#</a> unzip 解压</h3><p>unzip dir.zip</p><h2 id="网络相关"><a class="anchor" href="#网络相关">#</a> 网络相关</h2><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928160636-fo1me6s.png" alt="image.png"></p><h3 id="ifconfig网卡配置信息"><a class="anchor" href="#ifconfig网卡配置信息">#</a> ifconfig 网卡配置信息</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928161212-ug0093j.png" alt="image.png"></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928161332-bzxvlf2.png" alt="image.png"></p><h3 id="netstat网络状态"><a class="anchor" href="#netstat网络状态">#</a> netstat 网络状态</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928161625-w3um1l3.png" alt="image.png"></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928161757-14n0awy.png" alt="image.png"></p><p>端口 22: 默认 ssh 访问接口</p><p>-anp</p><p>-r 核心路由表 = 命令 route</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928162000-cs6kudy.png" alt="image.png"></p><h3 id="ping地址连通"><a class="anchor" href="#ping地址连通">#</a> ping 地址连通</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928162126-6a8zwod.png" alt="image.png"></p><h3 id="telnet端口联通"><a class="anchor" href="#telnet端口联通">#</a> telnet 端口联通</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928162200-e1962ue.png" alt="image.png"></p><h3 id="curl获取信息"><a class="anchor" href="#curl获取信息">#</a> curl 获取信息</h3><p>curl -X GET <span class="exturl" data-url="aHR0cDovL3d3dy5iYWlkdS5jb20=">http://www.baidu.com</span></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928162734-lyicdjd.png" alt="image.png"></p><h2 id="防火墙"><a class="anchor" href="#防火墙">#</a> 防火墙</h2><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928162904-ij8u60y.png" alt="image.png"></p><p>发现 centos 使用 service 命令替代 systemctl</p><p>如启动服务</p><p>service httpd start</p><p>查看 httpd 服务状态</p><p>service httpd status</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928163951-4ososok.png" alt="image.png"></p><h2 id="日期和时间"><a class="anchor" href="#日期和时间">#</a> 日期和时间</h2><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928164040-ywkqiqu.png" alt="image.png"></p><h3 id="date-查看当前时间"><a class="anchor" href="#date-查看当前时间">#</a> date 查看当前时间</h3><p>集群时间同步策略 ntp</p><h3 id="ntpdate-集群同步时间"><a class="anchor" href="#ntpdate-集群同步时间">#</a> ntpdate  集群同步时间</h3><p><span class="exturl" data-url="aHR0cDovL2NuLm50cC5vcmcuY24=">cn.ntp.org.cn</span></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928165157-08l6gy7.png" alt="image.png"></p><h2 id="用户-组-权限"><a class="anchor" href="#用户-组-权限">#</a> 用户 - 组 - 权限</h2><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928165307-mv1p75w.png" alt="image.png"></p><h3 id="useradd添加用户"><a class="anchor" href="#useradd添加用户">#</a> useradd 添加用户</h3><h3 id="passwd修改用户密码"><a class="anchor" href="#passwd修改用户密码">#</a> passwd 修改用户密码</h3><h3 id="userdel-删除用户"><a class="anchor" href="#userdel-删除用户">#</a> userdel 删除用户</h3><p>-r</p><h3 id="su-切换用户"><a class="anchor" href="#su-切换用户">#</a> su 切换用户</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928165950-drz5m8n.png" alt="image.png"></p><h3 id="groupadd创建组"><a class="anchor" href="#groupadd创建组">#</a> groupadd 创建组</h3><h3 id="groups查看组"><a class="anchor" href="#groups查看组">#</a> groups 查看组</h3><h3 id="groupdel删除组"><a class="anchor" href="#groupdel删除组">#</a> groupdel 删除组</h3><h3 id="groupmod-n-修改组"><a class="anchor" href="#groupmod-n-修改组">#</a> groupmod -n 修改组</h3><h2 id="权限"><a class="anchor" href="#权限">#</a> 权限</h2><p>r 读</p><p>x 执行</p><p>w 写</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928170406-dl1sh0f.png" alt="image.png"></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928170418-t1p2wma.png" alt="image.png"></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928170457-yxpuy60.png" alt="image.png"></p><p>3 组  所属用户 所属组 其他</p><p>修改权限</p><p>chown 用户 文件</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928171140-1huxem1.png" alt="image.png"></p><h2 id="管道"><a class="anchor" href="#管道">#</a> 管道 |</h2><p>ps</p><p>netstat -anp | grep 22</p><h3 id="管道-2"><a class="anchor" href="#管道-2">#</a> | 管道</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928171508-0q9okvj.png" alt="image.png"></p><h2 id="a重定向"><a class="anchor" href="#a重定向">#</a> A 重定向</h2><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928171724-cmq0aie.png" alt="image.png"></p><h3 id="替换"><a class="anchor" href="#替换">#</a> &gt; 替换</h3><h3 id="012文件描述符"><a class="anchor" href="#012文件描述符">#</a> 012 文件描述符</h3><ul><li>1 是标准输出（stdout）</li><li>2 是标准错误输出（stderr）</li><li>0 是标准输入（stdin）<br>1&gt; 两个符号连着一起，而且呢，1 和 &gt; 符号之间不能有空格</li></ul><h3 id="追加"><a class="anchor" href="#追加">#</a> &gt;&gt; 追加</h3><h2 id="进程"><a class="anchor" href="#进程">#</a> 进程</h2><p>ps -ef</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928172320-7us6puc.png" alt="image.png"></p><p>uid: 用户 id</p><p>pid: 进程 id</p><p>ppid: 副进程 id</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928172732-srz0943.png" alt="image.png"></p><h3 id="ps-ef查看进程"><a class="anchor" href="#ps-ef查看进程">#</a> ps -ef 查看进程</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211015110240-qynqhjk.png" alt="image.png"></p><p>linux 上进程有 5 种状态:</p><ol><li>运行 (正在运行或在运行队列中等待)</li><li>中断 (休眠中，受阻，在等待某个条件的形成或接受到信号)</li><li>不可中断 (收到信号不唤醒和不可运行，进程必须等待直到有中断发生)</li><li>僵死 (进程已终止，但进程描述符存在，直到父进程调用 wait4 () 系统调用后释放)</li><li>停止 (进程收到 SIGSTOP, SIGSTP, SIGTIN, SIGTOU 信号后停止运行运行)</li></ol><p>1）ps a 显示现行终端机下的所有程序，包括其他用户的程序。</p><p>2）ps -A 显示所有程序。</p><p>3）ps c 列出程序时，显示每个程序真正的指令名称，而不包含路径，参数或常驻服务的标示。</p><p>4）ps -e 此参数的效果和指定 "A" 参数相同。</p><p>5）ps e 列出程序时，显示每个程序所使用的环境变量。</p><p>6）ps f 用 ASCII 字符显示树状结构，表达程序间的相互关系。</p><p>7）ps -H 显示树状结构，表示程序间的相互关系。</p><p>8）ps -N 显示所有的程序，除了执行 ps 指令终端机下的程序之外。</p><p>9）ps s 采用程序信号的格式显示程序状况。</p><p>10）ps S 列出程序时，包括已中断的子程序资料。</p><p>11）ps -t &lt;终端机编号&gt; 　指定终端机编号，并列出属于该终端机的程序的状况。</p><p>12）ps u 　 以用户为主的格式来显示程序状况。</p><p>13）ps x 　 显示所有程序，不以终端机来区分。</p><p>14）ps -l 較長，較詳細的顯示該 PID 的信息</p><h3 id="jobs-l查看后台进程"><a class="anchor" href="#jobs-l查看后台进程">#</a> jobs -l 查看后台进程</h3><h3 id="nohup防止进程被挂起"><a class="anchor" href="#nohup防止进程被挂起">#</a> nohup 防止进程被挂起</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928173042-1y4ymd0.png" alt="image.png"></p><h3 id="kill杀死进程"><a class="anchor" href="#kill杀死进程">#</a> kill 杀死进程</h3><h2 id="环境变量"><a class="anchor" href="#环境变量">#</a> 环境变量</h2><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928173423-5y1pbxk.png" alt="image.png"></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928173550-com6n1e.png" alt="image.png"></p><h2 id="top进程变化cpu负载情况"><a class="anchor" href="#top进程变化cpu负载情况">#</a> top 进程变化 cpu 负载情况</h2><p><strong>top 运行中可以通过 top 的内部命令对进程的显示方式进行控制。内部命令如下：</strong> <code>&lt;br /&gt;</code> s – 改变画面更新频率 <code>&lt;br /&gt;</code> l – 关闭或开启第一部分第一行 top 信息的表示 <code>&lt;br /&gt;</code> t – 关闭或开启第一部分第二行 Tasks 和第三行 Cpus 信息的表示 <code>&lt;br /&gt;</code> m – 关闭或开启第一部分第四行 Mem 和 第五行 Swap 信息的表示 <code>&lt;br /&gt;</code> N – 以 PID 的大小的顺序排列表示进程列表 <code>&lt;br /&gt;</code> P – 以 CPU 占用率大小的顺序排列进程列表 <code>&lt;br /&gt;</code> M – 以内存占用率大小的顺序排列进程列表 <code>&lt;br /&gt;</code> h – 显示帮助 <code>&lt;br /&gt;</code> n – 设置在进程列表所显示进程的数量 <code>&lt;br /&gt;</code> q – 退出 top <code>&lt;br /&gt;</code> s – 改变画面更新周期</p><p>序号 列名 含义 <code>&lt;br /&gt;</code>   PID 进程 id <code>&lt;br /&gt;</code>   PPID 父进程 id <code>&lt;br /&gt;</code>   RUSER Real user name <code>&lt;br /&gt;</code>  UID 进程所有者的用户 id <code>&lt;br /&gt;</code>   USER 进程所有者的用户名 <code>&lt;br /&gt;</code>  GROUP 进程所有者的组名 <code>&lt;br /&gt;</code>   TTY 启动进程的终端名。不是从终端启动的进程则显示为？ <code>&lt;br /&gt;</code>   PR 优先级 <code>&lt;br /&gt;</code>   NI nice 值。负值表示高优先级，正值表示低优先级 0 <code>&lt;br /&gt;</code>   P 最后使用的 CPU，仅在多 CPU 环境下有意义 <code>&lt;br /&gt;</code>   % CPU 上次更新到现在的 CPU 时间占用百分比 <code>&lt;br /&gt;</code>   TIME 进程使用的 CPU 时间总计，单位秒 <code>&lt;br /&gt;</code>   TIME+ 进程使用的 CPU 时间总计，单位 1/100 秒 <code>&lt;br /&gt;</code>  % MEM 进程使用的物理内存百分比 <code>&lt;br /&gt;</code>   VIRT 进程使用的虚拟内存总量，单位 kb。VIRT=SWAP+RES <code>&lt;br /&gt;</code>   SWAP 进程使用的虚拟内存中，被换出的大小，单位 kb。 <code>&lt;br /&gt;</code>   RES 进程使用的、未被换出的物理内存大小，单位 kb。RES=CODE+DATA <code>&lt;br /&gt;</code>   CODE 可执行代码占用的物理内存大小，单位 kb <code>&lt;br /&gt;</code>  DATA 可执行代码以外的部分 (数据段 + 栈) 占用的物理内存大小，单位 kb <code>&lt;br /&gt;</code>   SHR 共享内存大小，单位 kb <code>&lt;br /&gt;</code>   nFLT 页面错误次数 <code>&lt;br /&gt;</code>   nDRT 最后一次写入到现在，被修改过的页面数。 <code>&lt;br /&gt;</code>   S 进程状态。（D = 不可中断的睡眠状态，R = 运行，S = 睡眠，T = 跟踪 / 停止，Z = 僵尸进程） <code>&lt;br /&gt;</code>  COMMAND 命令名 / 命令行 <code>&lt;br /&gt;</code>   WCHAN 若该进程在睡眠，则显示睡眠中的系统函数名 <code>&lt;br /&gt;</code>   Flags 任务标志，参考 sched.h</p><p>默认情况下仅显示比较重要的 PID、USER、PR、NI、VIRT、RES、SHR、S、% CPU、% MEM、TIME+、COMMAND 列。可以通过下面的快捷键来更改显示内容。</p><p>通过 f 键可以选择显示的内容。按 f 键之后会显示列的列表，按 a-z 即可显示或隐藏对应的列，最后按回车键确定。 <code>&lt;br /&gt;</code>  按 o 键可以改变列的显示顺序。按小写的 a-z 可以将相应的列向右移动，而大写的 A-Z 可以将相应的列向左移动。最后按回车键确定。 <code>&lt;br /&gt;</code>  按大写的 F 或 O 键，然后按 a-z 可以将进程按照相应的列进行排序。而大写的 R 键可以将当前的排序倒转。</p><p>top 使用方法：</p><p><strong>使用格式：</strong></p><p><strong>top [-] [d] [p] [q] [c] [C] [S] [s] [n] <code>&lt;br /&gt;</code> </strong></p><p><strong>参数说明：</strong></p><p><strong>d：指定每两次屏幕信息刷新之间的时间间隔。当然用户可以使用 s 交互命令来改变之。</strong></p><p>p: 通过指定监控进程 ID 来仅仅监控某个进程的状态。</p><p>q: 该选项将使 top 没有任何延迟的进行刷新。如果调用程序有超级用户权限，那么 top 将以尽可能高的优先级运行。</p><p>S：指定累计模式。</p><p>s：使 top 命令在安全模式中运行。这将去除交互命令所带来的潜在危险。</p><p>i：使 top 不显示任何闲置或者僵死进程。</p><p>c: 显示整个命令行而不只是显示命令名。</p><p>常用命令说明：</p><p>Ctrl+L：擦除并且重写屏幕 <code>&lt;br /&gt;</code></p><p>K：终止一个进程。系统将提示用户输入需要终止的进程 PID，以及需要发送给该进程什么样的信号。一般的终止进程可以使用 15 信号；如果不能正常结束那就使用信号 9 强制结束该进程。默认值是信号 15。在安全模式中此命令被屏蔽。</p><p>i：忽略闲置和僵死进程。这是一个开关式命令。</p><p>q：退出程序</p><p>r: 重新安排一个进程的优先级别。系统提示用户输入需要改变的进程 PID 以及需要设置的进程优先级值。输入一个正值将使优先级降低，反之则可以使该进程拥有更高的优先权。默认值是 10。</p><p>S：切换到累计模式。</p><p>s：改变两次刷新之间的延迟时间。系统将提示用户输入新的时间，单位为 s。如果有小数，就换算成 m s。输入 0 值则系统将不断刷新，默认值是 5 s。需要注意的是如果设置太小的时间，很可能会引起不断刷新，从而根本来不及看清显示的情况，而且系统负载也会大大增加。</p><p>f 或者 F：从当前显示中添加或者删除项目。 <code>&lt;br /&gt;</code></p><p>o 或者 O：改变显示项目的顺序 <code>&lt;br /&gt;</code></p><p>l：切换显示平均负载和启动时间信息。 <code>&lt;br /&gt;</code></p><p>m: 切换显示内存信息。</p><p>t: 切换显示进程和 CPU 状态信息。</p><p>c: 切换显示命令名称和完整命令行。</p><p>M: 根据驻留内存大小进行排序。</p><p><strong>P: 根据 CPU 使用百分比大小进行排序。</strong></p><p><strong>T: 根据时间 / 累计时间进行排序。</strong></p><p><strong>W: 将当前设置写入～/.toprc 文件中。</strong></p><p>** 查看多核 CPU 命令 <code>&lt;br /&gt;</code> **mpstat -P ALL  和  sar -P ALL</p><h2 id="curl请求接口"><a class="anchor" href="#curl请求接口">#</a> curl 请求接口</h2><p>curl 是非常方便的 Rest 客户端，可以很方便的完成 Rest API 测试，利用 curl 对 http 协议发送 Get/Post/Delete/Put, 同时还可以携带 header 来满足 Rest API 需求的特定条件</p><p>curl 常用的参数</p><p>-X/--request [GET|POST|PUT|DELETE|…]  使用指定的 http method 发出 http request</p><p>-H/--header                           设定 request 里的 header</p><p>-i/--include                          显示 response 的 header</p><p>-d/--data                             设定 http parameters</p><p>-v/--verbose                          輸出比较多的信息</p><p>-u/--user                             使用者账号</p><p>-b/--cookie                           cookie 文件路径 使用 cookie</p><p>linux command line 的参数，同一个功能常会有两个完全相同的参数，一个是比较短的参数，另一个是比较长的参数</p><p>1、测试 get 请求<br> $ curl <span class="exturl" data-url="aHR0cDovL3d3dy5saW51eGlkYy5jb20vbG9naW4uY2dpP3VzZXI9dGVzdDAwMSZhbXA7cGFzc3dvcmQ9MTIzNDU2">http://www.linuxidc.com/login.cgi?user=test001&amp;password=123456</span></p><p>2、测试 post 请求<br> $ curl -d "user=nickwolfe&amp;password=12345" <span class="exturl" data-url="aHR0cDovL3d3dy5saW51eGlkYy5jb20vbG9naW4uY2dp">http://www.linuxidc.com/login.cgi</span><br> 方式一：发送磁盘上面的 xml 文件（推荐）<br>root [ /apps ]$ curl -X POST -H 'content-type: application/xml'  -d @/apps/myxmlfile.txt <span class="exturl" data-url="aHR0cDovLzE3Mi4xOS4yMTkueHg6ODA4MS9jc3AvZmFxL2FjdERpYVVzZXJJbmZvLmFjdGlvbg==">http://172.19.219.xx:8081/csp/faq/actDiaUserInfo.action</span><br>ps：其中 myxmlfile.txt 为磁盘上面的 xml 文件，后面为请求路径</p><p>方式二：在命令行直接发送 xml 结构数据</p><p>root [ /apps ]$ curl -H 'content-type: application/xml' -X POST -d ' <code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;userinfoReq&gt;``&lt;subsNumber&gt;</code> 13814528620 <code>&lt;/subsNumber&gt;&lt;type&gt;</code> 3 <code>&lt;/type&gt;&lt;/userinfoReq&gt;</code> ' <span class="exturl" data-url="aHR0cDovLzE3Mi4xOS4yMTkueHg6ODA4MS9jc3AvZmFxL2FjdERpYVVzZXJJbmZvLmFjdGlvbg==">http://172.19.219.xx:8081/csp/faq/actDiaUserInfo.action</span><br> 或者</p><p>root [ /apps ]$ echo ' <code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;userinfoReq&gt;``&lt;subsNumber&gt;</code></p><p><code>https://www.ekwing.com/home/classtop?class=443</code></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuZWt3aW5nLmNvbS9ob21lL2NpdHlodw==">https://www.ekwing.com/home/cityhw</span></p><p>请求 URL: <span class="exturl" data-url="aHR0cHM6Ly9wYXNzcG9ydC5la3dpbmcuY29tL2luZGV4L2dldHNjaG9vbHVzZXI/Y2FsbGJhY2s9alF1ZXJ5MTcyMDgyODc5NjA5NjI1NDc5MjlfMTYzNDI3NzU2Mjk2OCZhbXA7dW5hbWU9JUU3JUJGJUJDJUU1JUIwJThGJUU1JUIwJThGMSZhbXA7cHc9alNCNXJHQXYyc2VGam5pcVBEMUljN0FvR2s5YTZRZlBNeXZ3SnZEWWpWeHdhTkR3WTdjTWhUVjlaOTBDU05VZ2RjMlNHSjVjZlJrOVIwVjBVVWdOSmMlMkJRaDlDaDkwbVolMkJTVXg4Y3pobzJnQVUlMkI5UWc2d0ZDWW9LYWkzdWhaN1V0VDNNeWxQeHl0emNjRVFucE5BZWF5bFFycURHTXJiSmFSREQlMkZ3QXUyUWMlM0QmYW1wO2VuY3J5cHRfa2V5PTQwN2FjMGY3ODY0MDk4YmEzMjBhZjQ0ZGMwZjM4ZGFkJmFtcDtlbmNyeXB0X3R5cGU9cnNhJmFtcDtzY2hvb2xfbmFtZT0lRTUlOEElQjElRTUlQkYlOTclRTUlQUQlQTYlRTYlQTAlQTEmYW1wO2xvZ2luX3R5cGU9NCZhbXA7Y29kZT0mYW1wO2NvZGVfdG9rZW49JmFtcDtfPTE2MzQyNzc2OTkxNTc=">https://passport.ekwing.com/index/getschooluser?callback=jQuery17208287960962547929_1634277562968&amp;uname = 翼小小 1&amp;pw=jSB5rGAv2seFjniqPD1Ic7AoGk9a6QfPMyvwJvDYjVxwaNDwY7cMhTV9Z90CSNUgdc2SGJ5cfRk9R0V0UUgNJc%2BQh9Ch90mZ%2BSUx8czho2gAU%2B9Qg6wFCYoKai3uhZ7UtT3MylPxytzccEQnpNAeaylQrqDGMrbJaRDD%2FwAu2Qc%3D&amp;encrypt_key=407ac0f7864098ba320af44dc0f38dad&amp;encrypt_type=rsa&amp;school_name = 励志学校 &amp; login_type=4&amp;code=&amp;code_token=&amp;_=1634277699157</span></p><h2 id="rpm安装卸载"><a class="anchor" href="#rpm安装卸载">#</a> rpm 安装卸载</h2><p>-ivh 安装</p><p>i[install ]</p><p>v [查看信息]</p><p>-qa 查询所有安装信息</p><p>-q</p><p>-e 卸载 全称</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928174937-bdinaah.png" alt="image.png"></p><h2 id="三剑客"><a class="anchor" href="#三剑客">#</a> 三剑客</h2><h3 id="cut切分文件"><a class="anchor" href="#cut切分文件">#</a> cut 切分文件</h3><h3 id="sort排序"><a class="anchor" href="#sort排序">#</a> sort 排序</h3><h3 id="wc统计单词数"><a class="anchor" href="#wc统计单词数">#</a> wc 统计单词数</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928175447-xnovzci.png" alt="image.png"></p><h2 id="grep"><a class="anchor" href="#grep">#</a> grep</h2><p>经常和 | 连用</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928175733-pzs8lap.png" alt="image.png"></p><p>ps -ef |grep</p><p>find</p><h2 id="set"><a class="anchor" href="#set">#</a> set</h2><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928175958-llyemi3.png" alt="image.png"></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928180012-n94iq7d.png" alt="image.png"></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928180034-wr7jpgl.png" alt="image.png"></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928180201-rkzvpv2.png" alt="image.png"></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928180321-vxpkclc.png" alt="image.png"></p><h2 id="awk"><a class="anchor" href="#awk">#</a> awk</h2><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928180345-r3cefbi.png" alt="image.png"></p><h1 id="shell编程"><a class="anchor" href="#shell编程">#</a> shell 编程</h1><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928180526-lak2vdg.png" alt="image.png"></p><h3 id="执行脚本文件"><a class="anchor" href="#执行脚本文件">#</a> 执行脚本文件</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210928181122-gv2i7a4.png" alt="image.png"></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210929100553-rxdo02p.png" alt="image.png"></p><h4 id="hellosh方法一"><a class="anchor" href="#hellosh方法一">#</a> ./hello.sh 方法一</h4><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210929100210-4qymaid.png" alt="image.png"></p><h4 id="sh或bash-hellosh方法二"><a class="anchor" href="#sh或bash-hellosh方法二">#</a> sh 或 bash hello.sh 方法二</h4><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210929100227-weczbp4.png" alt="image.png"></p><h4 id="source或-hellosh"><a class="anchor" href="#source或-hellosh">#</a> source 或. <span class="exturl" data-url="aHR0cDovL2hlbGxvLnNo">hello.sh</span></h4><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20210929100648-4auelc0.png" alt="image.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python学习廖雪峰</title>
      <link href="python%E5%AD%A6%E4%B9%A0%E5%BB%96%E9%9B%AA%E5%B3%B0/"/>
      <url>python%E5%AD%A6%E4%B9%A0%E5%BB%96%E9%9B%AA%E5%B3%B0/</url>
      
        <content type="html"><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGlhb3h1ZWZlbmcuY29tL3dpa2kvMTAxNjk1OTY2MzYwMjQwMC8xMDE3MTA0MzI0MDI4NDQ4">使用 dict 和 set - 廖雪峰的官方网站 (liaoxuefeng.com)</span></p><p>用于学习记录，后期便于复习，参考链接</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009102447-hmq8gs8.png" alt="image.png"></p><p>python file</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009102545-qqmxrgo.png" alt="image.png"></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009102644-7ny4t2k.png" alt="image.png"></p><p>调用脚本时会先载入 pyhton 解释器，然后运行脚本</p><p>rpm：软件管理包</p><p>操作符优先级：<img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009104337-b66ot2k.png" alt="image.png"></p><p>条件判断：</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009104751-a27qfzb.png" alt="image.png"></p><p>Python 为我们提供了非常完善的基础代码库，覆盖了网络、文件、GUI、数据库、文本等大量内容，被形象地称作 “内置电池（batteries included）”。用 Python 开发，许多功能不必从零编写，直接使用现成的即可。</p><p>语言定位：</p><p>Python 的定位是 “优雅”、“明确”、“简单”</p><p>Python 是解释型语言</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211011172523-7k51l6e.png" alt="image.png"></p><h1 id="python"><a class="anchor" href="#python">#</a> python</h1><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009110719-7urayjl.png" alt="image.png"></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009111236-gd1mcju.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009111303-l3bqira.png" alt="image.png"></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009113303-w7qziw5.png" alt="image.png"></p><h2 id="数据类型"><a class="anchor" href="#数据类型">#</a> 数据类型</h2><h3 id="int-整型"><a class="anchor" href="#int-整型">#</a> int 整型</h3><p>long int 长整型</p><p>int 整型</p><h3 id="float-浮点型"><a class="anchor" href="#float-浮点型">#</a> float 浮点型</h3><p>浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时</p><p>双精度浮点型 e</p><p>浮点型</p><h3 id="string-字符串"><a class="anchor" href="#string-字符串">#</a> String 字符串</h3><p>字符串是以单引号  <code>'</code>  或双引号  <code>"</code>  括起来的任意文本</p><p>字符串是以 Unicode 编码</p><p>对于单个字符的编码，Python 提供了  <code>ord()</code>  函数获取字符的整数表示， <code>chr()</code>  函数把编码转换为对应的字符：</p><h3 id="bool布尔"><a class="anchor" href="#bool布尔">#</a> Bool 布尔</h3><p>True</p><p>Flase</p><h3 id="none-空值"><a class="anchor" href="#none-空值">#</a> None 空值</h3><p>None， <code>None</code>  不能理解为  <code>0</code> ，因为  <code>0</code>  是有意义的，</p><p>Null 无意义</p><p>.</p><p>&lt;iframe src="<span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo2ODA2L3dpZGdldHMvYnJ5dGhvbi1lZGl0b3I=">http://127.0.0.1:6806/widgets/brython-editor</span>" data-src="<span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo2ODA2L3dpZGdldHMvYnJ5dGhvbi1lZGl0b3I=">http://127.0.0.1:6806/widgets/brython-editor</span>" data-subtype="widget" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="width: 1341px; height: 276px;"&gt;&lt;/iframe&gt;</p><h3 id="变量"><a class="anchor" href="#变量">#</a> 变量</h3><p>变量的概念基本上和初中代数的方程变量是一致的，</p><p>变量不仅可以是数字，还可以是任意数据类型。</p><p>变量名必须是大小写英文、数字和  <code>_</code> 的组合，且不能用数字开头，字母或下划线开头</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token comment">#变量类型</span></pre></td></tr><tr><td data-num="2"></td><td><pre>a<span class="token operator">=</span><span class="token number">1</span></pre></td></tr><tr><td data-num="3"></td><td><pre>b<span class="token operator">=</span><span class="token string">'我是变量'</span></pre></td></tr><tr><td data-num="4"></td><td><pre>c<span class="token operator">=</span><span class="token boolean">True</span></pre></td></tr><tr><td data-num="5"></td><td><pre>d<span class="token operator">=</span><span class="token number">12.2e3</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009134601-1cuacaj.png" alt="image.png"></p><p>int a=1 静态语言 此时已经分配的 int 分区之后不能更改变量类型【不支持，Java】</p><p>a=3 动态语言，可以赋值成任意类型</p><h4 id="动态定义"><a class="anchor" href="#动态定义">#</a> 动态定义</h4><h4 id="静态定义"><a class="anchor" href="#静态定义">#</a> 静态定义</h4><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>a <span class="token operator">=</span> <span class="token string">'ABC'</span></pre></td></tr><tr><td data-num="2"></td><td><pre>b <span class="token operator">=</span> a</pre></td></tr><tr><td data-num="3"></td><td><pre>a <span class="token operator">=</span> <span class="token string">'XYZ'</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p>执行  <code>a = 'ABC'</code> ，解释器创建了字符串  <code>'ABC'</code>  和变量  <code>a</code> ，并把  <code>a</code>  指向  <code>'ABC'</code> ：</p><p><img data-src="https://www.liaoxuefeng.com/files/attachments/923791878255456/0" alt="py-var-code-1"></p><p>执行  <code>b = a</code> ，解释器创建了变量  <code>b</code> ，并把  <code>b</code>  指向  <code>a</code>  指向的字符串  <code>'ABC'</code> ：</p><p><img data-src="https://www.liaoxuefeng.com/files/attachments/923792058613440/0" alt="py-var-code-2"></p><p>执行  <code>a = 'XYZ'</code> ，解释器创建了字符串 'XYZ'，并把  <code>a</code>  的指向改为  <code>'XYZ'</code> ，但  <code>b</code>  并没有更改：</p><p><img data-src="https://www.liaoxuefeng.com/files/attachments/923792191637760/0" alt="py-var-code-3"></p><h3 id="常量"><a class="anchor" href="#常量">#</a> 常量</h3><p>所谓常量就是不能变的变量，通常用全部大写的变量名表示常量：</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>PI <span class="token operator">=</span> <span class="token number">3.14159265359</span></pre></td></tr></tbody></table></figure><h2 id="list列表"><a class="anchor" href="#list列表">#</a> list 列表</h2><p>list 是一种有序的集合，可以随时添加和删除其中的元素。</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token builtin">list</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009154856-r9s5yyu.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009154907-bofhvvd.png" alt="image.png"></p><h3 id="切分"><a class="anchor" href="#切分">#</a> 切分</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009155126-p31z8um.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009155139-cpsoatf.png" alt="image.png"></p><h3 id="append追加"><a class="anchor" href="#append追加">#</a> append（）追加</h3><p>str.append('a')</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009155556-qrj4a63.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009155606-dxihfwr.png" alt="image.png"></p><h3 id="insert插入指定位置"><a class="anchor" href="#insert插入指定位置">#</a> insert 插入指定位置</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009162557-186v350.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009162609-u00z8m3.png" alt="image.png"></p><h3 id="pop删除末尾元素"><a class="anchor" href="#pop删除末尾元素">#</a> pop（）删除末尾元素</h3><p>要删除指定位置的元素，用  <code>pop(i)</code>  方法，其中  <code>i</code>  是索引位置</p><p>替换元素直接赋值即可</p><p>列表可以嵌套</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'python'</span><span class="token punctuation">,</span> <span class="token string">'java'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'asp'</span><span class="token punctuation">,</span> <span class="token string">'php'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'scheme'</span><span class="token punctuation">]</span></pre></td></tr></tbody></table></figure><p>类型可以不同</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>L <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Apple'</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">]</span></pre></td></tr></tbody></table></figure><h3 id="切片"><a class="anchor" href="#切片">#</a> 切片</h3><p>list [:-1] 不包含最后一个元素</p><p>list [:] 全部列表</p><p>list [::] 全部列表</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012161203-1e12zsd.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012161212-0lrqjsm.png" alt="image.png"></p><p>前 10 个数，每两个取一个</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012161428-r6muafj.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012161441-eoc8y55.png" alt="image.png"></p><h4 id="列表生成"><a class="anchor" href="#列表生成">#</a> 列表生成</h4><p>list（range（1，11））生成 10 个数 1-10</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>m<span class="token operator">+</span>n <span class="token keyword">for</span> m <span class="token keyword">in</span> <span class="token string">'123'</span> <span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token string">'yza'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>k<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">467</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> k <span class="token keyword">if</span> x<span class="token operator">==</span><span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012190810-l1qtxiv.png" alt="image.png"></p><h2 id="tuple元组"><a class="anchor" href="#tuple元组">#</a> tuple 元组</h2><p>tuple 一旦初始化就不能修改</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009163638-1vpldee.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009163652-xkas3o0.png" alt="image.png"></p><p>但元组初始化后就不能进行更改了</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>b<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">#定义的不是 tuple，是 1 这个数！</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment"># 这是因为括号 () 既可以表示 tuple，又可以表示数学公式中的小括号，</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment"># 这就产生了歧义，因此，Python 规定，</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment"># 这种情况下，按小括号进行计算，计算结果自然是 1</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>c<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009164221-xl1husx.png" alt="image.png"></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009164244-780v78f.png" alt="image.png"></p><h2 id="dict字典"><a class="anchor" href="#dict字典">#</a> dict 字典</h2><p>其他语言叫 map，使用键 - 值（key-value）存储，具有极快的查找速度。dict 的 key 必须是<strong>不可变对象</strong>。key 计算位置的算法称为哈希算法（Hash）。</p><h3 id="定义"><a class="anchor" href="#定义">#</a> 定义</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>d<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'ruanyifen'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token string">'happy'</span><span class="token punctuation">:</span><span class="token string">'write'</span><span class="token punctuation">}</span></pre></td></tr><tr><td data-num="2"></td><td><pre>d<span class="token punctuation">[</span><span class="token string">'add'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'Im add'</span></pre></td></tr><tr><td data-num="3"></td><td><pre>d<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'fix'</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012135019-kqmsrcg.png" alt="image.png"></p><h3 id="取value"><a class="anchor" href="#取value">#</a> 取 value</h3><h4 id="dictkey"><a class="anchor" href="#dictkey">#</a> dict['key']</h4><h4 id="key-in-dict"><a class="anchor" href="#key-in-dict">#</a> 'key' in dict</h4><h4 id="dictgetkey"><a class="anchor" href="#dictgetkey">#</a> dict.get('key')</h4><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'name'</span> <span class="token keyword">in</span> d<span class="token punctuation">)</span><span class="token comment">#方法一判断是否有这个主键在字典 d 中</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#方法二 取</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012135119-sniqpw0.png" alt="image.png"></p><h3 id="dictpopkey删除一个key"><a class="anchor" href="#dictpopkey删除一个key">#</a> dict.pop ('key') 删除一个 key</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012135429-m36ygpu.png" alt="image.png"></p><h3 id="dictkeys返回字典中所有key列表"><a class="anchor" href="#dictkeys返回字典中所有key列表">#</a> dict.keys 返回字典中所有 key 列表</h3><h3 id="dictupdate将a字典新keyvalue内容加入b字典中"><a class="anchor" href="#dictupdate将a字典新keyvalue内容加入b字典中">#</a> dict.update () 将 a 字典新 key，value 内容加入 b 字典中</h3><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token assign-left variable">dicta</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token builtin class-name">:</span><span class="token string">'ruan'</span>,<span class="token string">'age'</span>:20<span class="token punctuation">}</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token assign-left variable">dictb</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token builtin class-name">:</span><span class="token string">'ruan2'</span>,<span class="token string">'age'</span>:40,<span class="token string">'add'</span><span class="token builtin class-name">:</span><span class="token string">'w shi add'</span><span class="token punctuation">}</span></pre></td></tr><tr><td data-num="3"></td><td><pre>dictb.update<span class="token punctuation">(</span>dicta<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>print<span class="token punctuation">(</span>dictb<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211101115242-qazr588.png" alt="image.png"></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211101115348-bb0l147.png" alt="image.png"></p><h4 id="内建函数使用"><a class="anchor" href="#内建函数使用">#</a> 内建函数使用</h4><p>type（）</p><p>cmp（）</p><p>len（）</p><p>hash（）</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211101114202-rdvz2pt.png" alt="image.png"></p><p>内建 cmp（）函数比较两个 dict 时，先比较长度，后比值，输出 1 或 - 1</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211101114401-h4f1qop.png" alt="image.png"></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211101114644-qffksiw.png" alt="image.png"></p><h3 id="dict特点"><a class="anchor" href="#dict特点">#</a> dict 特点</h3><p>dict 有以下几个特点：</p><ol><li>查找和插入的速度极快，不会随着 key 的增加而变慢；</li><li>需要占用大量的内存，内存浪费多。</li></ol><p>而 list 相反：</p><ol><li>查找和插入的时间随着元素的增加而增加；</li><li>占用空间小，浪费内存很少。<br><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211101115427-fu3s2zu.png" alt="image.png"><br><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211101115451-utxi9ct.png" alt="image.png"></li></ol><h2 id="set集合"><a class="anchor" href="#set集合">#</a> set 集合</h2><p>也是一组 key 的集合，但不存储 value。由于 key 不能重复，所以，在 set 中，没有重复的 key。</p><p>重复元素在 set 中自动被过滤</p><h3 id="定义-2"><a class="anchor" href="#定义-2">#</a> 定义</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012135934-u0n1j77.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012135953-sqa88s1.png" alt="image.png"></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012140114-5azj1sa.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012140127-ledkv1s.png" alt="image.png"></p><h3 id="setaddkey添加元素"><a class="anchor" href="#setaddkey添加元素">#</a> set.add ('key') 添加元素</h3><p>但重复元素不添加，自动去重</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012140336-dwf2vgw.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012140344-dzsshz2.png" alt="image.png"></p><h3 id="setremovekey删除元素"><a class="anchor" href="#setremovekey删除元素">#</a> set.remove ('key') 删除元素</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012140511-5f9cwm4.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012140517-f6iolow.png" alt="image.png"></p><p>set 可以看成数学意义上的无序和无重复元素的集合，</p><p>因此，两个 set 可以做数学意义上的交集、并集等操作：</p><h3 id="两个set交集"><a class="anchor" href="#两个set交集">#</a> &amp; 两个 set 交集</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012140903-1l3we66.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012140912-8itf6ek.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211022170721-h5hmgxr.png" alt="image.png"></p><h3 id="两个set并集"><a class="anchor" href="#两个set并集">#</a> | 两个 set 并集</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012140922-5bjlj5g.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012140933-edbys90.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211022171729-b4k8xhd.png" alt="image.png"></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211101115701-3dt5x4j.png" alt="image.png"></p><h3 id="map的显示"><a class="anchor" href="#map的显示">#</a> map () 的显示</h3><p>打印 map 对象可以看到 map 对象返回的是一个地址，不是真实的数据</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span>对象<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>it <span class="token keyword">for</span> it <span class="token keyword">in</span> <span class="token builtin">map</span>对象<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><h2 id="数据类型转换"><a class="anchor" href="#数据类型转换">#</a> 数据类型转换</h2><h3 id="int"><a class="anchor" href="#int">#</a> int（）</h3><h3 id="float"><a class="anchor" href="#float">#</a> float（）</h3><h3 id="str"><a class="anchor" href="#str">#</a> str（）</h3><h3 id="bool"><a class="anchor" href="#bool">#</a> bool（）</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012142636-iblnu9y.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012142645-gb2u1fg.png" alt="image.png"></p><h2 id="条件判断"><a class="anchor" href="#条件判断">#</a> 条件判断</h2><h3 id="if"><a class="anchor" href="#if">#</a> if</h3><p>if else</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>a<span class="token operator">=</span><span class="token number">100</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">if</span> a<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">else</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">-</span>a<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009165335-jr8xtfq.png" alt="image.png"></p><p>if</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">if</span> <span class="token boolean">True</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'True'</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009165309-ymhiihv.png" alt="image.png"></p><p>if elif elif else</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>name<span class="token operator">=</span><span class="token string">'zhangsan'</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">if</span> name<span class="token operator">==</span><span class="token string">'zhangsan'</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我是'</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">elif</span> name<span class="token operator">==</span><span class="token string">'lisi'</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我是'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">elif</span> name<span class="token operator">==</span><span class="token string">'wangwu'</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我是'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">else</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我谁的不是'</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009165511-spws02g.png" alt="image.png"></p><h2 id="input输入输出"><a class="anchor" href="#input输入输出">#</a> input（）输入输出</h2><p>input () 返回的数据类型是 str</p><p>print（）</p><h2 id="循环-迭代"><a class="anchor" href="#循环-迭代">#</a> 循环 迭代</h2><p>list，tuple，dict 都可循环</p><p>Python 的  <code>for</code>  循环本质上就是通过不断调用  <code>next()</code>  函数实现的，计算是惰性的</p><p>dict 循环按照 value 时：for value in dict.values</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">for</span> value <span class="token keyword">in</span> d<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><h3 id="for-in"><a class="anchor" href="#for-in">#</a> for in</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token builtin">sum</span><span class="token operator">=</span><span class="token number">0</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token builtin">sum</span><span class="token operator">=</span><span class="token builtin">sum</span><span class="token operator">+</span>i</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009172805-wrb6kr2.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009172805-wrb6kr2.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009172821-rdyglwd.png" alt="image.png"></p><h3 id="while"><a class="anchor" href="#while">#</a> while</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>sum2<span class="token operator">=</span><span class="token number">0</span></pre></td></tr><tr><td data-num="2"></td><td><pre>k<span class="token operator">=</span><span class="token number">0</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    sum2<span class="token operator">=</span>sum2<span class="token operator">+</span>k</pre></td></tr><tr><td data-num="5"></td><td><pre>    k<span class="token operator">=</span>k<span class="token operator">+</span><span class="token number">1</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>sum2<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009172821-rdyglwd.png" alt="image.png"></p><h3 id="break"><a class="anchor" href="#break">#</a> break</h3><p>如果要提前结束循环，可以用  <code>break</code>  语句</p><h3 id="continue"><a class="anchor" href="#continue">#</a> continue</h3><p>通过  <code>continue</code>  语句，跳过当前的这次循环，直接开始下一次循环</p><h2 id="生成器"><a class="anchor" href="#生成器">#</a> 生成器</h2><p>在 Python 中，这种一边循环一边计算的机制，称为生成器：generator。</p><p>包括生成器和带  <code>yield</code>  的 generator function。</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>g <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">*</span> x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012191035-5wbqtm5.png" alt="image.png"></p><p>访问大文件</p><p>yield</p><h2 id="isinstance迭代器"><a class="anchor" href="#isinstance迭代器">#</a> isinstance（）迭代器</h2><p>直接作用于  <code>for</code>  循环的对象统称为可迭代对象，都是迭代器 Iterable</p><p><code>list</code> 、 <code>tuple</code> 、 <code>dict</code> 、 <code>set</code> 、 <code>str</code></p><p><code>list</code> 、 <code>dict</code> 、 <code>str</code>  虽然是  <code>Iterable</code> ，却不是  <code>Iterator</code> 。</p><p><code>list</code> 、 <code>dict</code> 、 <code>str</code>  等  <code>Iterable</code>  变成  <code>Iterator</code>  可以使用 **iter ()** 函数</p><p>以直接作用于  <code>for</code>  循环的数据类型有以下几种：</p><p>一类是集合数据类型，如  <code>list</code> 、 <code>tuple</code> 、 <code>dict</code> 、 <code>set</code> 、 <code>str</code>  等；</p><p>一类是  <code>generator</code> ，包括生成器和带  <code>yield</code>  的 generator function。</p><p>可以使用 **isinstance ()** 判断一个对象是否是  <code>Iterable</code>  对象__iter__：</p><p>迭代对象</p><p>判断是不是可以迭代，用 Iterable</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> collections <span class="token keyword">import</span> Iterable</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">True</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">True</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">False</span></pre></td></tr></tbody></table></figure><p>判断是不是迭代器，用 Iterator</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> collections <span class="token keyword">import</span> Iterator</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Iterator<span class="token punctuation">)</span>  <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">False</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Iterator<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">False</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token builtin">isinstance</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Iterator<span class="token punctuation">)</span>  <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">True</span></pre></td></tr></tbody></table></figure><p>Python 中 list，truple，str，dict 这些都可以被迭代，但他们并不是迭代器，为什么：：因为和迭代器相比有一个很大的不同，list/truple/map/dict 这些数据的大小是确定的，也就是说有多少事可知的。但迭代器不是，迭代器不知道要执行多少次，所以可以理解为不知道有多少个元素，每调用一次 next ()，就会往下走一步，是惰性的。</p><h2 id="函数"><a class="anchor" href="#函数">#</a> 函数</h2><p>抽象</p><p>将函数抽象成一个函数名称，不看内部结构直接调用方法</p><p>返回类型 函数名（输入参数）：</p><p>函数体</p><h3 id="调用函数"><a class="anchor" href="#调用函数">#</a> 调用函数</h3><p>要调用一个函数，需要知道函数的名称和参数</p><p>绝对值 abs</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012142010-d503sa9.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012142024-cscdoiu.png" alt="image.png"></p><h3 id="定义函数"><a class="anchor" href="#定义函数">#</a> 定义函数</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">def</span> <span class="token function">myabs</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">if</span> x<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">return</span> x</pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">if</span> x<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">return</span> <span class="token operator">-</span>x</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>myabs<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012144653-0ds9bc4.png" alt="image.png"></p><h3 id="空函数"><a class="anchor" href="#空函数">#</a> 空函数</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">def</span> <span class="token function">nufun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">pass</span></pre></td></tr></tbody></table></figure><p><code>pass</code>  可以用来作为占位符</p><h3 id="函数-参数检查"><a class="anchor" href="#函数-参数检查">#</a> 函数 参数检查</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">def</span> <span class="token function">my_init_abs</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token builtin">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">'no no no'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">else</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">if</span> x<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">if</span> x<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>my_init_abs<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">90</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012144640-6xnfm9s.png" alt="image.png"></p><h3 id="可返回多个值函数"><a class="anchor" href="#可返回多个值函数">#</a> 可返回多个值，函数</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">def</span> <span class="token function">return_much</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    a<span class="token operator">=</span><span class="token string">'返回'</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    b<span class="token operator">=</span><span class="token string">'我也返回'</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    c<span class="token operator">=</span><span class="token string">'我也要返回'</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">return</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>return_much<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>return_much<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012144955-kyvotx4.png" alt="image.png"></p><h3 id="函数参数"><a class="anchor" href="#函数参数">#</a> 函数参数</h3><p>*<strong>args 是可变参数，args 接收的是一个 tuple；</strong></p><p>**<strong>kw 是关键字参数，kw 接收的是一个 dict</strong>。</p><p><code>power(x)</code>  函数，参数  <code>x</code>  就是一个位置参数，可单个变量，list，set，tuple</p><p><code>power(*x)</code>  函数，可传入单个变量，list，set，tuple，可以传入任意个参数或 0 个参数</p><p><code>power(**kw)</code>  函数，字典 dict</p><p>可变参数允许你传入 0 个或任意个参数，这些可变参数在函数调用时自动组装为一个 tuple。</p><p>而关键字参数允许你传入 0 个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个<strong> dict</strong>.</p><p><code>power(x, n)</code> ，用来计算 x<sup>n</sup></p><p><code>power(x, n)</code>  函数有两个参数： <code>x</code>  和  <code>n</code></p><p>默认参数，此时 age 和 city 为默认参数，可传值改变也可不变【不用传值】</p><p><code>power(L=None)</code>  函数有 None 这个不变对象，可用 list</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">def</span> <span class="token function">enroll</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> city<span class="token operator">=</span><span class="token string">'Beijing'</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'name:'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'gender:'</span><span class="token punctuation">,</span> gender<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'age:'</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'city:'</span><span class="token punctuation">,</span> city<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012151610-9n1rxhq.png" alt="image.png"></p><h4 id="必选参数"><a class="anchor" href="#必选参数">#</a> 必选参数</h4><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">def</span> <span class="token function">a1</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">return</span> x</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">(</span><span class="token number">12.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">(</span><span class="token string">'ruan'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"key"</span><span class="token punctuation">:</span><span class="token string">"vleaue"</span><span class="token punctuation">,</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'ruan'</span><span class="token punctuation">,</span><span class="token string">'mun'</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012153014-r27ykfm.png" alt="image.png"></p><h4 id="默认参数"><a class="anchor" href="#默认参数">#</a> = 默认参数</h4><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">def</span> <span class="token function">a2</span><span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">return</span> x</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a2<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a2<span class="token punctuation">(</span><span class="token number">12.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a2<span class="token punctuation">(</span><span class="token string">'ruan'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a2<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a2<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a2<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a2<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"key"</span><span class="token punctuation">:</span><span class="token string">"vleaue"</span><span class="token punctuation">,</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'ruan'</span><span class="token punctuation">,</span><span class="token string">'mun'</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012153014-r27ykfm.png" alt="image.png"></p><h4 id="可变参数"><a class="anchor" href="#可变参数">#</a> * 可变参数</h4><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">def</span> <span class="token function">a3</span><span class="token punctuation">(</span><span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">return</span> x</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span><span class="token number">12.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span><span class="token string">'ruan'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"key"</span><span class="token punctuation">:</span><span class="token string">"vleaue"</span><span class="token punctuation">,</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'ruan'</span><span class="token punctuation">,</span><span class="token string">'mun'</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012154346-2eahz0b.png" alt="image.png"></p><h4 id="关键字参数"><a class="anchor" href="#关键字参数">#</a> ** 关键字参数</h4><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">def</span> <span class="token function">a3</span><span class="token punctuation">(</span><span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">return</span> kw</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span>kw<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span>kw<span class="token operator">=</span><span class="token number">12.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span>kw<span class="token operator">=</span><span class="token string">'ruan'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span>kw<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span>kw<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span>kw<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span>kw<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span>kw<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span>kw<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"key"</span><span class="token punctuation">:</span><span class="token string">"vleaue"</span><span class="token punctuation">,</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'ruan'</span><span class="token punctuation">,</span><span class="token string">'mun'</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012154409-tp9u2z5.png" alt="image.png"></p><h3 id="递归函数"><a class="anchor" href="#递归函数">#</a> 递归函数</h3><p>在函数内部，可以调用其他函数。</p><p>一个函数在<strong>内部调用自身本身</strong>，这个函数就是<strong>递归函数</strong>。</p><p>使用递归函数需要<strong>注意防止栈溢出</strong></p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token comment">#递归函数</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">def</span> <span class="token function">funmyself</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">if</span> x<span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">return</span> x<span class="token operator">+</span>funmyself<span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">elif</span> x<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">return</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>funmyself<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012155139-884p9as.png" alt="image.png"></p><p>解决栈溢出方法：</p><p><strong>尾递归</strong>优化，事实上尾递归和循环的效果是一样的</p><p>尾递归是指，在函数返回的时候，<strong>调用自身</strong>本身，并且，<strong>return 语句不能包含表达式</strong></p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token comment">#尾递归</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">def</span> <span class="token function">funmyself2</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">return</span>  funmyself2_it<span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">def</span>  <span class="token function">funmyself2_it</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>pro<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">if</span> n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">return</span> pro</pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">else</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">return</span> funmyself2<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>n</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>funmyself2<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012160333-tngb33o.png" alt="image.png"></p><p>此时 funmyself2 是尾递归函数</p><h2 id="转义字符"><a class="anchor" href="#转义字符">#</a> 转义字符  <code>\</code></h2><p>转义字符  <code>\</code>  可以转义很多字符，比如</p><p><code>\n</code>  表示换行，</p><p><code>\t</code>  表示制表符，</p><p>字符  <code>\</code>  本身也要转义，所以  <code>\\</code>  表示的字符就是  <code>\</code></p><p>Python 还允许用  <code>r''</code>  表示  <code>''</code>  内部的字符串默认不转义</p><h2 id="运算符and-or和not"><a class="anchor" href="#运算符and-or和not">#</a> 运算符 and、or 和 not</h2><p>运算优先级：not&gt;or&gt;and</p><h2 id="除法"><a class="anchor" href="#除法">#</a> 除法 ///</h2><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">//</span><span class="token number">3</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><h4 id="除法一-浮点数"><a class="anchor" href="#除法一-浮点数">#</a> 除法一 / 浮点数</h4><h4 id="除法二-地板除-整数"><a class="anchor" href="#除法二-地板除-整数">#</a> 除法二  //  地板除 整数</h4><p><code>/</code>  除法计算结果是浮点数，即使是两个整数恰好整除，结果也是浮点数：</p><p><code>//</code> ，称为地板除，两个整数的除法仍然是整数：</p><h2 id="取余"><a class="anchor" href="#取余">#</a> 取余 %</h2><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">%</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">%</span><span class="token number">7</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">%</span><span class="token number">20</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">#如果 a% b a&gt;b 则结果为 a</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009141744-i2nxg58.png" alt="image.png"></p><h2 id="字符编码"><a class="anchor" href="#字符编码">#</a> 字符编码</h2><p><code>ASCII</code>  编码</p><p>8 个比特（bit）作为一个字节（byte）</p><p>一个字节能表示的最大的整数就是 255（二进制 11111111 = 十进制 255）</p><p>两个字节可以表示的最大整数是  <code>65535</code> ，4 个字节可以表示的最大整数是  <code>4294967295</code></p><p>大写字母  <code>A</code>  的编码是  <code>65</code> ，二进制的  <code>01000001</code> ，小写字母  <code>z</code>  的编码是  <code>122</code></p><p>Unicode 把所有语言都统一到一套编码里，这样就不会再有乱码问题</p><p>ASCII 编码是 1 个字节，而 Unicode 编码通常是 2 个字节</p><p><strong>ASCll 出现乱码问题引入 Unicode 编码存储空间多了一倍引入 UTF-8 编码</strong></p><p>utf-8：将<strong> Unicode 字符根据不同的数字大小编码成 1-6 个字节，常用的英文字母被编码成 1 个字节，汉字通常是 3 个字节，</strong></p><table><thead><tr><th>字符</th><th>ASCII</th><th>Unicode</th><th>UTF-8</th></tr></thead><tbody><tr><td>A</td><td>01000001</td><td>00000000 01000001</td><td>01000001</td></tr><tr><td>中</td><td>x</td><td>01001110 00101101</td><td>11100100 10111000 10101101</td></tr></tbody></table><p>在计算机内存中，统一使用 Unicode 编码，当需要保存到硬盘或者需要传输的时候，就转换为 UTF-8 编码。</p><p>用记事本编辑的时候，从文件读取的 UTF-8 字符被转换为 Unicode 字符到内存里，编辑完成后，保存的时候再把 Unicode 转换为 UTF-8 保存到文件</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009142650-uopgqob.png" alt="image.png"></p><p>浏览网页的时候，服务器会把动态生成的 Unicode 内容转换为 UTF-8 再传输到浏览器：</p><p><img data-src="https://www.liaoxuefeng.com/files/attachments/923923759189600/0" alt="web-utf-8"></p><h4 id="compile-字符串编译为字节代码"><a class="anchor" href="#compile-字符串编译为字节代码">#</a> compile () 字符串编译为字节代码</h4><h4 id="编码转化"><a class="anchor" href="#编码转化">#</a> 编码转化</h4><h4 id="orda-字母转字符"><a class="anchor" href="#orda-字母转字符">#</a> ord ('A') 字母转字符</h4><h4 id="chr65-字符转字母"><a class="anchor" href="#chr65-字符转字母">#</a> chr (65) 字符转字母</h4><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>a<span class="token operator">=</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>b<span class="token operator">=</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009144810-rm45nsz.png" alt="image.png"></p><h4 id="bstr转为字节类型bytes"><a class="anchor" href="#bstr转为字节类型bytes">#</a> b'str' 转为字节类型 bytes</h4><p><code>bytes</code>  类型的数据用带  <code>b</code>  前缀的单引号或双引号表示</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>x <span class="token operator">=</span> <span class="token string">b'ABC'</span></pre></td></tr></tbody></table></figure><p>要注意区分  <code>'ABC'</code>  和  <code>b'ABC'</code> ，前者是  <code>str</code> ，后者虽然内容显示得和前者一样，但  <code>bytes</code>  的每个字符都只占用一个字节。</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009145112-3dmegln.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009150224-kn57ioe.png" alt="image.png"></p><h4 id="strencodeascii-str-变为-bytes"><a class="anchor" href="#strencodeascii-str-变为-bytes">#</a> str.encode('ascii')  <code>str</code>  变为  <code>bytes </code></h4><p><code>ASCII</code></p><p><code>UTF-8</code></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009150118-wy36xea.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009150204-81jvyjd.png" alt="image.png"></p><h4 id="strdecodeutf-8bytes变为-str"><a class="anchor" href="#strdecodeutf-8bytes变为-str">#</a> str.decode('utf-8') <code>bytes</code>  变为  <code>str</code></h4><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">b'abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">b'abc'</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">b'abc'</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009150844-zvt6jkv.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009150746-31uq63m.png" alt="image.png"></p><p>len（str）计算字符数</p><p>函数计算的是  <code>str</code>  的字符数，如果换成  <code>bytes</code> ， <code>len()</code>  函数就计算字节数</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token string">b'abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token string">'中'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token string">'中'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009151234-rhao6fv.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009151321-6k73tn8.png" alt="image.png"></p><h2 id="特殊注释"><a class="anchor" href="#特殊注释">#</a> 特殊注释</h2><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token comment">#!/usr/bin/env python3</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment"># -*- coding: utf-8 -*-</span></pre></td></tr></tbody></table></figure><p>第一行注释是为了告诉 Linux/OS X 系统，这是一个 Python 可执行程序，<strong>Windows 系统会忽略这个注释</strong>；</p><p>第二行注释是为了告诉 Python 解释器，<strong>按照 UTF-8 编码读取源代码</strong>，否则，你在源代码中写的中文输出可能会有乱码。</p><h2 id="占位符-格式化"><a class="anchor" href="#占位符-格式化">#</a> 占位符 格式化</h2><h3 id="占位符s-d-f"><a class="anchor" href="#占位符s-d-f">#</a> 占位符 % s % d % f</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009152324-rmac8lz.png" alt="image.png"></p><p>格式化方式和 C 语言是一致</p><p><code> %</code>  运算符就是用来格式化字符串的。</p><p>在字符串内部，</p><p><code>%s</code>  表示用字符串替换，</p><p><code>%d</code>  表示用整数替换，</p><p>有几个  <code>%?</code>  占位符，后面就跟几个变量或者值，顺序要对应好。如果只有一个  <code>%?</code> ，括号可以省略</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009152708-zy7vi8x.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009152722-wq5flos.png" alt="image.png"></p><table><thead><tr><th>占位符</th><th>替换内容</th></tr></thead><tbody><tr><td>%d</td><td>整数</td></tr><tr><td>%f</td><td>浮点数</td></tr><tr><td>%s</td><td>字符串</td></tr><tr><td>%x</td><td>十六进制整数</td></tr></tbody></table><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009153422-r1s8f5z.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009153433-1uhb1w3.png" alt="image.png"></p><p>转义： <code>%%</code>  来表示一个  <code>%</code></p><h3 id="format格式化字符串"><a class="anchor" href="#format格式化字符串">#</a> format（）格式化字符串</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009154141-a3v7tnj.png" alt="image.png"></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009154153-o6u9yd7.png" alt="image.png"></p><h3 id="f-string-格式化字符串"><a class="anchor" href="#f-string-格式化字符串">#</a> f-string 格式化字符串</h3><p><code>{r}</code>  被变量  <code>r</code>  的值替换， <code>{s:.2f}</code>  被变量  <code>s</code>  的值替换，并且  <code>:</code>  后面的  <code>.2f</code>  指定了格式化参数（即保留两位小数），因此， <code>{s:.2f}</code>  的替换结果是  <code>19.62</code></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009154406-qahm3f7.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009154432-m2z0xx5.png" alt="image.png"></p><h2 id="函数式编程"><a class="anchor" href="#函数式编程">#</a> 函数式编程</h2><p>函数是 Python 内建支持的一种封装，通过层层函数进行调用</p><p>#面向过程的程序设计 #：把复杂任务分解成简单的任务，这种分解可以称之为面向过程的程序设计</p><p>函数式和函数的区别：</p><p>对比例子：计算和计算器的区别</p><p>编程语言，就是越低级的语言，越贴近计算机，抽象程度低，执行效率高，比如 C 语言；越高级的语言，越贴近计算，抽象程度高，执行效率低，比如 Lisp 语言</p><p>Python 不是纯函数式编程语言</p><p>函数式编程就是一种抽象程度很高的编程范式，</p><p>纯粹的函数式编程语言编写的<strong>函数没有变量</strong>，因此，任意一个函数，<strong>只要输入是确定的，输出就是确定的</strong></p><h3 id="函数式编程特点"><a class="anchor" href="#函数式编程特点">#</a> 函数式编程特点：</h3><ol><li>纯函数式编程语言函数没有变量，输入输出确定</li><li>允许本身作为参数传入另一个函数，允许返回一个函数</li></ol><h2 id="高阶函数"><a class="anchor" href="#高阶函数">#</a> 高阶函数</h2><p>参数中有函数</p><p>高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回</p><h3 id="变量可以指向函数"><a class="anchor" href="#变量可以指向函数">#</a> 变量可以指向函数</h3><p>a = 函数</p><p>求绝对值的函数  <code>abs()</code>  为例</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">abs</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211019114343-h6egecv.png" alt="image.png"></p><p>abs（-10）是函数调用，abs 是函数本身</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>k<span class="token operator">=</span><span class="token builtin">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">#函数本身也可以赋值给变量</span></pre></td></tr><tr><td data-num="4"></td><td><pre>h<span class="token operator">=</span><span class="token builtin">abs</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>h<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211019114757-z778j3c.png" alt="image.png"></p><p>结论：函数本身也可以赋值给变量，即：# 变量可以指向函数。#</p><h3 id="函数名也是变量"><a class="anchor" href="#函数名也是变量">#</a> 函数名也是变量</h3><p>#函数名 #：<strong>其实就是指向函数的变量</strong></p><p>a () 中 a 是指向函数 a（）的变量</p><h3 id="传入函数"><a class="anchor" href="#传入函数">#</a> 传入函数</h3><p>既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。</p><p>#高阶函数 #：<strong>一个函数就可以接收另一个函数作为参数</strong></p><p>b()</p><p>a(b)</p><p>x=a</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">return</span> <span class="token builtin">abs</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">def</span> <span class="token function">a</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">return</span> f<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">+</span>f<span class="token punctuation">(</span>b<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    a1<span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    a2<span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">(</span>a1<span class="token punctuation">,</span>a2<span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211019115835-q2esytb.png" alt="image.png"></p><p>此时函数 a 为高阶函数，需要调用 f 函数作为参数</p><h2 id="mapreduce-内建函数"><a class="anchor" href="#mapreduce-内建函数">#</a> map/reduce 内建函数</h2><p>内建了  <code>map()</code>  和  <code>reduce()</code>  函数 高阶函数</p><h3 id="map函数处理生成新iterator迭代器"><a class="anchor" href="#map函数处理生成新iterator迭代器">#</a> map（）函数处理生成新 Iterator 迭代器</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211019131933-ut47b16.png" alt="image.png"> 两个参数，函数名【函数本身】，需要处理的编程式 iterator</p><p><code>&lt;br /&gt;</code>  创建一个迭代器，使用每个迭代器中的参数计算函数。当最短迭代用尽时停止。</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token builtin">map</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> <span class="token operator">*</span>iterables<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">map</span> <span class="token builtin">object</span></pre></td></tr></tbody></table></figure><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">return</span> x<span class="token operator">*</span>x</pre></td></tr><tr><td data-num="3"></td><td><pre>r<span class="token operator">=</span><span class="token builtin">map</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211019133740-kxaifya.png" alt="image.png"></p><p>运算规则抽象</p><h3 id="reduce函数作用在序列上"><a class="anchor" href="#reduce函数作用在序列上">#</a> reduce（）函数作用在序列上</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211019142951-sxqvxp4.png" alt="image.png"></p><p>两个参数，函数名【函数本身】，需要处理的 #序列 #： sequence (序列) 是一组有顺序的元素的集合</p><p>序列基本样式 [下限：上限：步长]</p><p><code>reduce</code>  把结果继续和序列的下一个元素做累积计算</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token builtin">reduce</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token punctuation">[</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> x3<span class="token punctuation">,</span> x4<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> f<span class="token punctuation">(</span>f<span class="token punctuation">(</span>f<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span><span class="token punctuation">,</span> x3<span class="token punctuation">)</span><span class="token punctuation">,</span> x4<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> functools <span class="token keyword">import</span> <span class="token builtin">reduce</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">fn</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> x <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> y</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">reduce</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">13579</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211019142820-4tlrn7x.png" alt="image.png"></p><h2 id="filter过滤序列"><a class="anchor" href="#filter过滤序列">#</a> filter () 过滤序列</h2><p>参数和 map（）相似</p><p><code>filter()</code>  也接收一个函数和一个序列</p><h2 id="sorted排序"><a class="anchor" href="#sorted排序">#</a> sorted（）排序</h2><p>高阶函数<img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211020184319-dzvm55o.png" alt="image.png"></p><p>参数：排序对象，key = 函数</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>sorted<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">36</span>, <span class="token number">5</span>, -12, <span class="token number">9</span>, -21<span class="token punctuation">]</span>, <span class="token assign-left variable">key</span><span class="token operator">=</span>abs<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p>排序的核心是比较两个元素的大小</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>print<span class="token punctuation">(</span>sorted<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1,2</span>,353,6,3,234,43,435<span class="token punctuation">]</span><span class="token punctuation">))</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211020184421-43dcfax.png" alt="image.png"></p><p>key 指定绝对值大小排序</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>print<span class="token punctuation">(</span>sorted<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1,2</span>,353,6,3,234,43,435,-242,-34,34,35<span class="token punctuation">]</span>,key<span class="token operator">=</span>abs<span class="token punctuation">))</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211020184629-q7j7zxx.png" alt="image.png"></p><h2 id="返回函数"><a class="anchor" href="#返回函数">#</a> 返回函数</h2><h3 id="函数作为返回值"><a class="anchor" href="#函数作为返回值">#</a> 函数作为返回值</h3><p>高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token comment"># 如果不需要立刻求和，而是在后面的代码中，</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment"># 根据需要再计算怎么办？可以不返回求和的结果，而是返回求和的函数：</span></pre></td></tr><tr><td data-num="3"></td><td><pre>def zary_sum<span class="token punctuation">(</span>a<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="4"></td><td><pre>    def sum<span class="token punctuation">(</span><span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token assign-left variable">sum1</span><span class="token operator">=</span><span class="token number">0</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> a:</pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token assign-left variable">sum1</span><span class="token operator">=</span>sum1+i</pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token builtin class-name">return</span> sum1</pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token builtin class-name">return</span> <span class="token function">sum</span></pre></td></tr><tr><td data-num="10"></td><td><pre>print<span class="token punctuation">(</span>type<span class="token punctuation">(</span>zary_sum<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1,2</span>,3,4<span class="token punctuation">]</span><span class="token punctuation">))</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token assign-left variable">f</span><span class="token operator">=</span>zary_sum<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1,2</span>,3,4<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>print<span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token punctuation">))</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211021100621-oot0dd6.png" alt="image.png"></p><p>调用返回函数时，每次调用都会新生成一个函数</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211021100747-ho01xzp.png" alt="image.png"></p><h2 id="闭包"><a class="anchor" href="#闭包">#</a> 闭包</h2><p>当一个函数的返回值是另外一个函数，</p><p>而返回的那个函数如果调用了其父函数内部的其它变量，如果 <strong>返回的这个函数在外部被执行，就产生了闭包</strong> 。</p><p><strong>返回函数中，返回的函数调用父函数的内部变量</strong></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211021100950-gl5liu8.png" alt="image.png"></p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token comment">#返回函数</span></pre></td></tr><tr><td data-num="2"></td><td><pre>def count<span class="token punctuation">(</span><span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token assign-left variable">fs</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1,4</span><span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="5"></td><td><pre>        def f<span class="token punctuation">(</span><span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token builtin class-name">return</span> i*i</pre></td></tr><tr><td data-num="7"></td><td><pre>        fs.append<span class="token punctuation">(</span>f<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token builtin class-name">return</span> fs</pre></td></tr><tr><td data-num="9"></td><td><pre>f1,f2,f3<span class="token operator">=</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>print<span class="token punctuation">(</span>f1<span class="token punctuation">(</span><span class="token punctuation">)</span>,f2<span class="token punctuation">(</span><span class="token punctuation">)</span>,f3<span class="token punctuation">(</span><span class="token punctuation">))</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211021103727-wtd0kdc.png" alt="image.png"></p><p>返回一个函数时，牢记该函数并未执行，返回函数中不要引用任何可能会变化的变量。</p><h2 id="lambda匿名函数"><a class="anchor" href="#lambda匿名函数">#</a> lambda（）匿名函数</h2><p>lambda 关键字 函数参数：函数表达式</p><p>传入函数时，有些时候，不需要显式地定义函数</p><p>Python 对匿名函数的支持有限，只有一些简单的情况下可以使用匿名函数。</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>lambda x:x*x</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">#等价于</span></pre></td></tr><tr><td data-num="3"></td><td><pre>def f<span class="token punctuation">(</span>x<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token builtin class-name">return</span> x*x</pre></td></tr></tbody></table></figure><p>关键字  <code>lambda</code>  表示匿名函数，冒号前面的  <code>x</code>  表示函数参数，只能一个表达式</p><p>不用写  <code>return</code> ，返回值就是该表达式的结果。</p><p>匿名函数也是一个函数对象</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token assign-left variable">f</span><span class="token operator">=</span>lamdba x:x*x</pre></td></tr></tbody></table></figure><p>判断奇数函数</p><p>原函数：</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>def is_odd<span class="token punctuation">(</span>n<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token builtin class-name">return</span> n % <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>L <span class="token operator">=</span> list<span class="token punctuation">(</span>filter<span class="token punctuation">(</span>is_odd, range<span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">20</span><span class="token punctuation">))</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p>采用匿名函数修改</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token assign-left variable">l</span><span class="token operator">=</span>list<span class="token punctuation">(</span>filter<span class="token punctuation">(</span>lambda x:x%2<span class="token operator">==</span><span class="token number">1</span>,range<span class="token punctuation">(</span><span class="token number">1,20</span><span class="token punctuation">))</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>print<span class="token punctuation">(</span>l<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211021143505-wbqh836.png" alt="image.png"></p><h2 id="装饰器-decorator"><a class="anchor" href="#装饰器-decorator">#</a> 装饰器 Decorator</h2><h3 id="本质上装饰器就是一个返回函数的高阶函数"><a class="anchor" href="#本质上装饰器就是一个返回函数的高阶函数">#</a> 本质上，装饰器就是一个返回函数的高阶函数</h3><p>@log 等价于</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>now <span class="token operator">=</span> log<span class="token punctuation">(</span>now<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p>由于函数也是一个对象，而且函数对象可以被赋值给变量，</p><p>所以，通过变量也能调用该函数</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211022101101-ncgju0i.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211022101111-tgdwt0q.png" alt="image.png"></p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>def log<span class="token punctuation">(</span>func<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="2"></td><td><pre>    def wrapper<span class="token punctuation">(</span>*args,**kwargs<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="3"></td><td><pre>        print<span class="token punctuation">(</span><span class="token string">'call %s'</span>% func.__name__<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token builtin class-name">return</span> func<span class="token punctuation">(</span>*args,**kwargs<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token builtin class-name">return</span> wrapper<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">#func 为参数所以是高阶函数</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">#return 函数所以是返回函数，</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">#没有调用父函数中参数，所以不是闭包</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211022110733-h27x1zh.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211022110058-zyo7xpn.png" alt="image.png"></p><p>场景注意：</p><p>无 @装饰器时函数不调用，需要参数才调用</p><p>当 @时会直接调用装饰器定义函数然后执行函数，不用调用函数</p><p>三层时，传入参数</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>def log1<span class="token punctuation">(</span>text<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="2"></td><td><pre>    def decorator<span class="token punctuation">(</span>func<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="3"></td><td><pre>        def wapper<span class="token punctuation">(</span>*args,**kw<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="4"></td><td><pre>            print<span class="token punctuation">(</span><span class="token string">'%s %s'</span>%<span class="token punctuation">(</span>text,func.__name__<span class="token punctuation">))</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            <span class="token builtin class-name">return</span> func<span class="token punctuation">(</span>*args,**kw<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token builtin class-name">return</span> wapper</pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token builtin class-name">return</span> decorator</pre></td></tr><tr><td data-num="8"></td><td><pre>@log1<span class="token punctuation">(</span><span class="token string">'ruan'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>def now3<span class="token punctuation">(</span><span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="10"></td><td><pre>    print<span class="token punctuation">(</span><span class="token string">"hhh"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>now3<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p>相当于在返回高阶函数上还有一个函数，所以返回时应该还要调用一次</p><h2 id="wraps-常用装饰器"><a class="anchor" href="#wraps-常用装饰器">#</a> @wraps 常用装饰器</h2><p>当装饰器是个闭包时，装饰器调用变量会改变增加 @wraps 后装饰器内的变量不变</p><p>装饰器在装饰一个函数时，，原函数就成了一个新的函数，也</p><p>就是说其属性会发生变化，所以为了 <strong>不改变原函数的属性</strong>，</p><p>我们会调用 functools 中的 wraps 装饰器来保证原函数的属性不变</p><h4 id="不加wraps时"><a class="anchor" href="#不加wraps时">#</a> 不加 wraps 时</h4><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>@wraps<span class="token punctuation">(</span>func<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>from functools <span class="token function">import</span> wraps</pre></td></tr><tr><td data-num="2"></td><td><pre>def wrap<span class="token punctuation">(</span>func<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="3"></td><td><pre>   </pre></td></tr><tr><td data-num="4"></td><td><pre>    def b<span class="token punctuation">(</span><span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token string">'b'</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        print<span class="token punctuation">(</span><span class="token string">'decorator:'</span>,b.__name__<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        print<span class="token punctuation">(</span><span class="token string">'funname'</span>,func.__name__<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        func<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token builtin class-name">return</span> b</pre></td></tr><tr><td data-num="10"></td><td><pre>@wrap</pre></td></tr><tr><td data-num="11"></td><td><pre>def a<span class="token punctuation">(</span><span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token string">'a'</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    print<span class="token punctuation">(</span><span class="token string">'name'</span>,a.__name__<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>a<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211022115935-kgsz7b2.png" alt="image.png"></p><p>加装饰器 wraps 时</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>from functools <span class="token function">import</span> wraps</pre></td></tr><tr><td data-num="2"></td><td><pre>def wrap<span class="token punctuation">(</span>func<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="3"></td><td><pre>    @wraps<span class="token punctuation">(</span>func<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    def b<span class="token punctuation">(</span><span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token string">'b'</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        print<span class="token punctuation">(</span><span class="token string">'decorator:'</span>,b.__name__<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        print<span class="token punctuation">(</span><span class="token string">'funname'</span>,func.__name__<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        func<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token builtin class-name">return</span> b</pre></td></tr><tr><td data-num="10"></td><td><pre>@wrap</pre></td></tr><tr><td data-num="11"></td><td><pre>def a<span class="token punctuation">(</span><span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token string">'a'</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    print<span class="token punctuation">(</span><span class="token string">'name'</span>,a.__name__<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>a<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211022115950-2j3i7ht.png" alt="image.png"></p><p>闭包的概念：调用父函数中的变量的函数，为了保证数据安全。变量作用域只在函数内部，可在闭包中操作数据。</p><p>装饰器返回为什么是函数名（函数内存地址）而不直接执行函数？</p><p>当有参数传入时，可直接与调用的函数中的值传入参数执行。</p><p>（）是运算符 f () 与 f.<strong>call</strong> () 等价：将 f 对象变成变成可调用的对象</p><h2 id="偏函数functools模块"><a class="anchor" href="#偏函数functools模块">#</a> 偏函数（functools 模块）</h2><p>属于 functools 模块</p><h3 id="作用"><a class="anchor" href="#作用">#</a> 作用：</h3><p>通过设定参数的默认值，降低函数调用的参数</p><p><code>int()</code>  函数默认按十进制转换</p><p>print(int('100',base=8))</p><p>经常调用于是重写一个函数 int2</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>def int2<span class="token punctuation">(</span>x, <span class="token assign-left variable">base</span><span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="2"></td><td><pre>    print<span class="token punctuation">(</span>int<span class="token punctuation">(</span>x, base<span class="token punctuation">))</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token builtin class-name">return</span> int<span class="token punctuation">(</span>x, base<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>print<span class="token punctuation">(</span>int2<span class="token punctuation">(</span><span class="token string">'2334'</span><span class="token punctuation">))</span></pre></td></tr></tbody></table></figure><p>采用偏函数</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token function">import</span> functools</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token assign-left variable">int3</span><span class="token operator">=</span>functools.partial<span class="token punctuation">(</span>int,base<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>print<span class="token punctuation">(</span>int3<span class="token punctuation">(</span><span class="token string">'46'</span><span class="token punctuation">))</span></pre></td></tr><tr><td data-num="4"></td><td><pre>print<span class="token punctuation">(</span>int<span class="token punctuation">(</span><span class="token punctuation">))</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211028103219-mdbldp6.png" alt="image.png"></p><p>functools.partial 的作用是将函数的特定参数固定住（设定为默认值）</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211028103645-7po81oc.png" alt="image.png"></p><p>创建偏函数的时候也可以接收，函数对象，*args，**kw</p><h2 id="模块"><a class="anchor" href="#模块">#</a> 模块</h2><p>python 包：作用区分相同名称的模块</p><p>模块相当于一个 py 文件</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211028105055-2xv0z2i.png" alt="image.png"></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211028105133-tkzgcka.png" alt="image.png"></p><h2 id="作用域"><a class="anchor" href="#作用域">#</a> 作用域</h2><p>仅仅在模块内部使用。在 Python 中，是通过  <code>_</code> 前缀来实现的。</p><h3 id="pubilc公开"><a class="anchor" href="#pubilc公开">#</a> pubilc 公开</h3><p>正常的函数和变量名是公开的（public）</p><h3 id="private非公开___"><a class="anchor" href="#private非公开___">#</a> private 非公开_,__</h3><p>_xxx 和__xxx 这样的函数或变量就是非公开的（private）</p><h2 id="安装第三方模块pip"><a class="anchor" href="#安装第三方模块pip">#</a> 安装第三方模块 pip</h2><p>pip install 模块名</p><h3 id="模块搜索路径"><a class="anchor" href="#模块搜索路径">#</a> 模块搜索路径</h3><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token function">import</span> sys</pre></td></tr><tr><td data-num="2"></td><td><pre>print<span class="token punctuation">(</span>sys.path<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p>两种方式：</p><ol><li>添加搜索路径<figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token function">import</span> sys</pre></td></tr><tr><td data-num="2"></td><td><pre>sys.path.append<span class="token punctuation">(</span><span class="token string">'/Users/michael/my_py_scripts'</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure></li><li>设置环境变量</li></ol><p>第二种方法是设置环境变量  <code>PYTHONPATH</code></p><h2 id="面向对象编程"><a class="anchor" href="#面向对象编程">#</a> 面向对象编程</h2><p>面向对象编程 ——Object Oriented Programming，简称 OOP，是一种程序设计思想</p><p>对象作为程序的基本单元，</p><p>一个对象包含了数据和操作数据的函数</p><p>数据封装、继承和多态是面向对象的三大特点</p><h2 id="类和实例"><a class="anchor" href="#类和实例">#</a> 类和实例</h2><p>面向对象最重要的概念就是类（Class）和实例（Instance）</p><p>类是抽象出来的模板</p><p>实例是根据类创建出的对象，每个对象可能有属性和方法</p><p>定义类是通过  <code>class</code>  关键字，类名通常是大写开头的单词</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>class Student<span class="token punctuation">(</span>object<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="2"></td><td><pre>    pass</pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211028113324-1nch2o5.png" alt="image.png"></p><p>！！！在类中定义函数有一点不同，定义佛如方法第一个参数永远是实例变量本身 self</p><p>仍然可以用默认参数、可变参数、关键字参数和命名关键字参数</p><h2 id="数据封装"><a class="anchor" href="#数据封装">#</a> 数据封装</h2><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>class Student<span class="token punctuation">(</span>object<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="2"></td><td><pre>    def __init__<span class="token punctuation">(</span>self, name, score<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="3"></td><td><pre>        self.name <span class="token operator">=</span> name</pre></td></tr><tr><td data-num="4"></td><td><pre>        self.score <span class="token operator">=</span> score</pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>    def get_grade<span class="token punctuation">(</span>self<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">if</span> self.score <span class="token operator">&gt;</span><span class="token operator">=</span> <span class="token number">90</span>:</pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token builtin class-name">return</span> <span class="token string">'A'</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">elif</span> self.score <span class="token operator">&gt;</span><span class="token operator">=</span> <span class="token number">60</span>:</pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token builtin class-name">return</span> <span class="token string">'B'</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        else:</pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token builtin class-name">return</span> <span class="token string">'C'</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211028113713-vhhvowi.png" alt="image.png"></p><h2 id="访问限制"><a class="anchor" href="#访问限制">#</a> 访问限制</h2><h3 id="作用-2"><a class="anchor" href="#作用-2">#</a> 作用：</h3><p><strong>确保了外部代码不能随意修改对象内部的状态</strong></p><p>实例的变量名如果以  <code>__</code> 开头，就变成了一个私有变量（private）</p><p>外部无法访问_name</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>class Student<span class="token punctuation">(</span>object<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="2"></td><td><pre>    def __init__<span class="token punctuation">(</span>self,name,age<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="3"></td><td><pre>        self._name<span class="token operator">=</span>name</pre></td></tr><tr><td data-num="4"></td><td><pre>        self.age<span class="token operator">=</span>age</pre></td></tr><tr><td data-num="5"></td><td><pre>    def print_name<span class="token punctuation">(</span>self<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="6"></td><td><pre>        print<span class="token punctuation">(</span>self._name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token builtin class-name">return</span> self.age,self._name</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token assign-left variable">a</span><span class="token operator">=</span>Student<span class="token punctuation">(</span><span class="token string">'ruan'</span>,23<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token assign-left variable">h</span><span class="token operator">=</span>a.print_name<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>print<span class="token punctuation">(</span>h<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211028114732-awu2k2m.png" alt="image.png"></p><p>若是要获取，修改变量增加 get，set 方式即可</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>class Student<span class="token punctuation">(</span>object<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="2"></td><td><pre>    def __init__<span class="token punctuation">(</span>self,name,age<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="3"></td><td><pre>        self._name<span class="token operator">=</span>name</pre></td></tr><tr><td data-num="4"></td><td><pre>        self.age<span class="token operator">=</span>age </pre></td></tr><tr><td data-num="5"></td><td><pre>    def get_name<span class="token punctuation">(</span>self<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token builtin class-name">return</span> self.name</pre></td></tr><tr><td data-num="7"></td><td><pre>    def set_name<span class="token punctuation">(</span>self,name<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="8"></td><td><pre>        self._name<span class="token operator">=</span>name</pre></td></tr></tbody></table></figure><p>Python 本身没有任何机制阻止你干坏事，一切全靠自觉。</p><p>类外部无法访问</p><h2 id="继承和多态"><a class="anchor" href="#继承和多态">#</a> 继承和多态</h2><h3 id="继承"><a class="anchor" href="#继承">#</a> 继承</h3><h4 id="多态"><a class="anchor" href="#多态">#</a> 多态</h4><p>在继承关系中，如果一个实例的数据类型是某个子类，那它的数据类型也可以被看做是父类。</p><p>比如：动物是父类，狗和鱼是子类；鱼是鱼类，鱼是动物都成立。</p><p>判断一个变量是否是某个类型可以用  <code>isinstance()</code>  判断</p><h3 id="鸭子类型"><a class="anchor" href="#鸭子类型">#</a> 鸭子类型</h3><p>并不要求严格的继承体，一个对象只要 “看起来像鸭子，走起路来像鸭子”，那它就可以被看做是鸭子。</p><h2 id="获取对象信息"><a class="anchor" href="#获取对象信息">#</a> 获取对象信息</h2><h3 id="type判断对象类型"><a class="anchor" href="#type判断对象类型">#</a> type（）判断对象类型</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211102183643-gwgjuho.png" alt="image.png"></p><h3 id="isinstance对于继承关系判断class的类型"><a class="anchor" href="#isinstance对于继承关系判断class的类型">#</a> isinstance () 对于继承关系，判断 class 的类型</h3><h3 id="dir获取对象的所有属性和方法"><a class="anchor" href="#dir获取对象的所有属性和方法">#</a> dir（）获取对象的所有属性和方法</h3><h4 id="len对象长度"><a class="anchor" href="#len对象长度">#</a> len（）对象长度</h4><h4 id="lower返回小写的字符串"><a class="anchor" href="#lower返回小写的字符串">#</a> lower（）返回小写的字符串</h4><h4 id="getattr获取属性a"><a class="anchor" href="#getattr获取属性a">#</a> getattr（）获取属性 a</h4><h4 id="setattr设置属性a"><a class="anchor" href="#setattr设置属性a">#</a> setattr（）设置属性 a</h4><h4 id="hasattrobja判断是否有属性a"><a class="anchor" href="#hasattrobja判断是否有属性a">#</a> hasattr（obj,'a'）判断是否有属性 a</h4><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>getattr<span class="token punctuation">(</span>obj, <span class="token string">'z'</span>, <span class="token number">404</span><span class="token punctuation">)</span> <span class="token comment"># 获取属性 'z'，如果不存在，返回默认值 404</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">404</span></pre></td></tr></tbody></table></figure><h2 id="实例属性和类属性"><a class="anchor" href="#实例属性和类属性">#</a> 实例属性和类属性</h2><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211102184822-83nvy25.png" alt="image.png"></p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>class Student<span class="token punctuation">(</span>object<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">'ruan'</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   </pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token assign-left variable">h</span><span class="token operator">=</span>Student<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>h.name<span class="token operator">=</span><span class="token string">'hhh'</span></pre></td></tr></tbody></table></figure><p>类中的 name 是类属性，</p><p>创建 h 类对象即实例后赋值的是实例属性 name，但由于实例对象的优先级比类属性高，会屏蔽类中的 name 属性，即 h.name 的值为 hhh</p><h3 id="总结"><a class="anchor" href="#总结">#</a> 总结：</h3><ol><li>实例属性属于各个实例所有，互不干扰；</li><li>类属性属于类所有，所有实例共享一个属性；</li><li>不要对实例属性和类属性使用相同的名字，否则将产生难以发现的错误</li></ol><h1 id="面向对象高级编程"><a class="anchor" href="#面向对象高级编程">#</a> 面向对象高级编程</h1><p>数据封装、继承和多态只是面向对象程序设计中最基础的 3 个概念</p><p>多重继承、定制类、元类</p><h1 id="_slots_使用"><a class="anchor" href="#_slots_使用">#</a> _slots_使用</h1><p>可以给创建的实例绑定属性和方法</p><p>给一个实例绑定的方法对另外一个实例对象是不起作用的</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>class A:</pre></td></tr><tr><td data-num="2"></td><td><pre>    def run<span class="token punctuation">(</span>self<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="3"></td><td><pre>        print<span class="token punctuation">(</span><span class="token string">"i im ferther runing...."</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token assign-left variable">sun1</span><span class="token operator">=</span>A<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">#给实例 sun1 设置 name 属性</span></pre></td></tr><tr><td data-num="6"></td><td><pre>sun1.name<span class="token operator">=</span><span class="token string">'i im name'</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">#创建实例对象 2</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token assign-left variable">sun2</span><span class="token operator">=</span>A<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">#实例对象 sun1 的属性和 sun2 无关，即 sun2 没有 name 属性</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">#给实例 sun1 绑定方法，方法和属性同理</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">#定义方法</span></pre></td></tr><tr><td data-num="12"></td><td><pre>def setAll<span class="token punctuation">(</span>self,num<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="13"></td><td><pre>    print<span class="token punctuation">(</span>num<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>sun1.newfun<span class="token operator">=</span>MethodType<span class="token punctuation">(</span>setAll, sun1<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>sun1.newfun<span class="token punctuation">(</span><span class="token number">37</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment">#若所有实例都需要绑定方法则给类绑定方法</span></pre></td></tr><tr><td data-num="17"></td><td><pre>A.setAll<span class="token operator">=</span>setAll</pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">#给类绑定方法后，所有创建的实例的均可调用</span></pre></td></tr></tbody></table></figure><pre><code>def set_age(self, age): # 定义一个函数作为实例方法...     self.age = age...&gt;&gt;&gt; from types import MethodType&gt;&gt;&gt; s.set_age = MethodType(set_age, s) # 给实例绑定一个方法&gt;&gt;&gt; s.set_age(25) # 调用实例方法</code></pre><h2 id="限制实例属性定义一个特殊的-__slots__变量"><a class="anchor" href="#限制实例属性定义一个特殊的-__slots__变量">#</a> 限制实例属性，定义一个特殊的  <code>__slots__</code> 变量</h2><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    __slots__ <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">)</span> <span class="token comment"># 用 tuple 定义允许绑定的属性名称</span></pre></td></tr><tr><td data-num="3"></td><td><pre>s<span class="token operator">=</span>Student<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>s<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'ruan'</span></pre></td></tr><tr><td data-num="5"></td><td><pre>s<span class="token punctuation">.</span>firstname<span class="token operator">=</span><span class="token string">'i im firstname'</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">#输出的时候 firstname 的属性会报错，</span></pre></td></tr><tr><td data-num="7"></td><td><pre>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>AttributeError<span class="token punctuation">:</span> <span class="token string">'Student'</span> <span class="token builtin">object</span> has no attribute <span class="token string">'firstaname'</span></pre></td></tr></tbody></table></figure><h3 id="注意"><a class="anchor" href="#注意">#</a> 注意：</h3><p>_slots_使用时要注意，定义的属性只在当前的类的实例中，对于继承的子类是不起作用的</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    __slots__ <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'i im run people......'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span>People<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">say</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'i im teacher....'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>t<span class="token operator">=</span>Teacher<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>t<span class="token punctuation">.</span>tall<span class="token operator">=</span><span class="token string">'shouhua'</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>tall<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>p<span class="token operator">=</span>People<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>p<span class="token punctuation">.</span>tall<span class="token punctuation">(</span><span class="token string">'shouhuap'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>tall<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211103140608-7ezqmvs.png" alt="image.png"></p><p>只限制父类 People 的属性，而子类 Teacher 中不限制</p><h2 id="property"><a class="anchor" href="#property">#</a> @property</h2><p>在绑定属性时，如果我们直接把属性暴露出去，导致可以随意更改。通过 get，set 来获取更改属性值。</p><p>在 python 中直接调用装饰器将一个方法变成属性调用</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token decorator annotation punctuation">@property</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">#使用 get 方法是调用装饰器 @peoperty，</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment"># 同时自动创建了另一个装饰器 @属性.setter</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">score</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>score</pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token decorator annotation punctuation">@score<span class="token punctuation">.</span>setter</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">score</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        self<span class="token punctuation">.</span>_score<span class="token operator">=</span>value</pre></td></tr></tbody></table></figure><h2 id="总结-2"><a class="anchor" href="#总结-2">#</a> 总结：</h2><p>- 权限限制只对类对象实际起作用，想要达到方法和属性强制访问权限，需要使用 @property 装饰器进行 get，set 方法</p><p>属性名与方法名一定要区分开，不然会进入死循环（self._age，def age ()）<br>实例化的对象使用属性时，不是调用属性（meizi._age），而是用的方法名（meizi.age）<br>@property 其实就是实现了 getter 功能； @xxx.setter 实现的是 setter 功能；还有一个 @xxx.deleter 实现删除功能<br>定义方法的时候 @property 必须在 @xxx.setter 之前，且二者修饰的方法名相同（age ()）<br>如果只实现了 @property（而没有实现 @xxx.setter），那么该属性为 只读属性</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token comment">#请利用 @property 给一个 Screen 对象加上 width 和 height 属性，</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment"># 以及一个只读属性 resolution：</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Screen</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    __slots__ <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'_width'</span><span class="token punctuation">,</span><span class="token string">'_height'</span><span class="token punctuation">,</span><span class="token string">'_resolution'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token decorator annotation punctuation">@property</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">width</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_width</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token comment"># 方法名称和实例变量均为 width:</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token decorator annotation punctuation">@width<span class="token punctuation">.</span>setter</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">width</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>widthValue<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        self<span class="token punctuation">.</span>_width<span class="token operator">=</span>widthValue</pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token decorator annotation punctuation">@property</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">height</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_height</pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token decorator annotation punctuation">@width<span class="token punctuation">.</span>setter</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">height</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        self<span class="token punctuation">.</span>_height <span class="token operator">=</span> height</pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token decorator annotation punctuation">@property</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">resolution</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_width <span class="token operator">*</span> self<span class="token punctuation">.</span>_height</pre></td></tr><tr><td data-num="26"></td><td><pre>s<span class="token operator">=</span>Screen<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>s<span class="token punctuation">.</span>width<span class="token operator">=</span><span class="token number">23</span></pre></td></tr><tr><td data-num="28"></td><td><pre>s<span class="token punctuation">.</span>height<span class="token operator">=</span><span class="token number">12</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>resolution<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211103150647-dge6za2.png" alt="image.png"></p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>s<span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">60</span> <span class="token comment"># OK，实际转化为 s.set_score (60)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>s<span class="token punctuation">.</span>score <span class="token comment"># OK，实际转化为 s.get_score ()</span></pre></td></tr></tbody></table></figure><p>要特别注意：属性的方法名不要和实例变量重名。例如，以下的代码是错误的：</p><pre><code>class Student(object):    # 方法名称和实例变量均为birth:    @property    def birth(self):        return self.birth</code></pre><p>出现递归调用错误</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211103151046-5z499ew.png" alt="image.png"></p><p>之前的例子中 width 和_width 不同所以可以运行</p><h2 id="多重继承"><a class="anchor" href="#多重继承">#</a> 多重继承</h2><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211103151750-dvwa7qb.png" alt="image.png"></p><p>python 可以支持多继承，即一个子类可以继承多个父类；但 java 是单继承，只能有一个父类</p><p>Tercher（Name，study，teach）即 Teacher 可以继承多个父类</p><h3 id="mixin"><a class="anchor" href="#mixin">#</a> MixIn</h3><p>在设计类的继承关系时，通常，主线都是单一继承下来的，例如， <code>Teacher</code>  继承自 Name。但是，如果需要 “混入” 额外的功能，通过多重继承就可以实现，比如 Teacher 除了继承自  <code>Name</code>  外，再同时继承  <code>Teach</code> 。这种设计通常称之为 MixIn</p><p>Python 自带了  <code>TCPServer</code>  和  <code>UDPServer</code>  这两类网络服务，而要同时服务多个用户就必须使用多进程或多线程模型，这两种模型由  <code>ForkingMixIn</code>  和  <code>ThreadingMixIn</code>  提供。</p><h3 id="多继承"><a class="anchor" href="#多继承">#</a> 多继承</h3><p>多重继承这个名词一般用来形容继承链条可以很长，多个层次。</p><h3 id="多重继承-2"><a class="anchor" href="#多重继承-2">#</a> 多重继承</h3><p><strong>多继承则指一个类可以有多个基类，相反则是单继承</strong>。任何面向对象编程语言都支持多重继承，但像 java 这种只能通过接口实现有限程度的多继承</p><p>问：多继承 如果多个类有共同得方法名 怎么区分是调得哪个类🤡</p><p>答：调用该方法的时候，会调用第一顺位继承父类的方法</p><h3 id="总结-3"><a class="anchor" href="#总结-3">#</a> 总结：</h3><ol><li>Python 允许使用多重继承，因此，MixIn 就是一种常见的设计</li><li>只允许单一继承的语言（如 Java）不能使用 MixIn 的设计</li></ol><h2 id="定制类"><a class="anchor" href="#定制类">#</a> 定制类</h2><p>Python 的 class 中还有__xxx__有特殊用途的函数，可以帮助我们定制类</p><h3 id="str回用户看到的字符串"><a class="anchor" href="#str回用户看到的字符串">#</a> <strong>str</strong> () 回用户看到的字符串</h3><p>将对象  <code>&lt;__main__.Student object at 0x109afb190&gt;</code>  变成易读的数据</p><p>只在调用 print 时会调用__str__，交互界面时还是现实上方不易读的对象内容，此时用</p><h3 id="repr返回程序开发者看到的字符串"><a class="anchor" href="#repr返回程序开发者看到的字符串">#</a> <strong>repr</strong> () 返回程序开发者看到的字符串</h3><p><code>__str__()</code>  返回用户看到的字符串，而  <code>__repr__()</code>  返回程序开发者看到的字符串，</p><p>也就是说， <code>__repr__()</code>  是为调试服务的</p><p>简写</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>        <span class="token keyword">return</span> <span class="token string">'xxx object (name=%s)'</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name</pre></td></tr><tr><td data-num="3"></td><td><pre>__repr__ <span class="token operator">=</span> __str__</pre></td></tr></tbody></table></figure><h3 id="_iter返回一个迭代对象"><a class="anchor" href="#_iter返回一个迭代对象">#</a> _<strong>iter</strong> () 返回一个迭代对象</h3><p>需要用到 for in 迭代，需要转化为迭代对象</p><p>该方法返回一个迭代对象，然后，Python 的 for 循环就会不断调用该迭代对象的  <code>__next__()</code>  方法拿到循环的下一个值，直到遇到  <code>StopIteration</code>  错误时退出循环</p><p>例子：</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Fib</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        self<span class="token punctuation">.</span>a<span class="token punctuation">,</span>self<span class="token punctuation">.</span>b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">return</span> self</pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        self<span class="token punctuation">.</span>a<span class="token punctuation">,</span>self<span class="token punctuation">.</span>b<span class="token operator">=</span>self<span class="token punctuation">.</span>b<span class="token punctuation">,</span>self<span class="token punctuation">.</span>a<span class="token operator">+</span>self<span class="token punctuation">.</span>b</pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>a<span class="token operator">&gt;</span><span class="token number">1000</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token keyword">raise</span>  StopIteration</pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>a</pre></td></tr><tr><td data-num="11"></td><td><pre>a<span class="token operator">=</span>Fib<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> a<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211103155046-1xs33i9.png" alt="image.png"></p><h3 id="getitem表现得像list那样按照下标取出元素"><a class="anchor" href="#getitem表现得像list那样按照下标取出元素">#</a> <strong><strong>getitem</strong></strong> () 表现得像 list 那样按照下标取出元素</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Fib</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        self<span class="token punctuation">.</span>a<span class="token punctuation">,</span>self<span class="token punctuation">.</span>b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">return</span> self</pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        self<span class="token punctuation">.</span>a<span class="token punctuation">,</span>self<span class="token punctuation">.</span>b<span class="token operator">=</span>self<span class="token punctuation">.</span>b<span class="token punctuation">,</span>self<span class="token punctuation">.</span>a<span class="token operator">+</span>self<span class="token punctuation">.</span>b</pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>a<span class="token operator">&gt;</span><span class="token number">1000</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token keyword">raise</span>  StopIteration</pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>a</pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        a<span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            a<span class="token punctuation">,</span>b<span class="token operator">=</span>b<span class="token punctuation">,</span>a<span class="token operator">+</span>b</pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">return</span> a</pre></td></tr><tr><td data-num="16"></td><td><pre>a<span class="token operator">=</span>Fib<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211103155122-fo5pjxz.png" alt="image.png"></p><p>以上是传入 int，切片功能实现，isinstance 判断类型</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Fib</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        self<span class="token punctuation">.</span>a<span class="token punctuation">,</span>self<span class="token punctuation">.</span>b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">return</span> self</pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        self<span class="token punctuation">.</span>a<span class="token punctuation">,</span>self<span class="token punctuation">.</span>b<span class="token operator">=</span>self<span class="token punctuation">.</span>b<span class="token punctuation">,</span>self<span class="token punctuation">.</span>a<span class="token operator">+</span>self<span class="token punctuation">.</span>b</pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>a<span class="token operator">&gt;</span><span class="token number">1000</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token keyword">raise</span>  StopIteration</pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>a</pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="15"></td><td><pre>                a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token operator">+</span> b</pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token keyword">return</span> a</pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span><span class="token builtin">slice</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            start<span class="token operator">=</span>item<span class="token punctuation">.</span>start</pre></td></tr><tr><td data-num="19"></td><td><pre>            stop<span class="token operator">=</span>item<span class="token punctuation">.</span>stop</pre></td></tr><tr><td data-num="20"></td><td><pre>            <span class="token keyword">if</span> start <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="21"></td><td><pre>                start<span class="token operator">=</span><span class="token number">0</span></pre></td></tr><tr><td data-num="22"></td><td><pre>            a<span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            L<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>stop<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="25"></td><td><pre>                L<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>                a<span class="token punctuation">,</span>b<span class="token operator">=</span>b<span class="token punctuation">,</span>a<span class="token operator">+</span>b</pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token keyword">return</span> L</pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>a<span class="token operator">=</span>Fib<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211103155838-wdwjies.png" alt="image.png"></p><h3 id="getattr动态返回一个属性"><a class="anchor" href="#getattr动态返回一个属性">#</a> <strong>getattr</strong> () 动态返回一个属性</h3><p>调用类属性或方法时，先在__init__() 获取后，再从__getattr__() 获取，获取不到才报错</p><h3 id="call直接调用实例本身"><a class="anchor" href="#call直接调用实例本身">#</a> <strong>call</strong> () 直接调用实例本身</h3><p>与直接调用这个函数一样</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        self<span class="token punctuation">.</span>name<span class="token operator">=</span>name</pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'i im call %s'</span><span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>p<span class="token operator">=</span>People<span class="token punctuation">(</span><span class="token string">'ruan'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>p<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211104150832-d8wkn0m.png" alt="image.png"></p><h2 id="使用枚举类"><a class="anchor" href="#使用枚举类">#</a> 使用枚举类</h2><p>枚举类：在某些情况下，一个类的 实例对象 的<strong>数量</strong>是 <strong>有限且固定</strong> 的，如季节类，它的实例对象只有春、夏、秋、冬。 在 Java 中像这种对象实例有限且固定的类被称为枚举类；这样的枚举类型定义一个 class 类型，然后，每个常量都是 class 的一个唯一实例。Python 提供了  <code>Enum</code>  类来实现这个功能。</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> enum <span class="token keyword">import</span> Enum</pre></td></tr><tr><td data-num="2"></td><td><pre>M<span class="token operator">=</span>Enum<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'sun1'</span><span class="token punctuation">,</span><span class="token string">'sun2'</span><span class="token punctuation">,</span><span class="token string">'sun3'</span><span class="token punctuation">,</span><span class="token string">'sun4'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>M<span class="token punctuation">.</span>sun1<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211104151622-x7yqw9j.png" alt="image.png"></p><p>自定义枚举类</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> enum <span class="token keyword">import</span> Enum<span class="token punctuation">,</span>unique</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token decorator annotation punctuation">@unique</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Week</span><span class="token punctuation">(</span>Enum<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    sun1<span class="token operator">=</span><span class="token number">1</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    sun2<span class="token operator">=</span><span class="token number">2</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    sun3<span class="token operator">=</span><span class="token number">3</span></pre></td></tr><tr><td data-num="7"></td><td><pre>day2<span class="token operator">=</span>Week<span class="token punctuation">.</span>sun2</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>day2<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211104152125-y6nm9vn.png" alt="image.png"></p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> enum <span class="token keyword">import</span> Enum<span class="token punctuation">,</span>unique</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token decorator annotation punctuation">@unique</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Gender</span><span class="token punctuation">(</span>Enum<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    Male<span class="token operator">=</span><span class="token number">0</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    Female<span class="token operator">=</span><span class="token number">1</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>gender<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        self<span class="token punctuation">.</span>name<span class="token operator">=</span>name</pre></td></tr><tr><td data-num="9"></td><td><pre>        self<span class="token punctuation">.</span>gender<span class="token operator">=</span>gender</pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment"># 测试:</span></pre></td></tr><tr><td data-num="12"></td><td><pre>bart <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'Bart'</span><span class="token punctuation">,</span> Gender<span class="token punctuation">.</span>Male<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">if</span> bart<span class="token punctuation">.</span>gender <span class="token operator">==</span> Gender<span class="token punctuation">.</span>Male<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'测试通过!'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">else</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'测试失败!'</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211104152731-wmdziil.png" alt="image.png"></p><h2 id="使用元类创建类"><a class="anchor" href="#使用元类创建类">#</a> 使用元类 [创建类]</h2><p>实例对象是类创建</p><p>类是元类创建</p><p>创建类的方式</p><h3 id="方式一type"><a class="anchor" href="#方式一type">#</a> 方式一：type（）</h3><p><code>type()</code>  函数既可以返回一个对象的类型，又可以创建出新的类型，比如，我们可以通过  <code>type()</code>  函数创建出  <code>Hello</code>  类</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> class1104 <span class="token keyword">import</span> <span class="token operator">*</span></pre></td></tr><tr><td data-num="2"></td><td><pre>h<span class="token operator">=</span>Hello<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>Hello<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211104153538-6iulybe.png" alt="image.png"></p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>Hello <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>hello<span class="token operator">=</span>fn<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p>要创建一个 class 对象， <code>type()</code>  函数依次传入 3 个参数：</p><ol><li>class 的名称；</li><li>继承的父类集合，注意 Python 支持多重继承，如果只有一个父类，别忘了 tuple 的单元素写法；</li><li>class 的方法名称与函数绑定，这里我们把函数  <code>fn</code>  绑定到方法名  <code>hello</code>  上</li></ol><h3 id="方式二元类metaclass"><a class="anchor" href="#方式二元类metaclass">#</a> 方式二：元类 metaclass</h3><p>先定义 metaclass，然后创建类。</p><p>先定义类，然后创建实例。</p><p><s>metaclass 是 Python 面向对象里最难理解，也是最难使用的魔术代码。</s></p><p>按照默认习惯，metaclass 的类名总是以 Metaclass 结尾，以便清楚地表示这是一个 metaclass</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token comment"># metaclass 采用 type 创建类 ，metaclass 是类的模板，所以必须从 `type` 类型派生</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">ListMetaclass</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> name<span class="token punctuation">,</span>bases<span class="token punctuation">,</span>attrs<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        attrs<span class="token punctuation">[</span><span class="token string">'add'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">lambda</span> self<span class="token punctuation">,</span> value<span class="token punctuation">:</span>self<span class="token punctuation">.</span>append<span class="token punctuation">(</span>value<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">return</span> <span class="token builtin">type</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">,</span>name<span class="token punctuation">,</span>bases<span class="token punctuation">,</span>attrs<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">MyList</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">,</span>metaclass<span class="token operator">=</span>ListMetaclass<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">pass</span></pre></td></tr><tr><td data-num="9"></td><td><pre>mylist<span class="token operator">=</span>MyList<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>mylist<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211104155010-cbldtfp.png" alt="image.png"></p><p><code>__new__()</code>  方法接收到的参数依次是：</p><ol><li>当前准备创建的类的对象；</li><li>类的名字；</li><li>类继承的父类集合；</li><li>类的方法集合</li></ol><h3 id="应用场景"><a class="anchor" href="#应用场景">#</a> 应用场景</h3><p>ORM 全称 “Object Relational Mapping”，即对象 - 关系映射，就是把关系数据库的一行映射为一个对象，也就是一个类对应一个表，这样，写代码更简单，不用直接操作 SQL 语句。</p><p>要编写一个 ORM 框架，所有的类都只能动态定义，因为只有使用者才能根据表的结构定义出对应的类来。</p><h2 id="错误处理try"><a class="anchor" href="#错误处理try">#</a> 错误处理 try</h2><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">try</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'try...'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    r <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'result:'</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">except</span> ValueError <span class="token keyword">as</span> e<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ValueError:'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">except</span> ZeroDivisionError <span class="token keyword">as</span> e<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ZeroDivisionError:'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>e<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">finally</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'finally...'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'END'</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p>Python 的错误其实也是 class，所有的错误类型都继承自  <code>BaseException</code></p><p><code>UnicodeError</code>  是  <code>ValueError</code>  的子类🤡</p><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvMy9saWJyYXJ5L2V4Y2VwdGlvbnMuaHRtbCNleGNlcHRpb24taGllcmFyY2h5">Built-in Exceptions — Python 3.10.0 documentation</span></p><h2 id="调用栈"><a class="anchor" href="#调用栈">#</a> 调用栈</h2><p>让 Python 解释器来打印出错误堆栈</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211104162726-fird23x.png" alt="image.png"></p><h2 id="记录错误logging"><a class="anchor" href="#记录错误logging">#</a> 记录错误 logging</h2><p>可将 logging 生成一个 txt 方便查看</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">try</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>        xxx</pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        logging<span class="token punctuation">.</span>exception<span class="token punctuation">(</span>e<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><h3 id="抛出错误raise"><a class="anchor" href="#抛出错误raise">#</a> 抛出错误 raise</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">except</span> ValueError <span class="token keyword">as</span> e<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ValueError!'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">raise</span></pre></td></tr></tbody></table></figure><p>在  <code>bar()</code>  函数中，我们明明已经捕获了错误，但是，打印一个  <code>ValueError!</code>  后，又把错误通过  <code>raise</code>  语句抛出去了，这不有病么？</p><p>其实这种错误处理方式不但没病，而且相当常见。捕获错误目的只是记录一下，便于后续追踪。但是，由于当前函数不知道应该怎么处理该错误，所以，最恰当的方式是继续往上抛，让顶层调用者去处理。</p><h2 id="调试方法"><a class="anchor" href="#调试方法">#</a> 调试方法</h2><h3 id="1-print"><a class="anchor" href="#1-print">#</a> 1. print（）</h3><h3 id="2-断言assert"><a class="anchor" href="#2-断言assert">#</a> 2. 断言 assert</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">assert</span> n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'n is zero!'</span></pre></td></tr></tbody></table></figure><p><code>assert</code>  的意思是，表达式  <code>n != 0</code>  应该是  <code>True</code> ，否则，根据程序运行的逻辑，后面的代码肯定会出错。</p><p>采用断言的好处：</p><p>启动 Python 解释器时可以用  <code>-O</code>  参数来关闭  <code>assert</code> ：</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>$ python <span class="token operator">-</span>O err<span class="token punctuation">.</span>py</pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211104164034-js5sidi.png" alt="image.png"></p><p>关闭后，你可以把所有的  <code>assert</code>  语句当成  <code>pass</code>  来看</p><h3 id="3-logging"><a class="anchor" href="#3-logging">#</a> 3. logging</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> logging</pre></td></tr><tr><td data-num="2"></td><td><pre>s <span class="token operator">=</span> <span class="token string">'0'</span></pre></td></tr><tr><td data-num="3"></td><td><pre>n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'n = %d'</span> <span class="token operator">%</span> n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">/</span> n<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><h3 id="4pbd单步执行"><a class="anchor" href="#4pbd单步执行">#</a> 4.pbd 单步执行</h3><p>启动 Python 的调试器 pdb，让程序以单步方式运行，可以随时查看运行状态。</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>python <span class="token operator">-</span>m pdb xxx<span class="token punctuation">.</span>py</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">(</span>Pbd<span class="token punctuation">)</span> <span class="token number">1</span><span class="token comment">#查看第一行代码，单步执行第一行代码</span></pre></td></tr></tbody></table></figure><h3 id="5-pdbset_trace"><a class="anchor" href="#5-pdbset_trace">#</a> 5. pdb.set_trace()</h3><p>这个方法也是用 pdb，但是不需要单步执行，我们只需要  <code>import pdb</code> ，然后，在可能出错的地方放一个  <code>pdb.set_trace()</code> ，就可以设置一个断点：</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> pdb</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>s <span class="token operator">=</span> <span class="token string">'0'</span></pre></td></tr><tr><td data-num="4"></td><td><pre>n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>pdb<span class="token punctuation">.</span>set_trace<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 运行到这里会自动暂停</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">/</span> n<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p>可以用命令  <code>p</code>  查看变量，或者用命令  <code>c</code>  继续运行：</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211104164634-anjnpuu.png" alt="image.png"></p><h3 id="6ide工具"><a class="anchor" href="#6ide工具">#</a> 6.IDE 工具</h3><p>vscode,pycharm....</p><h2 id="单元测试"><a class="anchor" href="#单元测试">#</a> 单元测试</h2><p>单元测试是用来对一个模块、一个函数或者一个类来进行正确性检验的测试工作。</p><h2 id="文档测试"><a class="anchor" href="#文档测试">#</a> 文档测试</h2><p>doctest 非常有用，不但可以用来测试，还可以直接作为示例代码。通过某些文档生成工具，就可以自动把包含 doctest 的注释提取出来。用户看文档的时候，同时也看到了 doctest。</p><p>Python 内置的 “文档测试”（doctest）模块可以直接提取注释中的代码并执行测试.</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Dict</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token triple-quoted-string string">""""</span></pre></td></tr><tr><td data-num="3"></td><td><pre>      这一段就是文档测试</pre></td></tr><tr><td data-num="4"></td><td><pre>       Simple dict but also support access as x.y style.</pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>       &gt;&gt;&gt; d1 = Dict()</pre></td></tr><tr><td data-num="7"></td><td><pre>       &gt;&gt;&gt; d1['x'] = 100</pre></td></tr><tr><td data-num="8"></td><td><pre>       &gt;&gt;&gt; d1.x</pre></td></tr><tr><td data-num="9"></td><td><pre>       100</pre></td></tr><tr><td data-num="10"></td><td><pre>       &gt;&gt;&gt; d1.y = 200</pre></td></tr><tr><td data-num="11"></td><td><pre>       &gt;&gt;&gt; d1['y']</pre></td></tr><tr><td data-num="12"></td><td><pre>       200</pre></td></tr><tr><td data-num="13"></td><td><pre>       &gt;&gt;&gt; d2 = Dict(a=1, b=2, c='3')</pre></td></tr><tr><td data-num="14"></td><td><pre>       &gt;&gt;&gt; d2.c</pre></td></tr><tr><td data-num="15"></td><td><pre>       '3'</pre></td></tr><tr><td data-num="16"></td><td><pre>       &gt;&gt;&gt; d2['empty']</pre></td></tr><tr><td data-num="17"></td><td><pre>       Traceback (most recent call last):</pre></td></tr><tr><td data-num="18"></td><td><pre>           ...</pre></td></tr><tr><td data-num="19"></td><td><pre>       KeyError: 'empty'</pre></td></tr><tr><td data-num="20"></td><td><pre>       &gt;&gt;&gt; d2.empty</pre></td></tr><tr><td data-num="21"></td><td><pre>       Traceback (most recent call last):</pre></td></tr><tr><td data-num="22"></td><td><pre>           ...</pre></td></tr><tr><td data-num="23"></td><td><pre>       AttributeError: 'Dict' object has no attribute 'empty'</pre></td></tr><tr><td data-num="24"></td><td><pre>       """</pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token builtin">super</span><span class="token punctuation">(</span>Dict<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kw<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__getattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token keyword">try</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="31"></td><td><pre>            <span class="token keyword">return</span> self<span class="token punctuation">[</span>key<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token keyword">except</span> KeyError<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="33"></td><td><pre>            <span class="token keyword">raise</span> AttributeError<span class="token punctuation">(</span><span class="token string">r"'Dict' object has no attribute '%s'"</span> <span class="token operator">%</span> key<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__setattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        self<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value</pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token keyword">import</span> doctest</pre></td></tr><tr><td data-num="40"></td><td><pre>    doctest<span class="token punctuation">.</span>testmod<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p>将其中一个函数注释，运行让它报错</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211108110503-erlvnk1.png" alt="image.png"></p><h2 id="io编程"><a class="anchor" href="#io编程">#</a> IO 编程</h2><p>程序和运行时的数据在内存中驻留</p><p>涉及到数据交换的地方，通常是磁盘、网络等，就需要 IO 接口</p><p>通常，程序完成 IO 操作会有 Input 和 Output 两个数据流</p><p>Stream（流）是一个很重要的概念，可以把流想象成一个水管，数据就是水管里的水，但是只能单向流动。</p><p>在 IO 编程中，就存在<strong>速度严重不匹配的问题</strong>。举个例子来说，比如要把 100M 的数据写入磁盘，CPU 输出 100M 的数据只需要 0.01 秒，可是磁盘要接收这 100M 数据可能需要 10 秒，怎么办呢？有两种办法：</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211108111749-yobbduz.png" alt="image.png"></p><h2 id="同步io"><a class="anchor" href="#同步io">#</a> 同步 IO</h2><p>第一种是 CPU 等着，也就是程序暂停执行后续代码，等 100M 的数据在 10 秒后写入磁盘，再接着往下执行，这种模式称为同步 IO；</p><h2 id="异步io"><a class="anchor" href="#异步io">#</a> 异步 IO</h2><p>另一种方法是 CPU 不等待，只是告诉磁盘，“您老慢慢写，不着急，我接着干别的事去了”，于是，后续代码可以立刻接着执行，这种模式称为异步 IO。</p><p>如果是服务员跑过来找到你，这是回调模式，如果服务员发短信通知你，你就得不停地检查手机，这是轮询模式。总之，异步 IO 的复杂度远远高于同步 IO。</p><h2 id="文件读写"><a class="anchor" href="#文件读写">#</a> 文件读写</h2><h3 id="读文件open"><a class="anchor" href="#读文件open">#</a> 读文件 open（）</h3><p>传入文件名，标示符</p><p>参数：'rb' 二进制</p><p>encoding='gbk' 字符编码</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'/Users/michael/test.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><h3 id="read一次读取全部内容"><a class="anchor" href="#read一次读取全部内容">#</a> read () 一次读取全部内容</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token string">'Hello, world!'</span></pre></td></tr></tbody></table></figure><h3 id="fclose关闭文件"><a class="anchor" href="#fclose关闭文件">#</a> f.close（）关闭文件</h3><p>简化方法</p><h3 id="with-openfilepath-r-as-f-printfread"><a class="anchor" href="#with-openfilepath-r-as-f-printfread">#</a> with open('filepath', 'r') as f:    print(f.read())</h3><p>Python 引入了  <code>with</code>  语句来自动帮我们调用  <code>close()</code>  方法，并且不必调用  <code>f.close()</code>  方法</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'/path/to/file'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p>如果文件很小， <code>read()</code>  一次性读取最方便；</p><p>如果不能确定文件大小，反复调用  <code>read(size)</code>  比较保险；</p><p>如果是配置文件，调用  <code>readlines()</code>  最方便</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 把末尾的 '\n' 删掉</span></pre></td></tr></tbody></table></figure><p>file 和缓存时 = 是 file-like Object 对象，不要求从特定类继承，只要写个  <code>read()</code>  方法就行</p><h3 id="fwrite写文件"><a class="anchor" href="#fwrite写文件">#</a> f.write () 写文件</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'/Users/michael/test.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'Hello, world!'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p>或</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'/Users/michael/test.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'Hello, world!'</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p>使用  <code>with</code>  语句操作文件 IO 是个好习惯</p><h2 id="stringio和bytesio"><a class="anchor" href="#stringio和bytesio">#</a> StringIO 和 BytesIO</h2><h3 id="stringio"><a class="anchor" href="#stringio">#</a> StringIO</h3><p>StringIO 顾名思义就是在内存中读写 str</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> io <span class="token keyword">import</span> StringIO</pre></td></tr><tr><td data-num="2"></td><td><pre> f <span class="token operator">=</span> StringIO<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><code>getvalue()</code>  方法用于获得写入后的 str</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> io <span class="token keyword">import</span> StringIO</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f <span class="token operator">=</span> StringIO<span class="token punctuation">(</span><span class="token string">'Hello!\nHi!\nGoodbye!'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     s <span class="token operator">=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">if</span> s <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token keyword">break</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><h3 id="bytesio"><a class="anchor" href="#bytesio">#</a> BytesIO</h3><p>操作二进制数据，就需要使用 BytesIO</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> io <span class="token keyword">import</span> BytesIO</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f <span class="token operator">=</span> BytesIO<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'中文'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">6</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token string">b'\xe4\xb8\xad\xe6\x96\x87'</span></pre></td></tr></tbody></table></figure><h2 id="os模块"><a class="anchor" href="#os模块">#</a> os 模块</h2><h3 id="osname操作系统类型"><a class="anchor" href="#osname操作系统类型">#</a> os.name 操作系统类型</h3><h3 id="osuname详细系统信息"><a class="anchor" href="#osuname详细系统信息">#</a> os.uname () 详细系统信息</h3><h3 id="osenciron环境变量"><a class="anchor" href="#osenciron环境变量">#</a> os.enciron 环境变量</h3><p>要获取某个环境变量的值，可以调用  <code>os.environ.get('key')</code></p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token comment"># 查看当前目录的绝对路径:</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token string">'/Users/michael'</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment"># 在某个目录下创建一个新目录，首先把新目录的完整路径表示出来:</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'/Users/michael'</span><span class="token punctuation">,</span> <span class="token string">'testdir'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token string">'/Users/michael/testdir'</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment"># 然后创建一个目录:</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">'/Users/michael/testdir'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment"># 删掉一个目录:</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>rmdir<span class="token punctuation">(</span><span class="token string">'/Users/michael/testdir'</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p>通过  <code>os.path.join()</code>  函数，这样可以正确处理不同操作系统的路径分隔符</p><h3 id="ospathjoin连接路径"><a class="anchor" href="#ospathjoin连接路径">#</a>  <code>os.path.join(</code> ) 连接路径</h3><h3 id="ospathsplit拆分路径"><a class="anchor" href="#ospathsplit拆分路径">#</a>  <code>os.path.split()</code>  拆分路径</h3><h3 id="ospathsplitext-文件扩展名"><a class="anchor" href="#ospathsplitext-文件扩展名">#</a>  <code>os.path.splitext()</code>  文件扩展名</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token comment"># 对文件重命名:</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span> <span class="token string">'test.py'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment"># 删掉文件:</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'test.py'</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><code>shutil</code>  模块提供了  <code>copyfile()</code>  的函数，它们可以看做是  <code>os</code>  模块的补充</p><p>最后看看如何利用 Python 的特性来过滤文件。比如我们要列出当前目录下的所有目录，只需要一行代码：</p><pre><code>&gt;&gt;&gt; [x for x in os.listdir('.') if os.path.isdir(x)]['.lein', '.local', '.m2', '.npm', '.ssh', '.Trash', '.vim', 'Applications', 'Desktop', ...]</code></pre><p>要列出所有的  <code>.py</code>  文件，也只需一行代码：</p><pre><code>&gt;&gt;&gt; [x for x in os.listdir('.') if os.path.isfile(x) and os.path.splitext(x)[1]=='.py']['apis.py', 'config.py', 'models.py', 'pymonitor.py', 'test_db.py', 'urls.py', 'wsgiapp.py']</code></pre><h2 id="序列化pickle模块"><a class="anchor" href="#序列化pickle模块">#</a> 序列化 pickle 模块</h2><p>变量从内存中变成可存储或传输的过程称之为序列化，Python 中叫 pickling</p><p>变量内容从序列化的对象重新读到内存里称之为反序列化，即 unpickling</p><h3 id="pickledumps对象-字节序列化"><a class="anchor" href="#pickledumps对象-字节序列化">#</a> pickle.dumps () 对象 -》字节 [序列化]</h3><p><code>pickle.dumps()</code>  方法把任意对象序列化成一个  <code>bytes</code></p><p><code>pickle.dumps()</code>  方法把任意对象序列化成一个  <code>bytes</code> , 并写入文件中</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> pickle</pre></td></tr><tr><td data-num="2"></td><td><pre>d<span class="token operator">=</span><span class="token builtin">dict</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'ruan'</span><span class="token punctuation">,</span>age<span class="token operator">=</span><span class="token number">34</span><span class="token punctuation">,</span>freand<span class="token operator">=</span><span class="token string">'woman'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment"># print(pickle.dumps(d))</span></pre></td></tr><tr><td data-num="4"></td><td><pre>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'timezone.txt'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>d<span class="token punctuation">,</span> f<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><h3 id="pickleload字节-对象反序列化"><a class="anchor" href="#pickleload字节-对象反序列化">#</a> pickle.load () 字节 -》对象【反序列化】</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> pickle</pre></td></tr><tr><td data-num="2"></td><td><pre>f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">r'C:\Users\yangs\PycharmProjects\python_study\fun\timezone.txt'</span><span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>d<span class="token operator">=</span>pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211108132946-rtt8k8p.png" alt="image.png"></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211108133035-b8gyft4.png" alt="image.png"></p><h2 id="json模块"><a class="anchor" href="#json模块">#</a> json 模块</h2><p><code>json</code>  模块的  <code>dumps()</code>  和  <code>loads()</code>  函数是定义得非常好的接口的典范。</p><h4 id="jsondumpspython对象python对象-json对象"><a class="anchor" href="#jsondumpspython对象python对象-json对象">#</a> json.dumps (python 对象) python 对象 -》json 对象</h4><p><code>dumps()</code>  方法返回一个  <code>str</code> ，内容就是标准的 JSON</p><h4 id="jsonloadsjson对象json对象-python对象"><a class="anchor" href="#jsonloadsjson对象json对象-python对象">#</a> json.loads (json 对象) json 对象 -》python 对象</h4><p><code>json.``dump</code> (obj,&nbsp;fp,&nbsp;<em>,&nbsp;skipkeys=False,&nbsp;ensure_ascii=True,&nbsp;check_circular=True,&nbsp;allow_nan=True,&nbsp;cls=None,&nbsp;indent=None,&nbsp;separators=None,&nbsp;default=None,&nbsp;sort_keys=False,&nbsp;<strong>kw</strong>)</em>*</p><h3 id="类变为字典并序列化"><a class="anchor" href="#类变为字典并序列化">#</a> 类变为字典并序列化</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>s<span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token keyword">lambda</span> obj<span class="token punctuation">:</span> obj<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><h2 id="进程和线程"><a class="anchor" href="#进程和线程">#</a> 进程和线程</h2><p>Python 的标准库提供了两个模块： <code>_thread</code>  和  <code>threading</code> ， <code>_thread</code>  是低级模块， <code>threading</code>  是高级模块</p><p><strong>线程是最小的执行单元，而进程由至少一个线程组成</strong></p><p>操作系统轮流让各个任务交替执行</p><p>真正的并行执行多任务只能在多核 CPU 上实现</p><p>对于操作系统来说，一个任务就是一个进程（Process），比如打开一个浏览器就是启动一个浏览器进程</p><p>Word，它可以同时进行打字、拼写检查、打印等事情。在一个进程内部，要同时干多件事，就需要同时运行多个 “子任务”，我们把进程内的这些 “子任务” 称为线程（Thread）</p><ul><li>多进程模式；</li><li>多线程模式；</li><li>多进程 + 多线程模式。</li></ul><h2 id="多进程"><a class="anchor" href="#多进程">#</a> 多进程</h2><p>Unix/Linux 操作系统提供了一个  <code>fork()</code>  系统调用，普通的函数调用，调用一次，返回一次，但是  <code>fork()</code>  调用一次，返回两次，因为操作系统自动把当前进程（称为父进程）复制了一份（称为子进程），然后，分别在父进程和子进程内返回。</p><p>创建子进程</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> os</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">def</span> <span class="token function">run_pro</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'开始运行子进程%s，%s'</span><span class="token operator">%</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'开始运行进程%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    p<span class="token operator">=</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>run_pro<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211111131512-zqm80if.png" alt="image.png"></p><h3 id="启动大量子进程pool"><a class="anchor" href="#启动大量子进程pool">#</a> 启动大量子进程 pool</h3><p>进程池</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> time<span class="token punctuation">,</span> threading</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment"># 新线程执行的代码:</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">def</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'thread %s is running...'</span> <span class="token operator">%</span> threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    n <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">while</span> n <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        n <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'thread %s &gt;&gt;&gt; %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'thread %s ended.'</span> <span class="token operator">%</span> threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'thread %s is running...'</span> <span class="token operator">%</span> threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>loop<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'LoopThread'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>t<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'thread %s ended.'</span> <span class="token operator">%</span> threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><h1 id="模块总结"><a class="anchor" href="#模块总结">#</a> 模块总结</h1><h2 id="doctest文档测试"><a class="anchor" href="#doctest文档测试">#</a> doctest 文档测试</h2><h2 id="ospath文件路径"><a class="anchor" href="#ospath文件路径">#</a> os.path 文件路径</h2><h2 id="pickle序列化"><a class="anchor" href="#pickle序列化">#</a> pickle 序列化</h2><h2 id="json"><a class="anchor" href="#json">#</a> json</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGlhb3h1ZWZlbmcuY29tL3dpa2kvMTAxNjk1OTY2MzYwMjQwMC8xMDE3MTA0MzI0MDI4NDQ4">使用 dict 和 set - 廖雪峰的官方网站 (liaoxuefeng.com)</span></p><p>用于学习记录，后期便于复习，参考链接</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009102447-hmq8gs8.png" alt="image.png"></p><p>python file</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009102545-qqmxrgo.png" alt="image.png"></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009102644-7ny4t2k.png" alt="image.png"></p><p>调用脚本时会先载入 pyhton 解释器，然后运行脚本</p><p>rpm：软件管理包</p><p>操作符优先级：<img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009104337-b66ot2k.png" alt="image.png"></p><p>条件判断：</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009104751-a27qfzb.png" alt="image.png"></p><p>Python 为我们提供了非常完善的基础代码库，覆盖了网络、文件、GUI、数据库、文本等大量内容，被形象地称作 “内置电池（batteries included）”。用 Python 开发，许多功能不必从零编写，直接使用现成的即可。</p><p>语言定位：</p><p>Python 的定位是 “优雅”、“明确”、“简单”</p><p>Python 是解释型语言</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211011172523-7k51l6e.png" alt="image.png"></p><h1 id="python-2"><a class="anchor" href="#python-2">#</a> python</h1><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009110719-7urayjl.png" alt="image.png"></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009111236-gd1mcju.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009111303-l3bqira.png" alt="image.png"></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009113303-w7qziw5.png" alt="image.png"></p><h2 id="数据类型-2"><a class="anchor" href="#数据类型-2">#</a> 数据类型</h2><h3 id="int-整型-2"><a class="anchor" href="#int-整型-2">#</a> int 整型</h3><p>long int 长整型</p><p>int 整型</p><h3 id="float-浮点型-2"><a class="anchor" href="#float-浮点型-2">#</a> float 浮点型</h3><p>浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时</p><p>双精度浮点型 e</p><p>浮点型</p><h3 id="string-字符串-2"><a class="anchor" href="#string-字符串-2">#</a> String 字符串</h3><p>字符串是以单引号  <code>'</code>  或双引号  <code>"</code>  括起来的任意文本</p><p>字符串是以 Unicode 编码</p><p>对于单个字符的编码，Python 提供了  <code>ord()</code>  函数获取字符的整数表示， <code>chr()</code>  函数把编码转换为对应的字符：</p><h3 id="bool布尔-2"><a class="anchor" href="#bool布尔-2">#</a> Bool 布尔</h3><p>True</p><p>Flase</p><h3 id="none-空值-2"><a class="anchor" href="#none-空值-2">#</a> None 空值</h3><p>None， <code>None</code>  不能理解为  <code>0</code> ，因为  <code>0</code>  是有意义的，</p><p>Null 无意义</p><p>.</p><p>&lt;iframe src="<span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo2ODA2L3dpZGdldHMvYnJ5dGhvbi1lZGl0b3I=">http://127.0.0.1:6806/widgets/brython-editor</span>" data-src="<span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo2ODA2L3dpZGdldHMvYnJ5dGhvbi1lZGl0b3I=">http://127.0.0.1:6806/widgets/brython-editor</span>" data-subtype="widget" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="width: 1341px; height: 276px;"&gt;&lt;/iframe&gt;</p><h3 id="变量-2"><a class="anchor" href="#变量-2">#</a> 变量</h3><p>变量的概念基本上和初中代数的方程变量是一致的，</p><p>变量不仅可以是数字，还可以是任意数据类型。</p><p>变量名必须是大小写英文、数字和  <code>_</code> 的组合，且不能用数字开头，字母或下划线开头</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token comment">#变量类型</span></pre></td></tr><tr><td data-num="2"></td><td><pre>a<span class="token operator">=</span><span class="token number">1</span></pre></td></tr><tr><td data-num="3"></td><td><pre>b<span class="token operator">=</span><span class="token string">'我是变量'</span></pre></td></tr><tr><td data-num="4"></td><td><pre>c<span class="token operator">=</span><span class="token boolean">True</span></pre></td></tr><tr><td data-num="5"></td><td><pre>d<span class="token operator">=</span><span class="token number">12.2e3</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009134601-1cuacaj.png" alt="image.png"></p><p>int a=1 静态语言 此时已经分配的 int 分区之后不能更改变量类型【不支持，Java】</p><p>a=3 动态语言，可以赋值成任意类型</p><h4 id="动态定义-2"><a class="anchor" href="#动态定义-2">#</a> 动态定义</h4><h4 id="静态定义-2"><a class="anchor" href="#静态定义-2">#</a> 静态定义</h4><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>a <span class="token operator">=</span> <span class="token string">'ABC'</span></pre></td></tr><tr><td data-num="2"></td><td><pre>b <span class="token operator">=</span> a</pre></td></tr><tr><td data-num="3"></td><td><pre>a <span class="token operator">=</span> <span class="token string">'XYZ'</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p>执行  <code>a = 'ABC'</code> ，解释器创建了字符串  <code>'ABC'</code>  和变量  <code>a</code> ，并把  <code>a</code>  指向  <code>'ABC'</code> ：</p><p><img data-src="https://www.liaoxuefeng.com/files/attachments/923791878255456/0" alt="py-var-code-1"></p><p>执行  <code>b = a</code> ，解释器创建了变量  <code>b</code> ，并把  <code>b</code>  指向  <code>a</code>  指向的字符串  <code>'ABC'</code> ：</p><p><img data-src="https://www.liaoxuefeng.com/files/attachments/923792058613440/0" alt="py-var-code-2"></p><p>执行  <code>a = 'XYZ'</code> ，解释器创建了字符串 'XYZ'，并把  <code>a</code>  的指向改为  <code>'XYZ'</code> ，但  <code>b</code>  并没有更改：</p><p><img data-src="https://www.liaoxuefeng.com/files/attachments/923792191637760/0" alt="py-var-code-3"></p><h3 id="常量-2"><a class="anchor" href="#常量-2">#</a> 常量</h3><p>所谓常量就是不能变的变量，通常用全部大写的变量名表示常量：</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>PI <span class="token operator">=</span> <span class="token number">3.14159265359</span></pre></td></tr></tbody></table></figure><h2 id="list列表-2"><a class="anchor" href="#list列表-2">#</a> list 列表</h2><p>list 是一种有序的集合，可以随时添加和删除其中的元素。</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token builtin">list</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009154856-r9s5yyu.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009154907-bofhvvd.png" alt="image.png"></p><h3 id="切分-2"><a class="anchor" href="#切分-2">#</a> 切分</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009155126-p31z8um.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009155139-cpsoatf.png" alt="image.png"></p><h3 id="append追加-2"><a class="anchor" href="#append追加-2">#</a> append（）追加</h3><p>str.append('a')</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009155556-qrj4a63.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009155606-dxihfwr.png" alt="image.png"></p><h3 id="insert插入指定位置-2"><a class="anchor" href="#insert插入指定位置-2">#</a> insert 插入指定位置</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009162557-186v350.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009162609-u00z8m3.png" alt="image.png"></p><h3 id="pop删除末尾元素-2"><a class="anchor" href="#pop删除末尾元素-2">#</a> pop（）删除末尾元素</h3><p>要删除指定位置的元素，用  <code>pop(i)</code>  方法，其中  <code>i</code>  是索引位置</p><p>替换元素直接赋值即可</p><p>列表可以嵌套</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'python'</span><span class="token punctuation">,</span> <span class="token string">'java'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'asp'</span><span class="token punctuation">,</span> <span class="token string">'php'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'scheme'</span><span class="token punctuation">]</span></pre></td></tr></tbody></table></figure><p>类型可以不同</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>L <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Apple'</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">]</span></pre></td></tr></tbody></table></figure><h3 id="切片-2"><a class="anchor" href="#切片-2">#</a> 切片</h3><p>list [:-1] 不包含最后一个元素</p><p>list [:] 全部列表</p><p>list [::] 全部列表</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012161203-1e12zsd.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012161212-0lrqjsm.png" alt="image.png"></p><p>前 10 个数，每两个取一个</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012161428-r6muafj.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012161441-eoc8y55.png" alt="image.png"></p><h4 id="列表生成-2"><a class="anchor" href="#列表生成-2">#</a> 列表生成</h4><p>list（range（1，11））生成 10 个数 1-10</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>m<span class="token operator">+</span>n <span class="token keyword">for</span> m <span class="token keyword">in</span> <span class="token string">'123'</span> <span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token string">'yza'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>k<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">467</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> k <span class="token keyword">if</span> x<span class="token operator">==</span><span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012190810-l1qtxiv.png" alt="image.png"></p><h2 id="tuple元组-2"><a class="anchor" href="#tuple元组-2">#</a> tuple 元组</h2><p>tuple 一旦初始化就不能修改</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009163638-1vpldee.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009163652-xkas3o0.png" alt="image.png"></p><p>但元组初始化后就不能进行更改了</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>b<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">#定义的不是 tuple，是 1 这个数！</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment"># 这是因为括号 () 既可以表示 tuple，又可以表示数学公式中的小括号，</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment"># 这就产生了歧义，因此，Python 规定，</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment"># 这种情况下，按小括号进行计算，计算结果自然是 1</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>c<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009164221-xl1husx.png" alt="image.png"></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009164244-780v78f.png" alt="image.png"></p><h2 id="dict字典-2"><a class="anchor" href="#dict字典-2">#</a> dict 字典</h2><p>其他语言叫 map，使用键 - 值（key-value）存储，具有极快的查找速度。dict 的 key 必须是<strong>不可变对象</strong>。key 计算位置的算法称为哈希算法（Hash）。</p><h3 id="定义-3"><a class="anchor" href="#定义-3">#</a> 定义</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>d<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'ruanyifen'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token string">'happy'</span><span class="token punctuation">:</span><span class="token string">'write'</span><span class="token punctuation">}</span></pre></td></tr><tr><td data-num="2"></td><td><pre>d<span class="token punctuation">[</span><span class="token string">'add'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'Im add'</span></pre></td></tr><tr><td data-num="3"></td><td><pre>d<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'fix'</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012135019-kqmsrcg.png" alt="image.png"></p><h3 id="取value-2"><a class="anchor" href="#取value-2">#</a> 取 value</h3><h4 id="dictkey-2"><a class="anchor" href="#dictkey-2">#</a> dict['key']</h4><h4 id="key-in-dict-2"><a class="anchor" href="#key-in-dict-2">#</a> 'key' in dict</h4><h4 id="dictgetkey-2"><a class="anchor" href="#dictgetkey-2">#</a> dict.get('key')</h4><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'name'</span> <span class="token keyword">in</span> d<span class="token punctuation">)</span><span class="token comment">#方法一判断是否有这个主键在字典 d 中</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#方法二 取</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012135119-sniqpw0.png" alt="image.png"></p><h3 id="dictpopkey删除一个key-2"><a class="anchor" href="#dictpopkey删除一个key-2">#</a> dict.pop ('key') 删除一个 key</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012135429-m36ygpu.png" alt="image.png"></p><h3 id="dictkeys返回字典中所有key列表-2"><a class="anchor" href="#dictkeys返回字典中所有key列表-2">#</a> dict.keys 返回字典中所有 key 列表</h3><h3 id="dictupdate将a字典新keyvalue内容加入b字典中-2"><a class="anchor" href="#dictupdate将a字典新keyvalue内容加入b字典中-2">#</a> dict.update () 将 a 字典新 key，value 内容加入 b 字典中</h3><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token assign-left variable">dicta</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token builtin class-name">:</span><span class="token string">'ruan'</span>,<span class="token string">'age'</span>:20<span class="token punctuation">}</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token assign-left variable">dictb</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token builtin class-name">:</span><span class="token string">'ruan2'</span>,<span class="token string">'age'</span>:40,<span class="token string">'add'</span><span class="token builtin class-name">:</span><span class="token string">'w shi add'</span><span class="token punctuation">}</span></pre></td></tr><tr><td data-num="3"></td><td><pre>dictb.update<span class="token punctuation">(</span>dicta<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>print<span class="token punctuation">(</span>dictb<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211101115242-qazr588.png" alt="image.png"></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211101115348-bb0l147.png" alt="image.png"></p><h4 id="内建函数使用-2"><a class="anchor" href="#内建函数使用-2">#</a> 内建函数使用</h4><p>type（）</p><p>cmp（）</p><p>len（）</p><p>hash（）</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211101114202-rdvz2pt.png" alt="image.png"></p><p>内建 cmp（）函数比较两个 dict 时，先比较长度，后比值，输出 1 或 - 1</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211101114401-h4f1qop.png" alt="image.png"></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211101114644-qffksiw.png" alt="image.png"></p><h3 id="dict特点-2"><a class="anchor" href="#dict特点-2">#</a> dict 特点</h3><p>dict 有以下几个特点：</p><ol><li>查找和插入的速度极快，不会随着 key 的增加而变慢；</li><li>需要占用大量的内存，内存浪费多。</li></ol><p>而 list 相反：</p><ol><li>查找和插入的时间随着元素的增加而增加；</li><li>占用空间小，浪费内存很少。<br><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211101115427-fu3s2zu.png" alt="image.png"><br><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211101115451-utxi9ct.png" alt="image.png"></li></ol><h2 id="set集合-2"><a class="anchor" href="#set集合-2">#</a> set 集合</h2><p>也是一组 key 的集合，但不存储 value。由于 key 不能重复，所以，在 set 中，没有重复的 key。</p><p>重复元素在 set 中自动被过滤</p><h3 id="定义-4"><a class="anchor" href="#定义-4">#</a> 定义</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012135934-u0n1j77.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012135953-sqa88s1.png" alt="image.png"></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012140114-5azj1sa.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012140127-ledkv1s.png" alt="image.png"></p><h3 id="setaddkey添加元素-2"><a class="anchor" href="#setaddkey添加元素-2">#</a> set.add ('key') 添加元素</h3><p>但重复元素不添加，自动去重</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012140336-dwf2vgw.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012140344-dzsshz2.png" alt="image.png"></p><h3 id="setremovekey删除元素-2"><a class="anchor" href="#setremovekey删除元素-2">#</a> set.remove ('key') 删除元素</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012140511-5f9cwm4.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012140517-f6iolow.png" alt="image.png"></p><p>set 可以看成数学意义上的无序和无重复元素的集合，</p><p>因此，两个 set 可以做数学意义上的交集、并集等操作：</p><h3 id="两个set交集-2"><a class="anchor" href="#两个set交集-2">#</a> &amp; 两个 set 交集</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012140903-1l3we66.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012140912-8itf6ek.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211022170721-h5hmgxr.png" alt="image.png"></p><h3 id="两个set并集-2"><a class="anchor" href="#两个set并集-2">#</a> | 两个 set 并集</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012140922-5bjlj5g.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012140933-edbys90.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211022171729-b4k8xhd.png" alt="image.png"></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211101115701-3dt5x4j.png" alt="image.png"></p><h3 id="map的显示-2"><a class="anchor" href="#map的显示-2">#</a> map () 的显示</h3><p>打印 map 对象可以看到 map 对象返回的是一个地址，不是真实的数据</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span>对象<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>it <span class="token keyword">for</span> it <span class="token keyword">in</span> <span class="token builtin">map</span>对象<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><h2 id="数据类型转换-2"><a class="anchor" href="#数据类型转换-2">#</a> 数据类型转换</h2><h3 id="int-2"><a class="anchor" href="#int-2">#</a> int（）</h3><h3 id="float-2"><a class="anchor" href="#float-2">#</a> float（）</h3><h3 id="str-2"><a class="anchor" href="#str-2">#</a> str（）</h3><h3 id="bool-2"><a class="anchor" href="#bool-2">#</a> bool（）</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012142636-iblnu9y.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012142645-gb2u1fg.png" alt="image.png"></p><h2 id="条件判断-2"><a class="anchor" href="#条件判断-2">#</a> 条件判断</h2><h3 id="if-2"><a class="anchor" href="#if-2">#</a> if</h3><p>if else</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>a<span class="token operator">=</span><span class="token number">100</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">if</span> a<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">else</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">-</span>a<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009165335-jr8xtfq.png" alt="image.png"></p><p>if</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">if</span> <span class="token boolean">True</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'True'</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009165309-ymhiihv.png" alt="image.png"></p><p>if elif elif else</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>name<span class="token operator">=</span><span class="token string">'zhangsan'</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">if</span> name<span class="token operator">==</span><span class="token string">'zhangsan'</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我是'</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">elif</span> name<span class="token operator">==</span><span class="token string">'lisi'</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我是'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">elif</span> name<span class="token operator">==</span><span class="token string">'wangwu'</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我是'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">else</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我谁的不是'</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009165511-spws02g.png" alt="image.png"></p><h2 id="input输入输出-2"><a class="anchor" href="#input输入输出-2">#</a> input（）输入输出</h2><p>input () 返回的数据类型是 str</p><p>print（）</p><h2 id="循环-迭代-2"><a class="anchor" href="#循环-迭代-2">#</a> 循环 迭代</h2><p>list，tuple，dict 都可循环</p><p>Python 的  <code>for</code>  循环本质上就是通过不断调用  <code>next()</code>  函数实现的，计算是惰性的</p><p>dict 循环按照 value 时：for value in dict.values</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">for</span> value <span class="token keyword">in</span> d<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><h3 id="for-in-2"><a class="anchor" href="#for-in-2">#</a> for in</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token builtin">sum</span><span class="token operator">=</span><span class="token number">0</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token builtin">sum</span><span class="token operator">=</span><span class="token builtin">sum</span><span class="token operator">+</span>i</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009172805-wrb6kr2.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009172805-wrb6kr2.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009172821-rdyglwd.png" alt="image.png"></p><h3 id="while-2"><a class="anchor" href="#while-2">#</a> while</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>sum2<span class="token operator">=</span><span class="token number">0</span></pre></td></tr><tr><td data-num="2"></td><td><pre>k<span class="token operator">=</span><span class="token number">0</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    sum2<span class="token operator">=</span>sum2<span class="token operator">+</span>k</pre></td></tr><tr><td data-num="5"></td><td><pre>    k<span class="token operator">=</span>k<span class="token operator">+</span><span class="token number">1</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>sum2<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009172821-rdyglwd.png" alt="image.png"></p><h3 id="break-2"><a class="anchor" href="#break-2">#</a> break</h3><p>如果要提前结束循环，可以用  <code>break</code>  语句</p><h3 id="continue-2"><a class="anchor" href="#continue-2">#</a> continue</h3><p>通过  <code>continue</code>  语句，跳过当前的这次循环，直接开始下一次循环</p><h2 id="生成器-2"><a class="anchor" href="#生成器-2">#</a> 生成器</h2><p>在 Python 中，这种一边循环一边计算的机制，称为生成器：generator。</p><p>包括生成器和带  <code>yield</code>  的 generator function。</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>g <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">*</span> x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012191035-5wbqtm5.png" alt="image.png"></p><p>访问大文件</p><p>yield</p><h2 id="isinstance迭代器-2"><a class="anchor" href="#isinstance迭代器-2">#</a> isinstance（）迭代器</h2><p>直接作用于  <code>for</code>  循环的对象统称为可迭代对象，都是迭代器 Iterable</p><p><code>list</code> 、 <code>tuple</code> 、 <code>dict</code> 、 <code>set</code> 、 <code>str</code></p><p><code>list</code> 、 <code>dict</code> 、 <code>str</code>  虽然是  <code>Iterable</code> ，却不是  <code>Iterator</code> 。</p><p><code>list</code> 、 <code>dict</code> 、 <code>str</code>  等  <code>Iterable</code>  变成  <code>Iterator</code>  可以使用 **iter ()** 函数</p><p>以直接作用于  <code>for</code>  循环的数据类型有以下几种：</p><p>一类是集合数据类型，如  <code>list</code> 、 <code>tuple</code> 、 <code>dict</code> 、 <code>set</code> 、 <code>str</code>  等；</p><p>一类是  <code>generator</code> ，包括生成器和带  <code>yield</code>  的 generator function。</p><p>可以使用 **isinstance ()** 判断一个对象是否是  <code>Iterable</code>  对象__iter__：</p><p>迭代对象</p><p>判断是不是可以迭代，用 Iterable</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> collections <span class="token keyword">import</span> Iterable</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">True</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">True</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">False</span></pre></td></tr></tbody></table></figure><p>判断是不是迭代器，用 Iterator</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> collections <span class="token keyword">import</span> Iterator</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Iterator<span class="token punctuation">)</span>  <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">False</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Iterator<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">False</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token builtin">isinstance</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Iterator<span class="token punctuation">)</span>  <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">True</span></pre></td></tr></tbody></table></figure><p>Python 中 list，truple，str，dict 这些都可以被迭代，但他们并不是迭代器，为什么：：因为和迭代器相比有一个很大的不同，list/truple/map/dict 这些数据的大小是确定的，也就是说有多少事可知的。但迭代器不是，迭代器不知道要执行多少次，所以可以理解为不知道有多少个元素，每调用一次 next ()，就会往下走一步，是惰性的。</p><h2 id="函数-2"><a class="anchor" href="#函数-2">#</a> 函数</h2><p>抽象</p><p>将函数抽象成一个函数名称，不看内部结构直接调用方法</p><p>返回类型 函数名（输入参数）：</p><p>函数体</p><h3 id="调用函数-2"><a class="anchor" href="#调用函数-2">#</a> 调用函数</h3><p>要调用一个函数，需要知道函数的名称和参数</p><p>绝对值 abs</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012142010-d503sa9.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012142024-cscdoiu.png" alt="image.png"></p><h3 id="定义函数-2"><a class="anchor" href="#定义函数-2">#</a> 定义函数</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">def</span> <span class="token function">myabs</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">if</span> x<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">return</span> x</pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">if</span> x<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">return</span> <span class="token operator">-</span>x</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>myabs<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012144653-0ds9bc4.png" alt="image.png"></p><h3 id="空函数-2"><a class="anchor" href="#空函数-2">#</a> 空函数</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">def</span> <span class="token function">nufun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">pass</span></pre></td></tr></tbody></table></figure><p><code>pass</code>  可以用来作为占位符</p><h3 id="函数-参数检查-2"><a class="anchor" href="#函数-参数检查-2">#</a> 函数 参数检查</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">def</span> <span class="token function">my_init_abs</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token builtin">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">'no no no'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">else</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">if</span> x<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">if</span> x<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>my_init_abs<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">90</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012144640-6xnfm9s.png" alt="image.png"></p><h3 id="可返回多个值函数-2"><a class="anchor" href="#可返回多个值函数-2">#</a> 可返回多个值，函数</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">def</span> <span class="token function">return_much</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    a<span class="token operator">=</span><span class="token string">'返回'</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    b<span class="token operator">=</span><span class="token string">'我也返回'</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    c<span class="token operator">=</span><span class="token string">'我也要返回'</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">return</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>return_much<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>return_much<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012144955-kyvotx4.png" alt="image.png"></p><h3 id="函数参数-2"><a class="anchor" href="#函数参数-2">#</a> 函数参数</h3><p>*<strong>args 是可变参数，args 接收的是一个 tuple；</strong></p><p>**<strong>kw 是关键字参数，kw 接收的是一个 dict</strong>。</p><p><code>power(x)</code>  函数，参数  <code>x</code>  就是一个位置参数，可单个变量，list，set，tuple</p><p><code>power(*x)</code>  函数，可传入单个变量，list，set，tuple，可以传入任意个参数或 0 个参数</p><p><code>power(**kw)</code>  函数，字典 dict</p><p>可变参数允许你传入 0 个或任意个参数，这些可变参数在函数调用时自动组装为一个 tuple。</p><p>而关键字参数允许你传入 0 个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个<strong> dict</strong>.</p><p><code>power(x, n)</code> ，用来计算 x<sup>n</sup></p><p><code>power(x, n)</code>  函数有两个参数： <code>x</code>  和  <code>n</code></p><p>默认参数，此时 age 和 city 为默认参数，可传值改变也可不变【不用传值】</p><p><code>power(L=None)</code>  函数有 None 这个不变对象，可用 list</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">def</span> <span class="token function">enroll</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> city<span class="token operator">=</span><span class="token string">'Beijing'</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'name:'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'gender:'</span><span class="token punctuation">,</span> gender<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'age:'</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'city:'</span><span class="token punctuation">,</span> city<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012151610-9n1rxhq.png" alt="image.png"></p><h4 id="必选参数-2"><a class="anchor" href="#必选参数-2">#</a> 必选参数</h4><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">def</span> <span class="token function">a1</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">return</span> x</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">(</span><span class="token number">12.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">(</span><span class="token string">'ruan'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"key"</span><span class="token punctuation">:</span><span class="token string">"vleaue"</span><span class="token punctuation">,</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'ruan'</span><span class="token punctuation">,</span><span class="token string">'mun'</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012153014-r27ykfm.png" alt="image.png"></p><h4 id="默认参数-2"><a class="anchor" href="#默认参数-2">#</a> = 默认参数</h4><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">def</span> <span class="token function">a2</span><span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">return</span> x</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a2<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a2<span class="token punctuation">(</span><span class="token number">12.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a2<span class="token punctuation">(</span><span class="token string">'ruan'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a2<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a2<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a2<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a2<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"key"</span><span class="token punctuation">:</span><span class="token string">"vleaue"</span><span class="token punctuation">,</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'ruan'</span><span class="token punctuation">,</span><span class="token string">'mun'</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012153014-r27ykfm.png" alt="image.png"></p><h4 id="可变参数-2"><a class="anchor" href="#可变参数-2">#</a> * 可变参数</h4><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">def</span> <span class="token function">a3</span><span class="token punctuation">(</span><span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">return</span> x</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span><span class="token number">12.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span><span class="token string">'ruan'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"key"</span><span class="token punctuation">:</span><span class="token string">"vleaue"</span><span class="token punctuation">,</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'ruan'</span><span class="token punctuation">,</span><span class="token string">'mun'</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012154346-2eahz0b.png" alt="image.png"></p><h4 id="关键字参数-2"><a class="anchor" href="#关键字参数-2">#</a> ** 关键字参数</h4><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">def</span> <span class="token function">a3</span><span class="token punctuation">(</span><span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">return</span> kw</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span>kw<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span>kw<span class="token operator">=</span><span class="token number">12.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span>kw<span class="token operator">=</span><span class="token string">'ruan'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span>kw<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span>kw<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span>kw<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span>kw<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span>kw<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span>kw<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"key"</span><span class="token punctuation">:</span><span class="token string">"vleaue"</span><span class="token punctuation">,</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'ruan'</span><span class="token punctuation">,</span><span class="token string">'mun'</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012154409-tp9u2z5.png" alt="image.png"></p><h3 id="递归函数-2"><a class="anchor" href="#递归函数-2">#</a> 递归函数</h3><p>在函数内部，可以调用其他函数。</p><p>一个函数在<strong>内部调用自身本身</strong>，这个函数就是<strong>递归函数</strong>。</p><p>使用递归函数需要<strong>注意防止栈溢出</strong></p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token comment">#递归函数</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">def</span> <span class="token function">funmyself</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">if</span> x<span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">return</span> x<span class="token operator">+</span>funmyself<span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">elif</span> x<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">return</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>funmyself<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012155139-884p9as.png" alt="image.png"></p><p>解决栈溢出方法：</p><p><strong>尾递归</strong>优化，事实上尾递归和循环的效果是一样的</p><p>尾递归是指，在函数返回的时候，<strong>调用自身</strong>本身，并且，<strong>return 语句不能包含表达式</strong></p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token comment">#尾递归</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">def</span> <span class="token function">funmyself2</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">return</span>  funmyself2_it<span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">def</span>  <span class="token function">funmyself2_it</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>pro<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">if</span> n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">return</span> pro</pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">else</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">return</span> funmyself2<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>n</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>funmyself2<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012160333-tngb33o.png" alt="image.png"></p><p>此时 funmyself2 是尾递归函数</p><h2 id="转义字符-2"><a class="anchor" href="#转义字符-2">#</a> 转义字符  <code>\</code></h2><p>转义字符  <code>\</code>  可以转义很多字符，比如</p><p><code>\n</code>  表示换行，</p><p><code>\t</code>  表示制表符，</p><p>字符  <code>\</code>  本身也要转义，所以  <code>\\</code>  表示的字符就是  <code>\</code></p><p>Python 还允许用  <code>r''</code>  表示  <code>''</code>  内部的字符串默认不转义</p><h2 id="运算符and-or和not-2"><a class="anchor" href="#运算符and-or和not-2">#</a> 运算符 and、or 和 not</h2><p>运算优先级：not&gt;or&gt;and</p><h2 id="除法-2"><a class="anchor" href="#除法-2">#</a> 除法 ///</h2><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">//</span><span class="token number">3</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><h4 id="除法一-浮点数-2"><a class="anchor" href="#除法一-浮点数-2">#</a> 除法一 / 浮点数</h4><h4 id="除法二-地板除-整数-2"><a class="anchor" href="#除法二-地板除-整数-2">#</a> 除法二  //  地板除 整数</h4><p><code>/</code>  除法计算结果是浮点数，即使是两个整数恰好整除，结果也是浮点数：</p><p><code>//</code> ，称为地板除，两个整数的除法仍然是整数：</p><h2 id="取余-2"><a class="anchor" href="#取余-2">#</a> 取余 %</h2><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">%</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">%</span><span class="token number">7</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">%</span><span class="token number">20</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">#如果 a% b a&gt;b 则结果为 a</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009141744-i2nxg58.png" alt="image.png"></p><h2 id="字符编码-2"><a class="anchor" href="#字符编码-2">#</a> 字符编码</h2><p><code>ASCII</code>  编码</p><p>8 个比特（bit）作为一个字节（byte）</p><p>一个字节能表示的最大的整数就是 255（二进制 11111111 = 十进制 255）</p><p>两个字节可以表示的最大整数是  <code>65535</code> ，4 个字节可以表示的最大整数是  <code>4294967295</code></p><p>大写字母  <code>A</code>  的编码是  <code>65</code> ，二进制的  <code>01000001</code> ，小写字母  <code>z</code>  的编码是  <code>122</code></p><p>Unicode 把所有语言都统一到一套编码里，这样就不会再有乱码问题</p><p>ASCII 编码是 1 个字节，而 Unicode 编码通常是 2 个字节</p><p><strong>ASCll 出现乱码问题引入 Unicode 编码存储空间多了一倍引入 UTF-8 编码</strong></p><p>utf-8：将<strong> Unicode 字符根据不同的数字大小编码成 1-6 个字节，常用的英文字母被编码成 1 个字节，汉字通常是 3 个字节，</strong></p><table><thead><tr><th>字符</th><th>ASCII</th><th>Unicode</th><th>UTF-8</th></tr></thead><tbody><tr><td>A</td><td>01000001</td><td>00000000 01000001</td><td>01000001</td></tr><tr><td>中</td><td>x</td><td>01001110 00101101</td><td>11100100 10111000 10101101</td></tr></tbody></table><p>在计算机内存中，统一使用 Unicode 编码，当需要保存到硬盘或者需要传输的时候，就转换为 UTF-8 编码。</p><p>用记事本编辑的时候，从文件读取的 UTF-8 字符被转换为 Unicode 字符到内存里，编辑完成后，保存的时候再把 Unicode 转换为 UTF-8 保存到文件</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009142650-uopgqob.png" alt="image.png"></p><p>浏览网页的时候，服务器会把动态生成的 Unicode 内容转换为 UTF-8 再传输到浏览器：</p><p><img data-src="https://www.liaoxuefeng.com/files/attachments/923923759189600/0" alt="web-utf-8"></p><h4 id="compile-字符串编译为字节代码-2"><a class="anchor" href="#compile-字符串编译为字节代码-2">#</a> compile () 字符串编译为字节代码</h4><h4 id="编码转化-2"><a class="anchor" href="#编码转化-2">#</a> 编码转化</h4><h4 id="orda-字母转字符-2"><a class="anchor" href="#orda-字母转字符-2">#</a> ord ('A') 字母转字符</h4><h4 id="chr65-字符转字母-2"><a class="anchor" href="#chr65-字符转字母-2">#</a> chr (65) 字符转字母</h4><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>a<span class="token operator">=</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>b<span class="token operator">=</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009144810-rm45nsz.png" alt="image.png"></p><h4 id="bstr转为字节类型bytes-2"><a class="anchor" href="#bstr转为字节类型bytes-2">#</a> b'str' 转为字节类型 bytes</h4><p><code>bytes</code>  类型的数据用带  <code>b</code>  前缀的单引号或双引号表示</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>x <span class="token operator">=</span> <span class="token string">b'ABC'</span></pre></td></tr></tbody></table></figure><p>要注意区分  <code>'ABC'</code>  和  <code>b'ABC'</code> ，前者是  <code>str</code> ，后者虽然内容显示得和前者一样，但  <code>bytes</code>  的每个字符都只占用一个字节。</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009145112-3dmegln.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009150224-kn57ioe.png" alt="image.png"></p><h4 id="strencodeascii-str-变为-bytes-2"><a class="anchor" href="#strencodeascii-str-变为-bytes-2">#</a> str.encode('ascii')  <code>str</code>  变为  <code>bytes </code></h4><p><code>ASCII</code></p><p><code>UTF-8</code></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009150118-wy36xea.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009150204-81jvyjd.png" alt="image.png"></p><h4 id="strdecodeutf-8bytes变为-str-2"><a class="anchor" href="#strdecodeutf-8bytes变为-str-2">#</a> str.decode('utf-8') <code>bytes</code>  变为  <code>str</code></h4><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">b'abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">b'abc'</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">b'abc'</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009150844-zvt6jkv.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009150746-31uq63m.png" alt="image.png"></p><p>len（str）计算字符数</p><p>函数计算的是  <code>str</code>  的字符数，如果换成  <code>bytes</code> ， <code>len()</code>  函数就计算字节数</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token string">b'abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token string">'中'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token string">'中'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009151234-rhao6fv.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009151321-6k73tn8.png" alt="image.png"></p><h2 id="特殊注释-2"><a class="anchor" href="#特殊注释-2">#</a> 特殊注释</h2><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token comment">#!/usr/bin/env python3</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment"># -*- coding: utf-8 -*-</span></pre></td></tr></tbody></table></figure><p>第一行注释是为了告诉 Linux/OS X 系统，这是一个 Python 可执行程序，<strong>Windows 系统会忽略这个注释</strong>；</p><p>第二行注释是为了告诉 Python 解释器，<strong>按照 UTF-8 编码读取源代码</strong>，否则，你在源代码中写的中文输出可能会有乱码。</p><h2 id="占位符-格式化-2"><a class="anchor" href="#占位符-格式化-2">#</a> 占位符 格式化</h2><h3 id="占位符s-d-f-2"><a class="anchor" href="#占位符s-d-f-2">#</a> 占位符 % s % d % f</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009152324-rmac8lz.png" alt="image.png"></p><p>格式化方式和 C 语言是一致</p><p><code> %</code>  运算符就是用来格式化字符串的。</p><p>在字符串内部，</p><p><code>%s</code>  表示用字符串替换，</p><p><code>%d</code>  表示用整数替换，</p><p>有几个  <code>%?</code>  占位符，后面就跟几个变量或者值，顺序要对应好。如果只有一个  <code>%?</code> ，括号可以省略</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009152708-zy7vi8x.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009152722-wq5flos.png" alt="image.png"></p><table><thead><tr><th>占位符</th><th>替换内容</th></tr></thead><tbody><tr><td>%d</td><td>整数</td></tr><tr><td>%f</td><td>浮点数</td></tr><tr><td>%s</td><td>字符串</td></tr><tr><td>%x</td><td>十六进制整数</td></tr></tbody></table><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009153422-r1s8f5z.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009153433-1uhb1w3.png" alt="image.png"></p><p>转义： <code>%%</code>  来表示一个  <code>%</code></p><h3 id="format格式化字符串-2"><a class="anchor" href="#format格式化字符串-2">#</a> format（）格式化字符串</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009154141-a3v7tnj.png" alt="image.png"></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009154153-o6u9yd7.png" alt="image.png"></p><h3 id="f-string-格式化字符串-2"><a class="anchor" href="#f-string-格式化字符串-2">#</a> f-string 格式化字符串</h3><p><code>{r}</code>  被变量  <code>r</code>  的值替换， <code>{s:.2f}</code>  被变量  <code>s</code>  的值替换，并且  <code>:</code>  后面的  <code>.2f</code>  指定了格式化参数（即保留两位小数），因此， <code>{s:.2f}</code>  的替换结果是  <code>19.62</code></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009154406-qahm3f7.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009154432-m2z0xx5.png" alt="image.png"></p><h2 id="函数式编程-2"><a class="anchor" href="#函数式编程-2">#</a> 函数式编程</h2><p>函数是 Python 内建支持的一种封装，通过层层函数进行调用</p><p>#面向过程的程序设计 #：把复杂任务分解成简单的任务，这种分解可以称之为面向过程的程序设计</p><p>函数式和函数的区别：</p><p>对比例子：计算和计算器的区别</p><p>编程语言，就是越低级的语言，越贴近计算机，抽象程度低，执行效率高，比如 C 语言；越高级的语言，越贴近计算，抽象程度高，执行效率低，比如 Lisp 语言</p><p>Python 不是纯函数式编程语言</p><p>函数式编程就是一种抽象程度很高的编程范式，</p><p>纯粹的函数式编程语言编写的<strong>函数没有变量</strong>，因此，任意一个函数，<strong>只要输入是确定的，输出就是确定的</strong></p><h3 id="函数式编程特点-2"><a class="anchor" href="#函数式编程特点-2">#</a> 函数式编程特点：</h3><ol><li>纯函数式编程语言函数没有变量，输入输出确定</li><li>允许本身作为参数传入另一个函数，允许返回一个函数</li></ol><h2 id="高阶函数-2"><a class="anchor" href="#高阶函数-2">#</a> 高阶函数</h2><p>参数中有函数</p><p>高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回</p><h3 id="变量可以指向函数-2"><a class="anchor" href="#变量可以指向函数-2">#</a> 变量可以指向函数</h3><p>a = 函数</p><p>求绝对值的函数  <code>abs()</code>  为例</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">abs</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211019114343-h6egecv.png" alt="image.png"></p><p>abs（-10）是函数调用，abs 是函数本身</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>k<span class="token operator">=</span><span class="token builtin">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">#函数本身也可以赋值给变量</span></pre></td></tr><tr><td data-num="4"></td><td><pre>h<span class="token operator">=</span><span class="token builtin">abs</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>h<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211019114757-z778j3c.png" alt="image.png"></p><p>结论：函数本身也可以赋值给变量，即：# 变量可以指向函数。#</p><h3 id="函数名也是变量-2"><a class="anchor" href="#函数名也是变量-2">#</a> 函数名也是变量</h3><p>#函数名 #：<strong>其实就是指向函数的变量</strong></p><p>a () 中 a 是指向函数 a（）的变量</p><h3 id="传入函数-2"><a class="anchor" href="#传入函数-2">#</a> 传入函数</h3><p>既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。</p><p>#高阶函数 #：<strong>一个函数就可以接收另一个函数作为参数</strong></p><p>b()</p><p>a(b)</p><p>x=a</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">return</span> <span class="token builtin">abs</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">def</span> <span class="token function">a</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">return</span> f<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">+</span>f<span class="token punctuation">(</span>b<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    a1<span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    a2<span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">(</span>a1<span class="token punctuation">,</span>a2<span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211019115835-q2esytb.png" alt="image.png"></p><p>此时函数 a 为高阶函数，需要调用 f 函数作为参数</p><h2 id="mapreduce-内建函数-2"><a class="anchor" href="#mapreduce-内建函数-2">#</a> map/reduce 内建函数</h2><p>内建了  <code>map()</code>  和  <code>reduce()</code>  函数 高阶函数</p><h3 id="map函数处理生成新iterator迭代器-2"><a class="anchor" href="#map函数处理生成新iterator迭代器-2">#</a> map（）函数处理生成新 Iterator 迭代器</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211019131933-ut47b16.png" alt="image.png"> 两个参数，函数名【函数本身】，需要处理的编程式 iterator</p><p><code>&lt;br /&gt;</code>  创建一个迭代器，使用每个迭代器中的参数计算函数。当最短迭代用尽时停止。</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token builtin">map</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> <span class="token operator">*</span>iterables<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">map</span> <span class="token builtin">object</span></pre></td></tr></tbody></table></figure><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">return</span> x<span class="token operator">*</span>x</pre></td></tr><tr><td data-num="3"></td><td><pre>r<span class="token operator">=</span><span class="token builtin">map</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211019133740-kxaifya.png" alt="image.png"></p><p>运算规则抽象</p><h3 id="reduce函数作用在序列上-2"><a class="anchor" href="#reduce函数作用在序列上-2">#</a> reduce（）函数作用在序列上</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211019142951-sxqvxp4.png" alt="image.png"></p><p>两个参数，函数名【函数本身】，需要处理的 #序列 #： sequence (序列) 是一组有顺序的元素的集合</p><p>序列基本样式 [下限：上限：步长]</p><p><code>reduce</code>  把结果继续和序列的下一个元素做累积计算</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token builtin">reduce</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token punctuation">[</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> x3<span class="token punctuation">,</span> x4<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> f<span class="token punctuation">(</span>f<span class="token punctuation">(</span>f<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span><span class="token punctuation">,</span> x3<span class="token punctuation">)</span><span class="token punctuation">,</span> x4<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> functools <span class="token keyword">import</span> <span class="token builtin">reduce</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">fn</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> x <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> y</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">reduce</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">13579</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211019142820-4tlrn7x.png" alt="image.png"></p><h2 id="filter过滤序列-2"><a class="anchor" href="#filter过滤序列-2">#</a> filter () 过滤序列</h2><p>参数和 map（）相似</p><p><code>filter()</code>  也接收一个函数和一个序列</p><h2 id="sorted排序-2"><a class="anchor" href="#sorted排序-2">#</a> sorted（）排序</h2><p>高阶函数<img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211020184319-dzvm55o.png" alt="image.png"></p><p>参数：排序对象，key = 函数</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>sorted<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">36</span>, <span class="token number">5</span>, -12, <span class="token number">9</span>, -21<span class="token punctuation">]</span>, <span class="token assign-left variable">key</span><span class="token operator">=</span>abs<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p>排序的核心是比较两个元素的大小</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>print<span class="token punctuation">(</span>sorted<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1,2</span>,353,6,3,234,43,435<span class="token punctuation">]</span><span class="token punctuation">))</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211020184421-43dcfax.png" alt="image.png"></p><p>key 指定绝对值大小排序</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>print<span class="token punctuation">(</span>sorted<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1,2</span>,353,6,3,234,43,435,-242,-34,34,35<span class="token punctuation">]</span>,key<span class="token operator">=</span>abs<span class="token punctuation">))</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211020184629-q7j7zxx.png" alt="image.png"></p><h2 id="返回函数-2"><a class="anchor" href="#返回函数-2">#</a> 返回函数</h2><h3 id="函数作为返回值-2"><a class="anchor" href="#函数作为返回值-2">#</a> 函数作为返回值</h3><p>高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token comment"># 如果不需要立刻求和，而是在后面的代码中，</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment"># 根据需要再计算怎么办？可以不返回求和的结果，而是返回求和的函数：</span></pre></td></tr><tr><td data-num="3"></td><td><pre>def zary_sum<span class="token punctuation">(</span>a<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="4"></td><td><pre>    def sum<span class="token punctuation">(</span><span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token assign-left variable">sum1</span><span class="token operator">=</span><span class="token number">0</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> a:</pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token assign-left variable">sum1</span><span class="token operator">=</span>sum1+i</pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token builtin class-name">return</span> sum1</pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token builtin class-name">return</span> <span class="token function">sum</span></pre></td></tr><tr><td data-num="10"></td><td><pre>print<span class="token punctuation">(</span>type<span class="token punctuation">(</span>zary_sum<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1,2</span>,3,4<span class="token punctuation">]</span><span class="token punctuation">))</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token assign-left variable">f</span><span class="token operator">=</span>zary_sum<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1,2</span>,3,4<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>print<span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token punctuation">))</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211021100621-oot0dd6.png" alt="image.png"></p><p>调用返回函数时，每次调用都会新生成一个函数</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211021100747-ho01xzp.png" alt="image.png"></p><h2 id="闭包-2"><a class="anchor" href="#闭包-2">#</a> 闭包</h2><p>当一个函数的返回值是另外一个函数，</p><p>而返回的那个函数如果调用了其父函数内部的其它变量，如果 <strong>返回的这个函数在外部被执行，就产生了闭包</strong> 。</p><p><strong>返回函数中，返回的函数调用父函数的内部变量</strong></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211021100950-gl5liu8.png" alt="image.png"></p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token comment">#返回函数</span></pre></td></tr><tr><td data-num="2"></td><td><pre>def count<span class="token punctuation">(</span><span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token assign-left variable">fs</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1,4</span><span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="5"></td><td><pre>        def f<span class="token punctuation">(</span><span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token builtin class-name">return</span> i*i</pre></td></tr><tr><td data-num="7"></td><td><pre>        fs.append<span class="token punctuation">(</span>f<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token builtin class-name">return</span> fs</pre></td></tr><tr><td data-num="9"></td><td><pre>f1,f2,f3<span class="token operator">=</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>print<span class="token punctuation">(</span>f1<span class="token punctuation">(</span><span class="token punctuation">)</span>,f2<span class="token punctuation">(</span><span class="token punctuation">)</span>,f3<span class="token punctuation">(</span><span class="token punctuation">))</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211021103727-wtd0kdc.png" alt="image.png"></p><p>返回一个函数时，牢记该函数并未执行，返回函数中不要引用任何可能会变化的变量。</p><h2 id="lambda匿名函数-2"><a class="anchor" href="#lambda匿名函数-2">#</a> lambda（）匿名函数</h2><p>lambda 关键字 函数参数：函数表达式</p><p>传入函数时，有些时候，不需要显式地定义函数</p><p>Python 对匿名函数的支持有限，只有一些简单的情况下可以使用匿名函数。</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>lambda x:x*x</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">#等价于</span></pre></td></tr><tr><td data-num="3"></td><td><pre>def f<span class="token punctuation">(</span>x<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token builtin class-name">return</span> x*x</pre></td></tr></tbody></table></figure><p>关键字  <code>lambda</code>  表示匿名函数，冒号前面的  <code>x</code>  表示函数参数，只能一个表达式</p><p>不用写  <code>return</code> ，返回值就是该表达式的结果。</p><p>匿名函数也是一个函数对象</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token assign-left variable">f</span><span class="token operator">=</span>lamdba x:x*x</pre></td></tr></tbody></table></figure><p>判断奇数函数</p><p>原函数：</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>def is_odd<span class="token punctuation">(</span>n<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token builtin class-name">return</span> n % <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>L <span class="token operator">=</span> list<span class="token punctuation">(</span>filter<span class="token punctuation">(</span>is_odd, range<span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">20</span><span class="token punctuation">))</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p>采用匿名函数修改</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token assign-left variable">l</span><span class="token operator">=</span>list<span class="token punctuation">(</span>filter<span class="token punctuation">(</span>lambda x:x%2<span class="token operator">==</span><span class="token number">1</span>,range<span class="token punctuation">(</span><span class="token number">1,20</span><span class="token punctuation">))</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>print<span class="token punctuation">(</span>l<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211021143505-wbqh836.png" alt="image.png"></p><h2 id="装饰器-decorator-2"><a class="anchor" href="#装饰器-decorator-2">#</a> 装饰器 Decorator</h2><h3 id="本质上装饰器就是一个返回函数的高阶函数-2"><a class="anchor" href="#本质上装饰器就是一个返回函数的高阶函数-2">#</a> 本质上，装饰器就是一个返回函数的高阶函数</h3><p>@log 等价于</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>now <span class="token operator">=</span> log<span class="token punctuation">(</span>now<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p>由于函数也是一个对象，而且函数对象可以被赋值给变量，</p><p>所以，通过变量也能调用该函数</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211022101101-ncgju0i.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211022101111-tgdwt0q.png" alt="image.png"></p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>def log<span class="token punctuation">(</span>func<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="2"></td><td><pre>    def wrapper<span class="token punctuation">(</span>*args,**kwargs<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="3"></td><td><pre>        print<span class="token punctuation">(</span><span class="token string">'call %s'</span>% func.__name__<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token builtin class-name">return</span> func<span class="token punctuation">(</span>*args,**kwargs<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token builtin class-name">return</span> wrapper<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">#func 为参数所以是高阶函数</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">#return 函数所以是返回函数，</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">#没有调用父函数中参数，所以不是闭包</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211022110733-h27x1zh.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211022110058-zyo7xpn.png" alt="image.png"></p><p>场景注意：</p><p>无 @装饰器时函数不调用，需要参数才调用</p><p>当 @时会直接调用装饰器定义函数然后执行函数，不用调用函数</p><p>三层时，传入参数</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>def log1<span class="token punctuation">(</span>text<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="2"></td><td><pre>    def decorator<span class="token punctuation">(</span>func<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="3"></td><td><pre>        def wapper<span class="token punctuation">(</span>*args,**kw<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="4"></td><td><pre>            print<span class="token punctuation">(</span><span class="token string">'%s %s'</span>%<span class="token punctuation">(</span>text,func.__name__<span class="token punctuation">))</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            <span class="token builtin class-name">return</span> func<span class="token punctuation">(</span>*args,**kw<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token builtin class-name">return</span> wapper</pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token builtin class-name">return</span> decorator</pre></td></tr><tr><td data-num="8"></td><td><pre>@log1<span class="token punctuation">(</span><span class="token string">'ruan'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>def now3<span class="token punctuation">(</span><span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="10"></td><td><pre>    print<span class="token punctuation">(</span><span class="token string">"hhh"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>now3<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p>相当于在返回高阶函数上还有一个函数，所以返回时应该还要调用一次</p><h2 id="wraps-常用装饰器-2"><a class="anchor" href="#wraps-常用装饰器-2">#</a> @wraps 常用装饰器</h2><p>当装饰器是个闭包时，装饰器调用变量会改变增加 @wraps 后装饰器内的变量不变</p><p>装饰器在装饰一个函数时，，原函数就成了一个新的函数，也</p><p>就是说其属性会发生变化，所以为了 <strong>不改变原函数的属性</strong>，</p><p>我们会调用 functools 中的 wraps 装饰器来保证原函数的属性不变</p><h4 id="不加wraps时-2"><a class="anchor" href="#不加wraps时-2">#</a> 不加 wraps 时</h4><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>@wraps<span class="token punctuation">(</span>func<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>from functools <span class="token function">import</span> wraps</pre></td></tr><tr><td data-num="2"></td><td><pre>def wrap<span class="token punctuation">(</span>func<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="3"></td><td><pre>   </pre></td></tr><tr><td data-num="4"></td><td><pre>    def b<span class="token punctuation">(</span><span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token string">'b'</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        print<span class="token punctuation">(</span><span class="token string">'decorator:'</span>,b.__name__<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        print<span class="token punctuation">(</span><span class="token string">'funname'</span>,func.__name__<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        func<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token builtin class-name">return</span> b</pre></td></tr><tr><td data-num="10"></td><td><pre>@wrap</pre></td></tr><tr><td data-num="11"></td><td><pre>def a<span class="token punctuation">(</span><span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token string">'a'</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    print<span class="token punctuation">(</span><span class="token string">'name'</span>,a.__name__<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>a<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211022115935-kgsz7b2.png" alt="image.png"></p><p>加装饰器 wraps 时</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>from functools <span class="token function">import</span> wraps</pre></td></tr><tr><td data-num="2"></td><td><pre>def wrap<span class="token punctuation">(</span>func<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="3"></td><td><pre>    @wraps<span class="token punctuation">(</span>func<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    def b<span class="token punctuation">(</span><span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token string">'b'</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        print<span class="token punctuation">(</span><span class="token string">'decorator:'</span>,b.__name__<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        print<span class="token punctuation">(</span><span class="token string">'funname'</span>,func.__name__<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        func<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token builtin class-name">return</span> b</pre></td></tr><tr><td data-num="10"></td><td><pre>@wrap</pre></td></tr><tr><td data-num="11"></td><td><pre>def a<span class="token punctuation">(</span><span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token string">'a'</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    print<span class="token punctuation">(</span><span class="token string">'name'</span>,a.__name__<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>a<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211022115950-2j3i7ht.png" alt="image.png"></p><p>闭包的概念：调用父函数中的变量的函数，为了保证数据安全。变量作用域只在函数内部，可在闭包中操作数据。</p><p>装饰器返回为什么是函数名（函数内存地址）而不直接执行函数？</p><p>当有参数传入时，可直接与调用的函数中的值传入参数执行。</p><p>（）是运算符 f () 与 f.<strong>call</strong> () 等价：将 f 对象变成变成可调用的对象</p><h2 id="偏函数functools模块-2"><a class="anchor" href="#偏函数functools模块-2">#</a> 偏函数（functools 模块）</h2><p>属于 functools 模块</p><h3 id="作用-3"><a class="anchor" href="#作用-3">#</a> 作用：</h3><p>通过设定参数的默认值，降低函数调用的参数</p><p><code>int()</code>  函数默认按十进制转换</p><p>print(int('100',base=8))</p><p>经常调用于是重写一个函数 int2</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>def int2<span class="token punctuation">(</span>x, <span class="token assign-left variable">base</span><span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="2"></td><td><pre>    print<span class="token punctuation">(</span>int<span class="token punctuation">(</span>x, base<span class="token punctuation">))</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token builtin class-name">return</span> int<span class="token punctuation">(</span>x, base<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>print<span class="token punctuation">(</span>int2<span class="token punctuation">(</span><span class="token string">'2334'</span><span class="token punctuation">))</span></pre></td></tr></tbody></table></figure><p>采用偏函数</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token function">import</span> functools</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token assign-left variable">int3</span><span class="token operator">=</span>functools.partial<span class="token punctuation">(</span>int,base<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>print<span class="token punctuation">(</span>int3<span class="token punctuation">(</span><span class="token string">'46'</span><span class="token punctuation">))</span></pre></td></tr><tr><td data-num="4"></td><td><pre>print<span class="token punctuation">(</span>int<span class="token punctuation">(</span><span class="token punctuation">))</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211028103219-mdbldp6.png" alt="image.png"></p><p>functools.partial 的作用是将函数的特定参数固定住（设定为默认值）</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211028103645-7po81oc.png" alt="image.png"></p><p>创建偏函数的时候也可以接收，函数对象，*args，**kw</p><h2 id="模块-2"><a class="anchor" href="#模块-2">#</a> 模块</h2><p>python 包：作用区分相同名称的模块</p><p>模块相当于一个 py 文件</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211028105055-2xv0z2i.png" alt="image.png"></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211028105133-tkzgcka.png" alt="image.png"></p><h2 id="作用域-2"><a class="anchor" href="#作用域-2">#</a> 作用域</h2><p>仅仅在模块内部使用。在 Python 中，是通过  <code>_</code> 前缀来实现的。</p><h3 id="pubilc公开-2"><a class="anchor" href="#pubilc公开-2">#</a> pubilc 公开</h3><p>正常的函数和变量名是公开的（public）</p><h3 id="private非公开___-2"><a class="anchor" href="#private非公开___-2">#</a> private 非公开_,__</h3><p>_xxx 和__xxx 这样的函数或变量就是非公开的（private）</p><h2 id="安装第三方模块pip-2"><a class="anchor" href="#安装第三方模块pip-2">#</a> 安装第三方模块 pip</h2><p>pip install 模块名</p><h3 id="模块搜索路径-2"><a class="anchor" href="#模块搜索路径-2">#</a> 模块搜索路径</h3><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token function">import</span> sys</pre></td></tr><tr><td data-num="2"></td><td><pre>print<span class="token punctuation">(</span>sys.path<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p>两种方式：</p><ol><li>添加搜索路径<figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token function">import</span> sys</pre></td></tr><tr><td data-num="2"></td><td><pre>sys.path.append<span class="token punctuation">(</span><span class="token string">'/Users/michael/my_py_scripts'</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure></li><li>设置环境变量</li></ol><p>第二种方法是设置环境变量  <code>PYTHONPATH</code></p><h2 id="面向对象编程-2"><a class="anchor" href="#面向对象编程-2">#</a> 面向对象编程</h2><p>面向对象编程 ——Object Oriented Programming，简称 OOP，是一种程序设计思想</p><p>对象作为程序的基本单元，</p><p>一个对象包含了数据和操作数据的函数</p><p>数据封装、继承和多态是面向对象的三大特点</p><h2 id="类和实例-2"><a class="anchor" href="#类和实例-2">#</a> 类和实例</h2><p>面向对象最重要的概念就是类（Class）和实例（Instance）</p><p>类是抽象出来的模板</p><p>实例是根据类创建出的对象，每个对象可能有属性和方法</p><p>定义类是通过  <code>class</code>  关键字，类名通常是大写开头的单词</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>class Student<span class="token punctuation">(</span>object<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="2"></td><td><pre>    pass</pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211028113324-1nch2o5.png" alt="image.png"></p><p>！！！在类中定义函数有一点不同，定义佛如方法第一个参数永远是实例变量本身 self</p><p>仍然可以用默认参数、可变参数、关键字参数和命名关键字参数</p><h2 id="数据封装-2"><a class="anchor" href="#数据封装-2">#</a> 数据封装</h2><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>class Student<span class="token punctuation">(</span>object<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="2"></td><td><pre>    def __init__<span class="token punctuation">(</span>self, name, score<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="3"></td><td><pre>        self.name <span class="token operator">=</span> name</pre></td></tr><tr><td data-num="4"></td><td><pre>        self.score <span class="token operator">=</span> score</pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>    def get_grade<span class="token punctuation">(</span>self<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">if</span> self.score <span class="token operator">&gt;</span><span class="token operator">=</span> <span class="token number">90</span>:</pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token builtin class-name">return</span> <span class="token string">'A'</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">elif</span> self.score <span class="token operator">&gt;</span><span class="token operator">=</span> <span class="token number">60</span>:</pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token builtin class-name">return</span> <span class="token string">'B'</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        else:</pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token builtin class-name">return</span> <span class="token string">'C'</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211028113713-vhhvowi.png" alt="image.png"></p><h2 id="访问限制-2"><a class="anchor" href="#访问限制-2">#</a> 访问限制</h2><h3 id="作用-4"><a class="anchor" href="#作用-4">#</a> 作用：</h3><p><strong>确保了外部代码不能随意修改对象内部的状态</strong></p><p>实例的变量名如果以  <code>__</code> 开头，就变成了一个私有变量（private）</p><p>外部无法访问_name</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>class Student<span class="token punctuation">(</span>object<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="2"></td><td><pre>    def __init__<span class="token punctuation">(</span>self,name,age<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="3"></td><td><pre>        self._name<span class="token operator">=</span>name</pre></td></tr><tr><td data-num="4"></td><td><pre>        self.age<span class="token operator">=</span>age</pre></td></tr><tr><td data-num="5"></td><td><pre>    def print_name<span class="token punctuation">(</span>self<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="6"></td><td><pre>        print<span class="token punctuation">(</span>self._name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token builtin class-name">return</span> self.age,self._name</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token assign-left variable">a</span><span class="token operator">=</span>Student<span class="token punctuation">(</span><span class="token string">'ruan'</span>,23<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token assign-left variable">h</span><span class="token operator">=</span>a.print_name<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>print<span class="token punctuation">(</span>h<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211028114732-awu2k2m.png" alt="image.png"></p><p>若是要获取，修改变量增加 get，set 方式即可</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>class Student<span class="token punctuation">(</span>object<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="2"></td><td><pre>    def __init__<span class="token punctuation">(</span>self,name,age<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="3"></td><td><pre>        self._name<span class="token operator">=</span>name</pre></td></tr><tr><td data-num="4"></td><td><pre>        self.age<span class="token operator">=</span>age </pre></td></tr><tr><td data-num="5"></td><td><pre>    def get_name<span class="token punctuation">(</span>self<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token builtin class-name">return</span> self.name</pre></td></tr><tr><td data-num="7"></td><td><pre>    def set_name<span class="token punctuation">(</span>self,name<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="8"></td><td><pre>        self._name<span class="token operator">=</span>name</pre></td></tr></tbody></table></figure><p>Python 本身没有任何机制阻止你干坏事，一切全靠自觉。</p><p>类外部无法访问</p><h2 id="继承和多态-2"><a class="anchor" href="#继承和多态-2">#</a> 继承和多态</h2><h3 id="继承-2"><a class="anchor" href="#继承-2">#</a> 继承</h3><h4 id="多态-2"><a class="anchor" href="#多态-2">#</a> 多态</h4><p>在继承关系中，如果一个实例的数据类型是某个子类，那它的数据类型也可以被看做是父类。</p><p>比如：动物是父类，狗和鱼是子类；鱼是鱼类，鱼是动物都成立。</p><p>判断一个变量是否是某个类型可以用  <code>isinstance()</code>  判断</p><h3 id="鸭子类型-2"><a class="anchor" href="#鸭子类型-2">#</a> 鸭子类型</h3><p>并不要求严格的继承体，一个对象只要 “看起来像鸭子，走起路来像鸭子”，那它就可以被看做是鸭子。</p><h2 id="获取对象信息-2"><a class="anchor" href="#获取对象信息-2">#</a> 获取对象信息</h2><h3 id="type判断对象类型-2"><a class="anchor" href="#type判断对象类型-2">#</a> type（）判断对象类型</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211102183643-gwgjuho.png" alt="image.png"></p><h3 id="isinstance对于继承关系判断class的类型-2"><a class="anchor" href="#isinstance对于继承关系判断class的类型-2">#</a> isinstance () 对于继承关系，判断 class 的类型</h3><h3 id="dir获取对象的所有属性和方法-2"><a class="anchor" href="#dir获取对象的所有属性和方法-2">#</a> dir（）获取对象的所有属性和方法</h3><h4 id="len对象长度-2"><a class="anchor" href="#len对象长度-2">#</a> len（）对象长度</h4><h4 id="lower返回小写的字符串-2"><a class="anchor" href="#lower返回小写的字符串-2">#</a> lower（）返回小写的字符串</h4><h4 id="getattr获取属性a-2"><a class="anchor" href="#getattr获取属性a-2">#</a> getattr（）获取属性 a</h4><h4 id="setattr设置属性a-2"><a class="anchor" href="#setattr设置属性a-2">#</a> setattr（）设置属性 a</h4><h4 id="hasattrobja判断是否有属性a-2"><a class="anchor" href="#hasattrobja判断是否有属性a-2">#</a> hasattr（obj,'a'）判断是否有属性 a</h4><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>getattr<span class="token punctuation">(</span>obj, <span class="token string">'z'</span>, <span class="token number">404</span><span class="token punctuation">)</span> <span class="token comment"># 获取属性 'z'，如果不存在，返回默认值 404</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">404</span></pre></td></tr></tbody></table></figure><h2 id="实例属性和类属性-2"><a class="anchor" href="#实例属性和类属性-2">#</a> 实例属性和类属性</h2><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211102184822-83nvy25.png" alt="image.png"></p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>class Student<span class="token punctuation">(</span>object<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">'ruan'</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   </pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token assign-left variable">h</span><span class="token operator">=</span>Student<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>h.name<span class="token operator">=</span><span class="token string">'hhh'</span></pre></td></tr></tbody></table></figure><p>类中的 name 是类属性，</p><p>创建 h 类对象即实例后赋值的是实例属性 name，但由于实例对象的优先级比类属性高，会屏蔽类中的 name 属性，即 h.name 的值为 hhh</p><h3 id="总结-4"><a class="anchor" href="#总结-4">#</a> 总结：</h3><ol><li>实例属性属于各个实例所有，互不干扰；</li><li>类属性属于类所有，所有实例共享一个属性；</li><li>不要对实例属性和类属性使用相同的名字，否则将产生难以发现的错误</li></ol><h1 id="面向对象高级编程-2"><a class="anchor" href="#面向对象高级编程-2">#</a> 面向对象高级编程</h1><p>数据封装、继承和多态只是面向对象程序设计中最基础的 3 个概念</p><p>多重继承、定制类、元类</p><h1 id="_slots_使用-2"><a class="anchor" href="#_slots_使用-2">#</a> _slots_使用</h1><p>可以给创建的实例绑定属性和方法</p><p>给一个实例绑定的方法对另外一个实例对象是不起作用的</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>class A:</pre></td></tr><tr><td data-num="2"></td><td><pre>    def run<span class="token punctuation">(</span>self<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="3"></td><td><pre>        print<span class="token punctuation">(</span><span class="token string">"i im ferther runing...."</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token assign-left variable">sun1</span><span class="token operator">=</span>A<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">#给实例 sun1 设置 name 属性</span></pre></td></tr><tr><td data-num="6"></td><td><pre>sun1.name<span class="token operator">=</span><span class="token string">'i im name'</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">#创建实例对象 2</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token assign-left variable">sun2</span><span class="token operator">=</span>A<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">#实例对象 sun1 的属性和 sun2 无关，即 sun2 没有 name 属性</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">#给实例 sun1 绑定方法，方法和属性同理</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">#定义方法</span></pre></td></tr><tr><td data-num="12"></td><td><pre>def setAll<span class="token punctuation">(</span>self,num<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="13"></td><td><pre>    print<span class="token punctuation">(</span>num<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>sun1.newfun<span class="token operator">=</span>MethodType<span class="token punctuation">(</span>setAll, sun1<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>sun1.newfun<span class="token punctuation">(</span><span class="token number">37</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment">#若所有实例都需要绑定方法则给类绑定方法</span></pre></td></tr><tr><td data-num="17"></td><td><pre>A.setAll<span class="token operator">=</span>setAll</pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">#给类绑定方法后，所有创建的实例的均可调用</span></pre></td></tr></tbody></table></figure><pre><code>def set_age(self, age): # 定义一个函数作为实例方法...     self.age = age...&gt;&gt;&gt; from types import MethodType&gt;&gt;&gt; s.set_age = MethodType(set_age, s) # 给实例绑定一个方法&gt;&gt;&gt; s.set_age(25) # 调用实例方法</code></pre><h2 id="限制实例属性定义一个特殊的-__slots__变量-2"><a class="anchor" href="#限制实例属性定义一个特殊的-__slots__变量-2">#</a> 限制实例属性，定义一个特殊的  <code>__slots__</code> 变量</h2><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    __slots__ <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">)</span> <span class="token comment"># 用 tuple 定义允许绑定的属性名称</span></pre></td></tr><tr><td data-num="3"></td><td><pre>s<span class="token operator">=</span>Student<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>s<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'ruan'</span></pre></td></tr><tr><td data-num="5"></td><td><pre>s<span class="token punctuation">.</span>firstname<span class="token operator">=</span><span class="token string">'i im firstname'</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">#输出的时候 firstname 的属性会报错，</span></pre></td></tr><tr><td data-num="7"></td><td><pre>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>AttributeError<span class="token punctuation">:</span> <span class="token string">'Student'</span> <span class="token builtin">object</span> has no attribute <span class="token string">'firstaname'</span></pre></td></tr></tbody></table></figure><h3 id="注意-2"><a class="anchor" href="#注意-2">#</a> 注意：</h3><p>_slots_使用时要注意，定义的属性只在当前的类的实例中，对于继承的子类是不起作用的</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    __slots__ <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'i im run people......'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span>People<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">say</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'i im teacher....'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>t<span class="token operator">=</span>Teacher<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>t<span class="token punctuation">.</span>tall<span class="token operator">=</span><span class="token string">'shouhua'</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>tall<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>p<span class="token operator">=</span>People<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>p<span class="token punctuation">.</span>tall<span class="token punctuation">(</span><span class="token string">'shouhuap'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>tall<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211103140608-7ezqmvs.png" alt="image.png"></p><p>只限制父类 People 的属性，而子类 Teacher 中不限制</p><h2 id="property-2"><a class="anchor" href="#property-2">#</a> @property</h2><p>在绑定属性时，如果我们直接把属性暴露出去，导致可以随意更改。通过 get，set 来获取更改属性值。</p><p>在 python 中直接调用装饰器将一个方法变成属性调用</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token decorator annotation punctuation">@property</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">#使用 get 方法是调用装饰器 @peoperty，</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment"># 同时自动创建了另一个装饰器 @属性.setter</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">score</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>score</pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token decorator annotation punctuation">@score<span class="token punctuation">.</span>setter</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">score</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        self<span class="token punctuation">.</span>_score<span class="token operator">=</span>value</pre></td></tr></tbody></table></figure><h2 id="总结-5"><a class="anchor" href="#总结-5">#</a> 总结：</h2><p>- 权限限制只对类对象实际起作用，想要达到方法和属性强制访问权限，需要使用 @property 装饰器进行 get，set 方法</p><p>属性名与方法名一定要区分开，不然会进入死循环（self._age，def age ()）<br>实例化的对象使用属性时，不是调用属性（meizi._age），而是用的方法名（meizi.age）<br>@property 其实就是实现了 getter 功能； @xxx.setter 实现的是 setter 功能；还有一个 @xxx.deleter 实现删除功能<br>定义方法的时候 @property 必须在 @xxx.setter 之前，且二者修饰的方法名相同（age ()）<br>如果只实现了 @property（而没有实现 @xxx.setter），那么该属性为 只读属性</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token comment">#请利用 @property 给一个 Screen 对象加上 width 和 height 属性，</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment"># 以及一个只读属性 resolution：</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Screen</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    __slots__ <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'_width'</span><span class="token punctuation">,</span><span class="token string">'_height'</span><span class="token punctuation">,</span><span class="token string">'_resolution'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token decorator annotation punctuation">@property</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">width</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_width</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token comment"># 方法名称和实例变量均为 width:</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token decorator annotation punctuation">@width<span class="token punctuation">.</span>setter</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">width</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>widthValue<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        self<span class="token punctuation">.</span>_width<span class="token operator">=</span>widthValue</pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token decorator annotation punctuation">@property</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">height</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_height</pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token decorator annotation punctuation">@width<span class="token punctuation">.</span>setter</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">height</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        self<span class="token punctuation">.</span>_height <span class="token operator">=</span> height</pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token decorator annotation punctuation">@property</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">resolution</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_width <span class="token operator">*</span> self<span class="token punctuation">.</span>_height</pre></td></tr><tr><td data-num="26"></td><td><pre>s<span class="token operator">=</span>Screen<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>s<span class="token punctuation">.</span>width<span class="token operator">=</span><span class="token number">23</span></pre></td></tr><tr><td data-num="28"></td><td><pre>s<span class="token punctuation">.</span>height<span class="token operator">=</span><span class="token number">12</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>resolution<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211103150647-dge6za2.png" alt="image.png"></p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>s<span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">60</span> <span class="token comment"># OK，实际转化为 s.set_score (60)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>s<span class="token punctuation">.</span>score <span class="token comment"># OK，实际转化为 s.get_score ()</span></pre></td></tr></tbody></table></figure><p>要特别注意：属性的方法名不要和实例变量重名。例如，以下的代码是错误的：</p><pre><code>class Student(object):    # 方法名称和实例变量均为birth:    @property    def birth(self):        return self.birth</code></pre><p>出现递归调用错误</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211103151046-5z499ew.png" alt="image.png"></p><p>之前的例子中 width 和_width 不同所以可以运行</p><h2 id="多重继承-3"><a class="anchor" href="#多重继承-3">#</a> 多重继承</h2><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211103151750-dvwa7qb.png" alt="image.png"></p><p>python 可以支持多继承，即一个子类可以继承多个父类；但 java 是单继承，只能有一个父类</p><p>Tercher（Name，study，teach）即 Teacher 可以继承多个父类</p><h3 id="mixin-2"><a class="anchor" href="#mixin-2">#</a> MixIn</h3><p>在设计类的继承关系时，通常，主线都是单一继承下来的，例如， <code>Teacher</code>  继承自 Name。但是，如果需要 “混入” 额外的功能，通过多重继承就可以实现，比如 Teacher 除了继承自  <code>Name</code>  外，再同时继承  <code>Teach</code> 。这种设计通常称之为 MixIn</p><p>Python 自带了  <code>TCPServer</code>  和  <code>UDPServer</code>  这两类网络服务，而要同时服务多个用户就必须使用多进程或多线程模型，这两种模型由  <code>ForkingMixIn</code>  和  <code>ThreadingMixIn</code>  提供。</p><h3 id="多继承-2"><a class="anchor" href="#多继承-2">#</a> 多继承</h3><p>多重继承这个名词一般用来形容继承链条可以很长，多个层次。</p><h3 id="多重继承-4"><a class="anchor" href="#多重继承-4">#</a> 多重继承</h3><p><strong>多继承则指一个类可以有多个基类，相反则是单继承</strong>。任何面向对象编程语言都支持多重继承，但像 java 这种只能通过接口实现有限程度的多继承</p><p>问：多继承 如果多个类有共同得方法名 怎么区分是调得哪个类🤡</p><p>答：调用该方法的时候，会调用第一顺位继承父类的方法</p><h3 id="总结-6"><a class="anchor" href="#总结-6">#</a> 总结：</h3><ol><li>Python 允许使用多重继承，因此，MixIn 就是一种常见的设计</li><li>只允许单一继承的语言（如 Java）不能使用 MixIn 的设计</li></ol><h2 id="定制类-2"><a class="anchor" href="#定制类-2">#</a> 定制类</h2><p>Python 的 class 中还有__xxx__有特殊用途的函数，可以帮助我们定制类</p><h3 id="str回用户看到的字符串-2"><a class="anchor" href="#str回用户看到的字符串-2">#</a> <strong>str</strong> () 回用户看到的字符串</h3><p>将对象  <code>&lt;__main__.Student object at 0x109afb190&gt;</code>  变成易读的数据</p><p>只在调用 print 时会调用__str__，交互界面时还是现实上方不易读的对象内容，此时用</p><h3 id="repr返回程序开发者看到的字符串-2"><a class="anchor" href="#repr返回程序开发者看到的字符串-2">#</a> <strong>repr</strong> () 返回程序开发者看到的字符串</h3><p><code>__str__()</code>  返回用户看到的字符串，而  <code>__repr__()</code>  返回程序开发者看到的字符串，</p><p>也就是说， <code>__repr__()</code>  是为调试服务的</p><p>简写</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>        <span class="token keyword">return</span> <span class="token string">'xxx object (name=%s)'</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name</pre></td></tr><tr><td data-num="3"></td><td><pre>__repr__ <span class="token operator">=</span> __str__</pre></td></tr></tbody></table></figure><h3 id="_iter返回一个迭代对象-2"><a class="anchor" href="#_iter返回一个迭代对象-2">#</a> _<strong>iter</strong> () 返回一个迭代对象</h3><p>需要用到 for in 迭代，需要转化为迭代对象</p><p>该方法返回一个迭代对象，然后，Python 的 for 循环就会不断调用该迭代对象的  <code>__next__()</code>  方法拿到循环的下一个值，直到遇到  <code>StopIteration</code>  错误时退出循环</p><p>例子：</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Fib</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        self<span class="token punctuation">.</span>a<span class="token punctuation">,</span>self<span class="token punctuation">.</span>b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">return</span> self</pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        self<span class="token punctuation">.</span>a<span class="token punctuation">,</span>self<span class="token punctuation">.</span>b<span class="token operator">=</span>self<span class="token punctuation">.</span>b<span class="token punctuation">,</span>self<span class="token punctuation">.</span>a<span class="token operator">+</span>self<span class="token punctuation">.</span>b</pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>a<span class="token operator">&gt;</span><span class="token number">1000</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token keyword">raise</span>  StopIteration</pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>a</pre></td></tr><tr><td data-num="11"></td><td><pre>a<span class="token operator">=</span>Fib<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> a<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211103155046-1xs33i9.png" alt="image.png"></p><h3 id="getitem表现得像list那样按照下标取出元素-2"><a class="anchor" href="#getitem表现得像list那样按照下标取出元素-2">#</a> <strong><strong>getitem</strong></strong> () 表现得像 list 那样按照下标取出元素</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Fib</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        self<span class="token punctuation">.</span>a<span class="token punctuation">,</span>self<span class="token punctuation">.</span>b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">return</span> self</pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        self<span class="token punctuation">.</span>a<span class="token punctuation">,</span>self<span class="token punctuation">.</span>b<span class="token operator">=</span>self<span class="token punctuation">.</span>b<span class="token punctuation">,</span>self<span class="token punctuation">.</span>a<span class="token operator">+</span>self<span class="token punctuation">.</span>b</pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>a<span class="token operator">&gt;</span><span class="token number">1000</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token keyword">raise</span>  StopIteration</pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>a</pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        a<span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            a<span class="token punctuation">,</span>b<span class="token operator">=</span>b<span class="token punctuation">,</span>a<span class="token operator">+</span>b</pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">return</span> a</pre></td></tr><tr><td data-num="16"></td><td><pre>a<span class="token operator">=</span>Fib<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211103155122-fo5pjxz.png" alt="image.png"></p><p>以上是传入 int，切片功能实现，isinstance 判断类型</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Fib</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        self<span class="token punctuation">.</span>a<span class="token punctuation">,</span>self<span class="token punctuation">.</span>b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">return</span> self</pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        self<span class="token punctuation">.</span>a<span class="token punctuation">,</span>self<span class="token punctuation">.</span>b<span class="token operator">=</span>self<span class="token punctuation">.</span>b<span class="token punctuation">,</span>self<span class="token punctuation">.</span>a<span class="token operator">+</span>self<span class="token punctuation">.</span>b</pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>a<span class="token operator">&gt;</span><span class="token number">1000</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token keyword">raise</span>  StopIteration</pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>a</pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="15"></td><td><pre>                a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token operator">+</span> b</pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token keyword">return</span> a</pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span><span class="token builtin">slice</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            start<span class="token operator">=</span>item<span class="token punctuation">.</span>start</pre></td></tr><tr><td data-num="19"></td><td><pre>            stop<span class="token operator">=</span>item<span class="token punctuation">.</span>stop</pre></td></tr><tr><td data-num="20"></td><td><pre>            <span class="token keyword">if</span> start <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="21"></td><td><pre>                start<span class="token operator">=</span><span class="token number">0</span></pre></td></tr><tr><td data-num="22"></td><td><pre>            a<span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            L<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>stop<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="25"></td><td><pre>                L<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>                a<span class="token punctuation">,</span>b<span class="token operator">=</span>b<span class="token punctuation">,</span>a<span class="token operator">+</span>b</pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token keyword">return</span> L</pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>a<span class="token operator">=</span>Fib<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211103155838-wdwjies.png" alt="image.png"></p><h3 id="getattr动态返回一个属性-2"><a class="anchor" href="#getattr动态返回一个属性-2">#</a> <strong>getattr</strong> () 动态返回一个属性</h3><p>调用类属性或方法时，先在__init__() 获取后，再从__getattr__() 获取，获取不到才报错</p><h3 id="call直接调用实例本身-2"><a class="anchor" href="#call直接调用实例本身-2">#</a> <strong>call</strong> () 直接调用实例本身</h3><p>与直接调用这个函数一样</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        self<span class="token punctuation">.</span>name<span class="token operator">=</span>name</pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'i im call %s'</span><span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>p<span class="token operator">=</span>People<span class="token punctuation">(</span><span class="token string">'ruan'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>p<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211104150832-d8wkn0m.png" alt="image.png"></p><h2 id="使用枚举类-2"><a class="anchor" href="#使用枚举类-2">#</a> 使用枚举类</h2><p>枚举类：在某些情况下，一个类的 实例对象 的<strong>数量</strong>是 <strong>有限且固定</strong> 的，如季节类，它的实例对象只有春、夏、秋、冬。 在 Java 中像这种对象实例有限且固定的类被称为枚举类；这样的枚举类型定义一个 class 类型，然后，每个常量都是 class 的一个唯一实例。Python 提供了  <code>Enum</code>  类来实现这个功能。</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> enum <span class="token keyword">import</span> Enum</pre></td></tr><tr><td data-num="2"></td><td><pre>M<span class="token operator">=</span>Enum<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'sun1'</span><span class="token punctuation">,</span><span class="token string">'sun2'</span><span class="token punctuation">,</span><span class="token string">'sun3'</span><span class="token punctuation">,</span><span class="token string">'sun4'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>M<span class="token punctuation">.</span>sun1<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211104151622-x7yqw9j.png" alt="image.png"></p><p>自定义枚举类</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> enum <span class="token keyword">import</span> Enum<span class="token punctuation">,</span>unique</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token decorator annotation punctuation">@unique</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Week</span><span class="token punctuation">(</span>Enum<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    sun1<span class="token operator">=</span><span class="token number">1</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    sun2<span class="token operator">=</span><span class="token number">2</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    sun3<span class="token operator">=</span><span class="token number">3</span></pre></td></tr><tr><td data-num="7"></td><td><pre>day2<span class="token operator">=</span>Week<span class="token punctuation">.</span>sun2</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>day2<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211104152125-y6nm9vn.png" alt="image.png"></p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> enum <span class="token keyword">import</span> Enum<span class="token punctuation">,</span>unique</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token decorator annotation punctuation">@unique</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Gender</span><span class="token punctuation">(</span>Enum<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    Male<span class="token operator">=</span><span class="token number">0</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    Female<span class="token operator">=</span><span class="token number">1</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>gender<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        self<span class="token punctuation">.</span>name<span class="token operator">=</span>name</pre></td></tr><tr><td data-num="9"></td><td><pre>        self<span class="token punctuation">.</span>gender<span class="token operator">=</span>gender</pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment"># 测试:</span></pre></td></tr><tr><td data-num="12"></td><td><pre>bart <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'Bart'</span><span class="token punctuation">,</span> Gender<span class="token punctuation">.</span>Male<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">if</span> bart<span class="token punctuation">.</span>gender <span class="token operator">==</span> Gender<span class="token punctuation">.</span>Male<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'测试通过!'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">else</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'测试失败!'</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211104152731-wmdziil.png" alt="image.png"></p><h2 id="使用元类创建类-2"><a class="anchor" href="#使用元类创建类-2">#</a> 使用元类 [创建类]</h2><p>实例对象是类创建</p><p>类是元类创建</p><p>创建类的方式</p><h3 id="方式一type-2"><a class="anchor" href="#方式一type-2">#</a> 方式一：type（）</h3><p><code>type()</code>  函数既可以返回一个对象的类型，又可以创建出新的类型，比如，我们可以通过  <code>type()</code>  函数创建出  <code>Hello</code>  类</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> class1104 <span class="token keyword">import</span> <span class="token operator">*</span></pre></td></tr><tr><td data-num="2"></td><td><pre>h<span class="token operator">=</span>Hello<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>Hello<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211104153538-6iulybe.png" alt="image.png"></p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>Hello <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>hello<span class="token operator">=</span>fn<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p>要创建一个 class 对象， <code>type()</code>  函数依次传入 3 个参数：</p><ol><li>class 的名称；</li><li>继承的父类集合，注意 Python 支持多重继承，如果只有一个父类，别忘了 tuple 的单元素写法；</li><li>class 的方法名称与函数绑定，这里我们把函数  <code>fn</code>  绑定到方法名  <code>hello</code>  上</li></ol><h3 id="方式二元类metaclass-2"><a class="anchor" href="#方式二元类metaclass-2">#</a> 方式二：元类 metaclass</h3><p>先定义 metaclass，然后创建类。</p><p>先定义类，然后创建实例。</p><p><s>metaclass 是 Python 面向对象里最难理解，也是最难使用的魔术代码。</s></p><p>按照默认习惯，metaclass 的类名总是以 Metaclass 结尾，以便清楚地表示这是一个 metaclass</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token comment"># metaclass 采用 type 创建类 ，metaclass 是类的模板，所以必须从 `type` 类型派生</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">ListMetaclass</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> name<span class="token punctuation">,</span>bases<span class="token punctuation">,</span>attrs<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        attrs<span class="token punctuation">[</span><span class="token string">'add'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">lambda</span> self<span class="token punctuation">,</span> value<span class="token punctuation">:</span>self<span class="token punctuation">.</span>append<span class="token punctuation">(</span>value<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">return</span> <span class="token builtin">type</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">,</span>name<span class="token punctuation">,</span>bases<span class="token punctuation">,</span>attrs<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">MyList</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">,</span>metaclass<span class="token operator">=</span>ListMetaclass<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">pass</span></pre></td></tr><tr><td data-num="9"></td><td><pre>mylist<span class="token operator">=</span>MyList<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>mylist<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211104155010-cbldtfp.png" alt="image.png"></p><p><code>__new__()</code>  方法接收到的参数依次是：</p><ol><li>当前准备创建的类的对象；</li><li>类的名字；</li><li>类继承的父类集合；</li><li>类的方法集合</li></ol><h3 id="应用场景-2"><a class="anchor" href="#应用场景-2">#</a> 应用场景</h3><p>ORM 全称 “Object Relational Mapping”，即对象 - 关系映射，就是把关系数据库的一行映射为一个对象，也就是一个类对应一个表，这样，写代码更简单，不用直接操作 SQL 语句。</p><p>要编写一个 ORM 框架，所有的类都只能动态定义，因为只有使用者才能根据表的结构定义出对应的类来。</p><h2 id="错误处理try-2"><a class="anchor" href="#错误处理try-2">#</a> 错误处理 try</h2><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">try</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'try...'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    r <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'result:'</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">except</span> ValueError <span class="token keyword">as</span> e<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ValueError:'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">except</span> ZeroDivisionError <span class="token keyword">as</span> e<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ZeroDivisionError:'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>e<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">finally</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'finally...'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'END'</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p>Python 的错误其实也是 class，所有的错误类型都继承自  <code>BaseException</code></p><p><code>UnicodeError</code>  是  <code>ValueError</code>  的子类🤡</p><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvMy9saWJyYXJ5L2V4Y2VwdGlvbnMuaHRtbCNleGNlcHRpb24taGllcmFyY2h5">Built-in Exceptions — Python 3.10.0 documentation</span></p><h2 id="调用栈-2"><a class="anchor" href="#调用栈-2">#</a> 调用栈</h2><p>让 Python 解释器来打印出错误堆栈</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211104162726-fird23x.png" alt="image.png"></p><h2 id="记录错误logging-2"><a class="anchor" href="#记录错误logging-2">#</a> 记录错误 logging</h2><p>可将 logging 生成一个 txt 方便查看</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">try</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>        xxx</pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        logging<span class="token punctuation">.</span>exception<span class="token punctuation">(</span>e<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><h3 id="抛出错误raise-2"><a class="anchor" href="#抛出错误raise-2">#</a> 抛出错误 raise</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">except</span> ValueError <span class="token keyword">as</span> e<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ValueError!'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">raise</span></pre></td></tr></tbody></table></figure><p>在  <code>bar()</code>  函数中，我们明明已经捕获了错误，但是，打印一个  <code>ValueError!</code>  后，又把错误通过  <code>raise</code>  语句抛出去了，这不有病么？</p><p>其实这种错误处理方式不但没病，而且相当常见。捕获错误目的只是记录一下，便于后续追踪。但是，由于当前函数不知道应该怎么处理该错误，所以，最恰当的方式是继续往上抛，让顶层调用者去处理。</p><h2 id="调试方法-2"><a class="anchor" href="#调试方法-2">#</a> 调试方法</h2><h3 id="1-print-2"><a class="anchor" href="#1-print-2">#</a> 1. print（）</h3><h3 id="2-断言assert-2"><a class="anchor" href="#2-断言assert-2">#</a> 2. 断言 assert</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">assert</span> n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'n is zero!'</span></pre></td></tr></tbody></table></figure><p><code>assert</code>  的意思是，表达式  <code>n != 0</code>  应该是  <code>True</code> ，否则，根据程序运行的逻辑，后面的代码肯定会出错。</p><p>采用断言的好处：</p><p>启动 Python 解释器时可以用  <code>-O</code>  参数来关闭  <code>assert</code> ：</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>$ python <span class="token operator">-</span>O err<span class="token punctuation">.</span>py</pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211104164034-js5sidi.png" alt="image.png"></p><p>关闭后，你可以把所有的  <code>assert</code>  语句当成  <code>pass</code>  来看</p><h3 id="3-logging-2"><a class="anchor" href="#3-logging-2">#</a> 3. logging</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> logging</pre></td></tr><tr><td data-num="2"></td><td><pre>s <span class="token operator">=</span> <span class="token string">'0'</span></pre></td></tr><tr><td data-num="3"></td><td><pre>n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'n = %d'</span> <span class="token operator">%</span> n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">/</span> n<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><h3 id="4pbd单步执行-2"><a class="anchor" href="#4pbd单步执行-2">#</a> 4.pbd 单步执行</h3><p>启动 Python 的调试器 pdb，让程序以单步方式运行，可以随时查看运行状态。</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>python <span class="token operator">-</span>m pdb xxx<span class="token punctuation">.</span>py</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">(</span>Pbd<span class="token punctuation">)</span> <span class="token number">1</span><span class="token comment">#查看第一行代码，单步执行第一行代码</span></pre></td></tr></tbody></table></figure><h3 id="5-pdbset_trace-2"><a class="anchor" href="#5-pdbset_trace-2">#</a> 5. pdb.set_trace()</h3><p>这个方法也是用 pdb，但是不需要单步执行，我们只需要  <code>import pdb</code> ，然后，在可能出错的地方放一个  <code>pdb.set_trace()</code> ，就可以设置一个断点：</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> pdb</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>s <span class="token operator">=</span> <span class="token string">'0'</span></pre></td></tr><tr><td data-num="4"></td><td><pre>n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>pdb<span class="token punctuation">.</span>set_trace<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 运行到这里会自动暂停</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">/</span> n<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p>可以用命令  <code>p</code>  查看变量，或者用命令  <code>c</code>  继续运行：</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211104164634-anjnpuu.png" alt="image.png"></p><h3 id="6ide工具-2"><a class="anchor" href="#6ide工具-2">#</a> 6.IDE 工具</h3><p>vscode,pycharm....</p><h2 id="单元测试-2"><a class="anchor" href="#单元测试-2">#</a> 单元测试</h2><p>单元测试是用来对一个模块、一个函数或者一个类来进行正确性检验的测试工作。</p><h2 id="文档测试-2"><a class="anchor" href="#文档测试-2">#</a> 文档测试</h2><p>doctest 非常有用，不但可以用来测试，还可以直接作为示例代码。通过某些文档生成工具，就可以自动把包含 doctest 的注释提取出来。用户看文档的时候，同时也看到了 doctest。</p><p>Python 内置的 “文档测试”（doctest）模块可以直接提取注释中的代码并执行测试.</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Dict</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token triple-quoted-string string">""""</span></pre></td></tr><tr><td data-num="3"></td><td><pre>      这一段就是文档测试</pre></td></tr><tr><td data-num="4"></td><td><pre>       Simple dict but also support access as x.y style.</pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>       &gt;&gt;&gt; d1 = Dict()</pre></td></tr><tr><td data-num="7"></td><td><pre>       &gt;&gt;&gt; d1['x'] = 100</pre></td></tr><tr><td data-num="8"></td><td><pre>       &gt;&gt;&gt; d1.x</pre></td></tr><tr><td data-num="9"></td><td><pre>       100</pre></td></tr><tr><td data-num="10"></td><td><pre>       &gt;&gt;&gt; d1.y = 200</pre></td></tr><tr><td data-num="11"></td><td><pre>       &gt;&gt;&gt; d1['y']</pre></td></tr><tr><td data-num="12"></td><td><pre>       200</pre></td></tr><tr><td data-num="13"></td><td><pre>       &gt;&gt;&gt; d2 = Dict(a=1, b=2, c='3')</pre></td></tr><tr><td data-num="14"></td><td><pre>       &gt;&gt;&gt; d2.c</pre></td></tr><tr><td data-num="15"></td><td><pre>       '3'</pre></td></tr><tr><td data-num="16"></td><td><pre>       &gt;&gt;&gt; d2['empty']</pre></td></tr><tr><td data-num="17"></td><td><pre>       Traceback (most recent call last):</pre></td></tr><tr><td data-num="18"></td><td><pre>           ...</pre></td></tr><tr><td data-num="19"></td><td><pre>       KeyError: 'empty'</pre></td></tr><tr><td data-num="20"></td><td><pre>       &gt;&gt;&gt; d2.empty</pre></td></tr><tr><td data-num="21"></td><td><pre>       Traceback (most recent call last):</pre></td></tr><tr><td data-num="22"></td><td><pre>           ...</pre></td></tr><tr><td data-num="23"></td><td><pre>       AttributeError: 'Dict' object has no attribute 'empty'</pre></td></tr><tr><td data-num="24"></td><td><pre>       """</pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token builtin">super</span><span class="token punctuation">(</span>Dict<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kw<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__getattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token keyword">try</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="31"></td><td><pre>            <span class="token keyword">return</span> self<span class="token punctuation">[</span>key<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token keyword">except</span> KeyError<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="33"></td><td><pre>            <span class="token keyword">raise</span> AttributeError<span class="token punctuation">(</span><span class="token string">r"'Dict' object has no attribute '%s'"</span> <span class="token operator">%</span> key<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__setattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        self<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value</pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token keyword">import</span> doctest</pre></td></tr><tr><td data-num="40"></td><td><pre>    doctest<span class="token punctuation">.</span>testmod<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p>将其中一个函数注释，运行让它报错</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211108110503-erlvnk1.png" alt="image.png"></p><h2 id="io编程-2"><a class="anchor" href="#io编程-2">#</a> IO 编程</h2><p>程序和运行时的数据在内存中驻留</p><p>涉及到数据交换的地方，通常是磁盘、网络等，就需要 IO 接口</p><p>通常，程序完成 IO 操作会有 Input 和 Output 两个数据流</p><p>Stream（流）是一个很重要的概念，可以把流想象成一个水管，数据就是水管里的水，但是只能单向流动。</p><p>在 IO 编程中，就存在<strong>速度严重不匹配的问题</strong>。举个例子来说，比如要把 100M 的数据写入磁盘，CPU 输出 100M 的数据只需要 0.01 秒，可是磁盘要接收这 100M 数据可能需要 10 秒，怎么办呢？有两种办法：</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211108111749-yobbduz.png" alt="image.png"></p><h2 id="同步io-2"><a class="anchor" href="#同步io-2">#</a> 同步 IO</h2><p>第一种是 CPU 等着，也就是程序暂停执行后续代码，等 100M 的数据在 10 秒后写入磁盘，再接着往下执行，这种模式称为同步 IO；</p><h2 id="异步io-2"><a class="anchor" href="#异步io-2">#</a> 异步 IO</h2><p>另一种方法是 CPU 不等待，只是告诉磁盘，“您老慢慢写，不着急，我接着干别的事去了”，于是，后续代码可以立刻接着执行，这种模式称为异步 IO。</p><p>如果是服务员跑过来找到你，这是回调模式，如果服务员发短信通知你，你就得不停地检查手机，这是轮询模式。总之，异步 IO 的复杂度远远高于同步 IO。</p><h2 id="文件读写-2"><a class="anchor" href="#文件读写-2">#</a> 文件读写</h2><h3 id="读文件open-2"><a class="anchor" href="#读文件open-2">#</a> 读文件 open（）</h3><p>传入文件名，标示符</p><p>参数：'rb' 二进制</p><p>encoding='gbk' 字符编码</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'/Users/michael/test.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><h3 id="read一次读取全部内容-2"><a class="anchor" href="#read一次读取全部内容-2">#</a> read () 一次读取全部内容</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token string">'Hello, world!'</span></pre></td></tr></tbody></table></figure><h3 id="fclose关闭文件-2"><a class="anchor" href="#fclose关闭文件-2">#</a> f.close（）关闭文件</h3><p>简化方法</p><h3 id="with-openfilepath-r-as-f-printfread-2"><a class="anchor" href="#with-openfilepath-r-as-f-printfread-2">#</a> with open('filepath', 'r') as f:    print(f.read())</h3><p>Python 引入了  <code>with</code>  语句来自动帮我们调用  <code>close()</code>  方法，并且不必调用  <code>f.close()</code>  方法</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'/path/to/file'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p>如果文件很小， <code>read()</code>  一次性读取最方便；</p><p>如果不能确定文件大小，反复调用  <code>read(size)</code>  比较保险；</p><p>如果是配置文件，调用  <code>readlines()</code>  最方便</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 把末尾的 '\n' 删掉</span></pre></td></tr></tbody></table></figure><p>file 和缓存时 = 是 file-like Object 对象，不要求从特定类继承，只要写个  <code>read()</code>  方法就行</p><h3 id="fwrite写文件-2"><a class="anchor" href="#fwrite写文件-2">#</a> f.write () 写文件</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'/Users/michael/test.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'Hello, world!'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p>或</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'/Users/michael/test.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'Hello, world!'</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p>使用  <code>with</code>  语句操作文件 IO 是个好习惯</p><h2 id="stringio和bytesio-2"><a class="anchor" href="#stringio和bytesio-2">#</a> StringIO 和 BytesIO</h2><h3 id="stringio-2"><a class="anchor" href="#stringio-2">#</a> StringIO</h3><p>StringIO 顾名思义就是在内存中读写 str</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> io <span class="token keyword">import</span> StringIO</pre></td></tr><tr><td data-num="2"></td><td><pre> f <span class="token operator">=</span> StringIO<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><code>getvalue()</code>  方法用于获得写入后的 str</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> io <span class="token keyword">import</span> StringIO</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f <span class="token operator">=</span> StringIO<span class="token punctuation">(</span><span class="token string">'Hello!\nHi!\nGoodbye!'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     s <span class="token operator">=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">if</span> s <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token keyword">break</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><h3 id="bytesio-2"><a class="anchor" href="#bytesio-2">#</a> BytesIO</h3><p>操作二进制数据，就需要使用 BytesIO</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> io <span class="token keyword">import</span> BytesIO</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f <span class="token operator">=</span> BytesIO<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'中文'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">6</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token string">b'\xe4\xb8\xad\xe6\x96\x87'</span></pre></td></tr></tbody></table></figure><h2 id="os模块-2"><a class="anchor" href="#os模块-2">#</a> os 模块</h2><h3 id="osname操作系统类型-2"><a class="anchor" href="#osname操作系统类型-2">#</a> os.name 操作系统类型</h3><h3 id="osuname详细系统信息-2"><a class="anchor" href="#osuname详细系统信息-2">#</a> os.uname () 详细系统信息</h3><h3 id="osenciron环境变量-2"><a class="anchor" href="#osenciron环境变量-2">#</a> os.enciron 环境变量</h3><p>要获取某个环境变量的值，可以调用  <code>os.environ.get('key')</code></p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token comment"># 查看当前目录的绝对路径:</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token string">'/Users/michael'</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment"># 在某个目录下创建一个新目录，首先把新目录的完整路径表示出来:</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'/Users/michael'</span><span class="token punctuation">,</span> <span class="token string">'testdir'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token string">'/Users/michael/testdir'</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment"># 然后创建一个目录:</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">'/Users/michael/testdir'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment"># 删掉一个目录:</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>rmdir<span class="token punctuation">(</span><span class="token string">'/Users/michael/testdir'</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p>通过  <code>os.path.join()</code>  函数，这样可以正确处理不同操作系统的路径分隔符</p><h3 id="ospathjoin连接路径-2"><a class="anchor" href="#ospathjoin连接路径-2">#</a>  <code>os.path.join(</code> ) 连接路径</h3><h3 id="ospathsplit拆分路径-2"><a class="anchor" href="#ospathsplit拆分路径-2">#</a>  <code>os.path.split()</code>  拆分路径</h3><h3 id="ospathsplitext-文件扩展名-2"><a class="anchor" href="#ospathsplitext-文件扩展名-2">#</a>  <code>os.path.splitext()</code>  文件扩展名</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token comment"># 对文件重命名:</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span> <span class="token string">'test.py'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment"># 删掉文件:</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'test.py'</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><code>shutil</code>  模块提供了  <code>copyfile()</code>  的函数，它们可以看做是  <code>os</code>  模块的补充</p><p>最后看看如何利用 Python 的特性来过滤文件。比如我们要列出当前目录下的所有目录，只需要一行代码：</p><pre><code>&gt;&gt;&gt; [x for x in os.listdir('.') if os.path.isdir(x)]['.lein', '.local', '.m2', '.npm', '.ssh', '.Trash', '.vim', 'Applications', 'Desktop', ...]</code></pre><p>要列出所有的  <code>.py</code>  文件，也只需一行代码：</p><pre><code>&gt;&gt;&gt; [x for x in os.listdir('.') if os.path.isfile(x) and os.path.splitext(x)[1]=='.py']['apis.py', 'config.py', 'models.py', 'pymonitor.py', 'test_db.py', 'urls.py', 'wsgiapp.py']</code></pre><h2 id="序列化pickle模块-2"><a class="anchor" href="#序列化pickle模块-2">#</a> 序列化 pickle 模块</h2><p>变量从内存中变成可存储或传输的过程称之为序列化，Python 中叫 pickling</p><p>变量内容从序列化的对象重新读到内存里称之为反序列化，即 unpickling</p><h3 id="pickledumps对象-字节序列化-2"><a class="anchor" href="#pickledumps对象-字节序列化-2">#</a> pickle.dumps () 对象 -》字节 [序列化]</h3><p><code>pickle.dumps()</code>  方法把任意对象序列化成一个  <code>bytes</code></p><p><code>pickle.dumps()</code>  方法把任意对象序列化成一个  <code>bytes</code> , 并写入文件中</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> pickle</pre></td></tr><tr><td data-num="2"></td><td><pre>d<span class="token operator">=</span><span class="token builtin">dict</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'ruan'</span><span class="token punctuation">,</span>age<span class="token operator">=</span><span class="token number">34</span><span class="token punctuation">,</span>freand<span class="token operator">=</span><span class="token string">'woman'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment"># print(pickle.dumps(d))</span></pre></td></tr><tr><td data-num="4"></td><td><pre>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'timezone.txt'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>d<span class="token punctuation">,</span> f<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><h3 id="pickleload字节-对象反序列化-2"><a class="anchor" href="#pickleload字节-对象反序列化-2">#</a> pickle.load () 字节 -》对象【反序列化】</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> pickle</pre></td></tr><tr><td data-num="2"></td><td><pre>f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">r'C:\Users\yangs\PycharmProjects\python_study\fun\timezone.txt'</span><span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>d<span class="token operator">=</span>pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211108132946-rtt8k8p.png" alt="image.png"></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211108133035-b8gyft4.png" alt="image.png"></p><h2 id="json模块-2"><a class="anchor" href="#json模块-2">#</a> json 模块</h2><p><code>json</code>  模块的  <code>dumps()</code>  和  <code>loads()</code>  函数是定义得非常好的接口的典范。</p><h4 id="jsondumpspython对象python对象-json对象-2"><a class="anchor" href="#jsondumpspython对象python对象-json对象-2">#</a> json.dumps (python 对象) python 对象 -》json 对象</h4><p><code>dumps()</code>  方法返回一个  <code>str</code> ，内容就是标准的 JSON</p><h4 id="jsonloadsjson对象json对象-python对象-2"><a class="anchor" href="#jsonloadsjson对象json对象-python对象-2">#</a> json.loads (json 对象) json 对象 -》python 对象</h4><p><code>json.``dump</code> (obj,&nbsp;fp,&nbsp;<em>,&nbsp;skipkeys=False,&nbsp;ensure_ascii=True,&nbsp;check_circular=True,&nbsp;allow_nan=True,&nbsp;cls=None,&nbsp;indent=None,&nbsp;separators=None,&nbsp;default=None,&nbsp;sort_keys=False,&nbsp;<strong>kw</strong>)</em>*</p><h3 id="类变为字典并序列化-2"><a class="anchor" href="#类变为字典并序列化-2">#</a> 类变为字典并序列化</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>s<span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token keyword">lambda</span> obj<span class="token punctuation">:</span> obj<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><h2 id="进程和线程-2"><a class="anchor" href="#进程和线程-2">#</a> 进程和线程</h2><p>Python 的标准库提供了两个模块： <code>_thread</code>  和  <code>threading</code> ， <code>_thread</code>  是低级模块， <code>threading</code>  是高级模块</p><p><strong>线程是最小的执行单元，而进程由至少一个线程组成</strong></p><p>操作系统轮流让各个任务交替执行</p><p>真正的并行执行多任务只能在多核 CPU 上实现</p><p>对于操作系统来说，一个任务就是一个进程（Process），比如打开一个浏览器就是启动一个浏览器进程</p><p>Word，它可以同时进行打字、拼写检查、打印等事情。在一个进程内部，要同时干多件事，就需要同时运行多个 “子任务”，我们把进程内的这些 “子任务” 称为线程（Thread）</p><ul><li>多进程模式；</li><li>多线程模式；</li><li>多进程 + 多线程模式。</li></ul><h2 id="多进程-2"><a class="anchor" href="#多进程-2">#</a> 多进程</h2><p>Unix/Linux 操作系统提供了一个  <code>fork()</code>  系统调用，普通的函数调用，调用一次，返回一次，但是  <code>fork()</code>  调用一次，返回两次，因为操作系统自动把当前进程（称为父进程）复制了一份（称为子进程），然后，分别在父进程和子进程内返回。</p><p>创建子进程</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> os</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">def</span> <span class="token function">run_pro</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'开始运行子进程%s，%s'</span><span class="token operator">%</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'开始运行进程%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    p<span class="token operator">=</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>run_pro<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211111131512-zqm80if.png" alt="image.png"></p><h3 id="启动大量子进程pool-2"><a class="anchor" href="#启动大量子进程pool-2">#</a> 启动大量子进程 pool</h3><p>进程池</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> time<span class="token punctuation">,</span> threading</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment"># 新线程执行的代码:</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">def</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'thread %s is running...'</span> <span class="token operator">%</span> threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    n <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">while</span> n <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        n <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'thread %s &gt;&gt;&gt; %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'thread %s ended.'</span> <span class="token operator">%</span> threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'thread %s is running...'</span> <span class="token operator">%</span> threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>loop<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'LoopThread'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>t<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'thread %s ended.'</span> <span class="token operator">%</span> threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><h1 id="模块总结-2"><a class="anchor" href="#模块总结-2">#</a> 模块总结</h1><h2 id="doctest文档测试-2"><a class="anchor" href="#doctest文档测试-2">#</a> doctest 文档测试</h2><h2 id="ospath文件路径-2"><a class="anchor" href="#ospath文件路径-2">#</a> os.path 文件路径</h2><h2 id="pickle序列化-2"><a class="anchor" href="#pickle序列化-2">#</a> pickle 序列化</h2><h2 id="json-2"><a class="anchor" href="#json-2">#</a> json</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGlhb3h1ZWZlbmcuY29tL3dpa2kvMTAxNjk1OTY2MzYwMjQwMC8xMDE3MTA0MzI0MDI4NDQ4">使用 dict 和 set - 廖雪峰的官方网站 (liaoxuefeng.com)</span></p><p>用于学习记录，后期便于复习，参考链接</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009102447-hmq8gs8.png" alt="image.png"></p><p>python file</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009102545-qqmxrgo.png" alt="image.png"></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009102644-7ny4t2k.png" alt="image.png"></p><p>调用脚本时会先载入 pyhton 解释器，然后运行脚本</p><p>rpm：软件管理包</p><p>操作符优先级：<img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009104337-b66ot2k.png" alt="image.png"></p><p>条件判断：</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009104751-a27qfzb.png" alt="image.png"></p><p>Python 为我们提供了非常完善的基础代码库，覆盖了网络、文件、GUI、数据库、文本等大量内容，被形象地称作 “内置电池（batteries included）”。用 Python 开发，许多功能不必从零编写，直接使用现成的即可。</p><p>语言定位：</p><p>Python 的定位是 “优雅”、“明确”、“简单”</p><p>Python 是解释型语言</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211011172523-7k51l6e.png" alt="image.png"></p><h1 id="python-3"><a class="anchor" href="#python-3">#</a> python</h1><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009110719-7urayjl.png" alt="image.png"></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009111236-gd1mcju.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009111303-l3bqira.png" alt="image.png"></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009113303-w7qziw5.png" alt="image.png"></p><h2 id="数据类型-3"><a class="anchor" href="#数据类型-3">#</a> 数据类型</h2><h3 id="int-整型-3"><a class="anchor" href="#int-整型-3">#</a> int 整型</h3><p>long int 长整型</p><p>int 整型</p><h3 id="float-浮点型-3"><a class="anchor" href="#float-浮点型-3">#</a> float 浮点型</h3><p>浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时</p><p>双精度浮点型 e</p><p>浮点型</p><h3 id="string-字符串-3"><a class="anchor" href="#string-字符串-3">#</a> String 字符串</h3><p>字符串是以单引号  <code>'</code>  或双引号  <code>"</code>  括起来的任意文本</p><p>字符串是以 Unicode 编码</p><p>对于单个字符的编码，Python 提供了  <code>ord()</code>  函数获取字符的整数表示， <code>chr()</code>  函数把编码转换为对应的字符：</p><h3 id="bool布尔-3"><a class="anchor" href="#bool布尔-3">#</a> Bool 布尔</h3><p>True</p><p>Flase</p><h3 id="none-空值-3"><a class="anchor" href="#none-空值-3">#</a> None 空值</h3><p>None， <code>None</code>  不能理解为  <code>0</code> ，因为  <code>0</code>  是有意义的，</p><p>Null 无意义</p><p>.</p><p>&lt;iframe src="<span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo2ODA2L3dpZGdldHMvYnJ5dGhvbi1lZGl0b3I=">http://127.0.0.1:6806/widgets/brython-editor</span>" data-src="<span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo2ODA2L3dpZGdldHMvYnJ5dGhvbi1lZGl0b3I=">http://127.0.0.1:6806/widgets/brython-editor</span>" data-subtype="widget" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="width: 1341px; height: 276px;"&gt;&lt;/iframe&gt;</p><h3 id="变量-3"><a class="anchor" href="#变量-3">#</a> 变量</h3><p>变量的概念基本上和初中代数的方程变量是一致的，</p><p>变量不仅可以是数字，还可以是任意数据类型。</p><p>变量名必须是大小写英文、数字和  <code>_</code> 的组合，且不能用数字开头，字母或下划线开头</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token comment">#变量类型</span></pre></td></tr><tr><td data-num="2"></td><td><pre>a<span class="token operator">=</span><span class="token number">1</span></pre></td></tr><tr><td data-num="3"></td><td><pre>b<span class="token operator">=</span><span class="token string">'我是变量'</span></pre></td></tr><tr><td data-num="4"></td><td><pre>c<span class="token operator">=</span><span class="token boolean">True</span></pre></td></tr><tr><td data-num="5"></td><td><pre>d<span class="token operator">=</span><span class="token number">12.2e3</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009134601-1cuacaj.png" alt="image.png"></p><p>int a=1 静态语言 此时已经分配的 int 分区之后不能更改变量类型【不支持，Java】</p><p>a=3 动态语言，可以赋值成任意类型</p><h4 id="动态定义-3"><a class="anchor" href="#动态定义-3">#</a> 动态定义</h4><h4 id="静态定义-3"><a class="anchor" href="#静态定义-3">#</a> 静态定义</h4><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>a <span class="token operator">=</span> <span class="token string">'ABC'</span></pre></td></tr><tr><td data-num="2"></td><td><pre>b <span class="token operator">=</span> a</pre></td></tr><tr><td data-num="3"></td><td><pre>a <span class="token operator">=</span> <span class="token string">'XYZ'</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p>执行  <code>a = 'ABC'</code> ，解释器创建了字符串  <code>'ABC'</code>  和变量  <code>a</code> ，并把  <code>a</code>  指向  <code>'ABC'</code> ：</p><p><img data-src="https://www.liaoxuefeng.com/files/attachments/923791878255456/0" alt="py-var-code-1"></p><p>执行  <code>b = a</code> ，解释器创建了变量  <code>b</code> ，并把  <code>b</code>  指向  <code>a</code>  指向的字符串  <code>'ABC'</code> ：</p><p><img data-src="https://www.liaoxuefeng.com/files/attachments/923792058613440/0" alt="py-var-code-2"></p><p>执行  <code>a = 'XYZ'</code> ，解释器创建了字符串 'XYZ'，并把  <code>a</code>  的指向改为  <code>'XYZ'</code> ，但  <code>b</code>  并没有更改：</p><p><img data-src="https://www.liaoxuefeng.com/files/attachments/923792191637760/0" alt="py-var-code-3"></p><h3 id="常量-3"><a class="anchor" href="#常量-3">#</a> 常量</h3><p>所谓常量就是不能变的变量，通常用全部大写的变量名表示常量：</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>PI <span class="token operator">=</span> <span class="token number">3.14159265359</span></pre></td></tr></tbody></table></figure><h2 id="list列表-3"><a class="anchor" href="#list列表-3">#</a> list 列表</h2><p>list 是一种有序的集合，可以随时添加和删除其中的元素。</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token builtin">list</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009154856-r9s5yyu.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009154907-bofhvvd.png" alt="image.png"></p><h3 id="切分-3"><a class="anchor" href="#切分-3">#</a> 切分</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009155126-p31z8um.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009155139-cpsoatf.png" alt="image.png"></p><h3 id="append追加-3"><a class="anchor" href="#append追加-3">#</a> append（）追加</h3><p>str.append('a')</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009155556-qrj4a63.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009155606-dxihfwr.png" alt="image.png"></p><h3 id="insert插入指定位置-3"><a class="anchor" href="#insert插入指定位置-3">#</a> insert 插入指定位置</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009162557-186v350.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009162609-u00z8m3.png" alt="image.png"></p><h3 id="pop删除末尾元素-3"><a class="anchor" href="#pop删除末尾元素-3">#</a> pop（）删除末尾元素</h3><p>要删除指定位置的元素，用  <code>pop(i)</code>  方法，其中  <code>i</code>  是索引位置</p><p>替换元素直接赋值即可</p><p>列表可以嵌套</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'python'</span><span class="token punctuation">,</span> <span class="token string">'java'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'asp'</span><span class="token punctuation">,</span> <span class="token string">'php'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'scheme'</span><span class="token punctuation">]</span></pre></td></tr></tbody></table></figure><p>类型可以不同</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>L <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Apple'</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">]</span></pre></td></tr></tbody></table></figure><h3 id="切片-3"><a class="anchor" href="#切片-3">#</a> 切片</h3><p>list [:-1] 不包含最后一个元素</p><p>list [:] 全部列表</p><p>list [::] 全部列表</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012161203-1e12zsd.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012161212-0lrqjsm.png" alt="image.png"></p><p>前 10 个数，每两个取一个</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012161428-r6muafj.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012161441-eoc8y55.png" alt="image.png"></p><h4 id="列表生成-3"><a class="anchor" href="#列表生成-3">#</a> 列表生成</h4><p>list（range（1，11））生成 10 个数 1-10</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>m<span class="token operator">+</span>n <span class="token keyword">for</span> m <span class="token keyword">in</span> <span class="token string">'123'</span> <span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token string">'yza'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>k<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">467</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> k <span class="token keyword">if</span> x<span class="token operator">==</span><span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012190810-l1qtxiv.png" alt="image.png"></p><h2 id="tuple元组-3"><a class="anchor" href="#tuple元组-3">#</a> tuple 元组</h2><p>tuple 一旦初始化就不能修改</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009163638-1vpldee.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009163652-xkas3o0.png" alt="image.png"></p><p>但元组初始化后就不能进行更改了</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>b<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">#定义的不是 tuple，是 1 这个数！</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment"># 这是因为括号 () 既可以表示 tuple，又可以表示数学公式中的小括号，</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment"># 这就产生了歧义，因此，Python 规定，</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment"># 这种情况下，按小括号进行计算，计算结果自然是 1</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>c<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009164221-xl1husx.png" alt="image.png"></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009164244-780v78f.png" alt="image.png"></p><h2 id="dict字典-3"><a class="anchor" href="#dict字典-3">#</a> dict 字典</h2><p>其他语言叫 map，使用键 - 值（key-value）存储，具有极快的查找速度。dict 的 key 必须是<strong>不可变对象</strong>。key 计算位置的算法称为哈希算法（Hash）。</p><h3 id="定义-5"><a class="anchor" href="#定义-5">#</a> 定义</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>d<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'ruanyifen'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token string">'happy'</span><span class="token punctuation">:</span><span class="token string">'write'</span><span class="token punctuation">}</span></pre></td></tr><tr><td data-num="2"></td><td><pre>d<span class="token punctuation">[</span><span class="token string">'add'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'Im add'</span></pre></td></tr><tr><td data-num="3"></td><td><pre>d<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'fix'</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012135019-kqmsrcg.png" alt="image.png"></p><h3 id="取value-3"><a class="anchor" href="#取value-3">#</a> 取 value</h3><h4 id="dictkey-3"><a class="anchor" href="#dictkey-3">#</a> dict['key']</h4><h4 id="key-in-dict-3"><a class="anchor" href="#key-in-dict-3">#</a> 'key' in dict</h4><h4 id="dictgetkey-3"><a class="anchor" href="#dictgetkey-3">#</a> dict.get('key')</h4><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'name'</span> <span class="token keyword">in</span> d<span class="token punctuation">)</span><span class="token comment">#方法一判断是否有这个主键在字典 d 中</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#方法二 取</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012135119-sniqpw0.png" alt="image.png"></p><h3 id="dictpopkey删除一个key-3"><a class="anchor" href="#dictpopkey删除一个key-3">#</a> dict.pop ('key') 删除一个 key</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012135429-m36ygpu.png" alt="image.png"></p><h3 id="dictkeys返回字典中所有key列表-3"><a class="anchor" href="#dictkeys返回字典中所有key列表-3">#</a> dict.keys 返回字典中所有 key 列表</h3><h3 id="dictupdate将a字典新keyvalue内容加入b字典中-3"><a class="anchor" href="#dictupdate将a字典新keyvalue内容加入b字典中-3">#</a> dict.update () 将 a 字典新 key，value 内容加入 b 字典中</h3><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token assign-left variable">dicta</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token builtin class-name">:</span><span class="token string">'ruan'</span>,<span class="token string">'age'</span>:20<span class="token punctuation">}</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token assign-left variable">dictb</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token builtin class-name">:</span><span class="token string">'ruan2'</span>,<span class="token string">'age'</span>:40,<span class="token string">'add'</span><span class="token builtin class-name">:</span><span class="token string">'w shi add'</span><span class="token punctuation">}</span></pre></td></tr><tr><td data-num="3"></td><td><pre>dictb.update<span class="token punctuation">(</span>dicta<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>print<span class="token punctuation">(</span>dictb<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211101115242-qazr588.png" alt="image.png"></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211101115348-bb0l147.png" alt="image.png"></p><h4 id="内建函数使用-3"><a class="anchor" href="#内建函数使用-3">#</a> 内建函数使用</h4><p>type（）</p><p>cmp（）</p><p>len（）</p><p>hash（）</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211101114202-rdvz2pt.png" alt="image.png"></p><p>内建 cmp（）函数比较两个 dict 时，先比较长度，后比值，输出 1 或 - 1</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211101114401-h4f1qop.png" alt="image.png"></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211101114644-qffksiw.png" alt="image.png"></p><h3 id="dict特点-3"><a class="anchor" href="#dict特点-3">#</a> dict 特点</h3><p>dict 有以下几个特点：</p><ol><li>查找和插入的速度极快，不会随着 key 的增加而变慢；</li><li>需要占用大量的内存，内存浪费多。</li></ol><p>而 list 相反：</p><ol><li>查找和插入的时间随着元素的增加而增加；</li><li>占用空间小，浪费内存很少。<br><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211101115427-fu3s2zu.png" alt="image.png"><br><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211101115451-utxi9ct.png" alt="image.png"></li></ol><h2 id="set集合-3"><a class="anchor" href="#set集合-3">#</a> set 集合</h2><p>也是一组 key 的集合，但不存储 value。由于 key 不能重复，所以，在 set 中，没有重复的 key。</p><p>重复元素在 set 中自动被过滤</p><h3 id="定义-6"><a class="anchor" href="#定义-6">#</a> 定义</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012135934-u0n1j77.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012135953-sqa88s1.png" alt="image.png"></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012140114-5azj1sa.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012140127-ledkv1s.png" alt="image.png"></p><h3 id="setaddkey添加元素-3"><a class="anchor" href="#setaddkey添加元素-3">#</a> set.add ('key') 添加元素</h3><p>但重复元素不添加，自动去重</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012140336-dwf2vgw.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012140344-dzsshz2.png" alt="image.png"></p><h3 id="setremovekey删除元素-3"><a class="anchor" href="#setremovekey删除元素-3">#</a> set.remove ('key') 删除元素</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012140511-5f9cwm4.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012140517-f6iolow.png" alt="image.png"></p><p>set 可以看成数学意义上的无序和无重复元素的集合，</p><p>因此，两个 set 可以做数学意义上的交集、并集等操作：</p><h3 id="两个set交集-3"><a class="anchor" href="#两个set交集-3">#</a> &amp; 两个 set 交集</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012140903-1l3we66.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012140912-8itf6ek.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211022170721-h5hmgxr.png" alt="image.png"></p><h3 id="两个set并集-3"><a class="anchor" href="#两个set并集-3">#</a> | 两个 set 并集</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012140922-5bjlj5g.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012140933-edbys90.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211022171729-b4k8xhd.png" alt="image.png"></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211101115701-3dt5x4j.png" alt="image.png"></p><h3 id="map的显示-3"><a class="anchor" href="#map的显示-3">#</a> map () 的显示</h3><p>打印 map 对象可以看到 map 对象返回的是一个地址，不是真实的数据</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span>对象<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>it <span class="token keyword">for</span> it <span class="token keyword">in</span> <span class="token builtin">map</span>对象<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><h2 id="数据类型转换-3"><a class="anchor" href="#数据类型转换-3">#</a> 数据类型转换</h2><h3 id="int-3"><a class="anchor" href="#int-3">#</a> int（）</h3><h3 id="float-3"><a class="anchor" href="#float-3">#</a> float（）</h3><h3 id="str-3"><a class="anchor" href="#str-3">#</a> str（）</h3><h3 id="bool-3"><a class="anchor" href="#bool-3">#</a> bool（）</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012142636-iblnu9y.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012142645-gb2u1fg.png" alt="image.png"></p><h2 id="条件判断-3"><a class="anchor" href="#条件判断-3">#</a> 条件判断</h2><h3 id="if-3"><a class="anchor" href="#if-3">#</a> if</h3><p>if else</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>a<span class="token operator">=</span><span class="token number">100</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">if</span> a<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">else</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">-</span>a<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009165335-jr8xtfq.png" alt="image.png"></p><p>if</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">if</span> <span class="token boolean">True</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'True'</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009165309-ymhiihv.png" alt="image.png"></p><p>if elif elif else</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>name<span class="token operator">=</span><span class="token string">'zhangsan'</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">if</span> name<span class="token operator">==</span><span class="token string">'zhangsan'</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我是'</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">elif</span> name<span class="token operator">==</span><span class="token string">'lisi'</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我是'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">elif</span> name<span class="token operator">==</span><span class="token string">'wangwu'</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我是'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">else</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我谁的不是'</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009165511-spws02g.png" alt="image.png"></p><h2 id="input输入输出-3"><a class="anchor" href="#input输入输出-3">#</a> input（）输入输出</h2><p>input () 返回的数据类型是 str</p><p>print（）</p><h2 id="循环-迭代-3"><a class="anchor" href="#循环-迭代-3">#</a> 循环 迭代</h2><p>list，tuple，dict 都可循环</p><p>Python 的  <code>for</code>  循环本质上就是通过不断调用  <code>next()</code>  函数实现的，计算是惰性的</p><p>dict 循环按照 value 时：for value in dict.values</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">for</span> value <span class="token keyword">in</span> d<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><h3 id="for-in-3"><a class="anchor" href="#for-in-3">#</a> for in</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token builtin">sum</span><span class="token operator">=</span><span class="token number">0</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token builtin">sum</span><span class="token operator">=</span><span class="token builtin">sum</span><span class="token operator">+</span>i</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009172805-wrb6kr2.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009172805-wrb6kr2.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009172821-rdyglwd.png" alt="image.png"></p><h3 id="while-3"><a class="anchor" href="#while-3">#</a> while</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>sum2<span class="token operator">=</span><span class="token number">0</span></pre></td></tr><tr><td data-num="2"></td><td><pre>k<span class="token operator">=</span><span class="token number">0</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    sum2<span class="token operator">=</span>sum2<span class="token operator">+</span>k</pre></td></tr><tr><td data-num="5"></td><td><pre>    k<span class="token operator">=</span>k<span class="token operator">+</span><span class="token number">1</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>sum2<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009172821-rdyglwd.png" alt="image.png"></p><h3 id="break-3"><a class="anchor" href="#break-3">#</a> break</h3><p>如果要提前结束循环，可以用  <code>break</code>  语句</p><h3 id="continue-3"><a class="anchor" href="#continue-3">#</a> continue</h3><p>通过  <code>continue</code>  语句，跳过当前的这次循环，直接开始下一次循环</p><h2 id="生成器-3"><a class="anchor" href="#生成器-3">#</a> 生成器</h2><p>在 Python 中，这种一边循环一边计算的机制，称为生成器：generator。</p><p>包括生成器和带  <code>yield</code>  的 generator function。</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>g <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">*</span> x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012191035-5wbqtm5.png" alt="image.png"></p><p>访问大文件</p><p>yield</p><h2 id="isinstance迭代器-3"><a class="anchor" href="#isinstance迭代器-3">#</a> isinstance（）迭代器</h2><p>直接作用于  <code>for</code>  循环的对象统称为可迭代对象，都是迭代器 Iterable</p><p><code>list</code> 、 <code>tuple</code> 、 <code>dict</code> 、 <code>set</code> 、 <code>str</code></p><p><code>list</code> 、 <code>dict</code> 、 <code>str</code>  虽然是  <code>Iterable</code> ，却不是  <code>Iterator</code> 。</p><p><code>list</code> 、 <code>dict</code> 、 <code>str</code>  等  <code>Iterable</code>  变成  <code>Iterator</code>  可以使用 **iter ()** 函数</p><p>以直接作用于  <code>for</code>  循环的数据类型有以下几种：</p><p>一类是集合数据类型，如  <code>list</code> 、 <code>tuple</code> 、 <code>dict</code> 、 <code>set</code> 、 <code>str</code>  等；</p><p>一类是  <code>generator</code> ，包括生成器和带  <code>yield</code>  的 generator function。</p><p>可以使用 **isinstance ()** 判断一个对象是否是  <code>Iterable</code>  对象__iter__：</p><p>迭代对象</p><p>判断是不是可以迭代，用 Iterable</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> collections <span class="token keyword">import</span> Iterable</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">True</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">True</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">False</span></pre></td></tr></tbody></table></figure><p>判断是不是迭代器，用 Iterator</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> collections <span class="token keyword">import</span> Iterator</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Iterator<span class="token punctuation">)</span>  <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">False</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Iterator<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">False</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token builtin">isinstance</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Iterator<span class="token punctuation">)</span>  <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">True</span></pre></td></tr></tbody></table></figure><p>Python 中 list，truple，str，dict 这些都可以被迭代，但他们并不是迭代器，为什么：：因为和迭代器相比有一个很大的不同，list/truple/map/dict 这些数据的大小是确定的，也就是说有多少事可知的。但迭代器不是，迭代器不知道要执行多少次，所以可以理解为不知道有多少个元素，每调用一次 next ()，就会往下走一步，是惰性的。</p><h2 id="函数-3"><a class="anchor" href="#函数-3">#</a> 函数</h2><p>抽象</p><p>将函数抽象成一个函数名称，不看内部结构直接调用方法</p><p>返回类型 函数名（输入参数）：</p><p>函数体</p><h3 id="调用函数-3"><a class="anchor" href="#调用函数-3">#</a> 调用函数</h3><p>要调用一个函数，需要知道函数的名称和参数</p><p>绝对值 abs</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012142010-d503sa9.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012142024-cscdoiu.png" alt="image.png"></p><h3 id="定义函数-3"><a class="anchor" href="#定义函数-3">#</a> 定义函数</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">def</span> <span class="token function">myabs</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">if</span> x<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">return</span> x</pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">if</span> x<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">return</span> <span class="token operator">-</span>x</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>myabs<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012144653-0ds9bc4.png" alt="image.png"></p><h3 id="空函数-3"><a class="anchor" href="#空函数-3">#</a> 空函数</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">def</span> <span class="token function">nufun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">pass</span></pre></td></tr></tbody></table></figure><p><code>pass</code>  可以用来作为占位符</p><h3 id="函数-参数检查-3"><a class="anchor" href="#函数-参数检查-3">#</a> 函数 参数检查</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">def</span> <span class="token function">my_init_abs</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token builtin">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">'no no no'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">else</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">if</span> x<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">if</span> x<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>my_init_abs<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">90</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012144640-6xnfm9s.png" alt="image.png"></p><h3 id="可返回多个值函数-3"><a class="anchor" href="#可返回多个值函数-3">#</a> 可返回多个值，函数</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">def</span> <span class="token function">return_much</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    a<span class="token operator">=</span><span class="token string">'返回'</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    b<span class="token operator">=</span><span class="token string">'我也返回'</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    c<span class="token operator">=</span><span class="token string">'我也要返回'</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">return</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>return_much<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>return_much<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012144955-kyvotx4.png" alt="image.png"></p><h3 id="函数参数-3"><a class="anchor" href="#函数参数-3">#</a> 函数参数</h3><p>*<strong>args 是可变参数，args 接收的是一个 tuple；</strong></p><p>**<strong>kw 是关键字参数，kw 接收的是一个 dict</strong>。</p><p><code>power(x)</code>  函数，参数  <code>x</code>  就是一个位置参数，可单个变量，list，set，tuple</p><p><code>power(*x)</code>  函数，可传入单个变量，list，set，tuple，可以传入任意个参数或 0 个参数</p><p><code>power(**kw)</code>  函数，字典 dict</p><p>可变参数允许你传入 0 个或任意个参数，这些可变参数在函数调用时自动组装为一个 tuple。</p><p>而关键字参数允许你传入 0 个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个<strong> dict</strong>.</p><p><code>power(x, n)</code> ，用来计算 x<sup>n</sup></p><p><code>power(x, n)</code>  函数有两个参数： <code>x</code>  和  <code>n</code></p><p>默认参数，此时 age 和 city 为默认参数，可传值改变也可不变【不用传值】</p><p><code>power(L=None)</code>  函数有 None 这个不变对象，可用 list</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">def</span> <span class="token function">enroll</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> city<span class="token operator">=</span><span class="token string">'Beijing'</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'name:'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'gender:'</span><span class="token punctuation">,</span> gender<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'age:'</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'city:'</span><span class="token punctuation">,</span> city<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012151610-9n1rxhq.png" alt="image.png"></p><h4 id="必选参数-3"><a class="anchor" href="#必选参数-3">#</a> 必选参数</h4><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">def</span> <span class="token function">a1</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">return</span> x</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">(</span><span class="token number">12.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">(</span><span class="token string">'ruan'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"key"</span><span class="token punctuation">:</span><span class="token string">"vleaue"</span><span class="token punctuation">,</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'ruan'</span><span class="token punctuation">,</span><span class="token string">'mun'</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012153014-r27ykfm.png" alt="image.png"></p><h4 id="默认参数-3"><a class="anchor" href="#默认参数-3">#</a> = 默认参数</h4><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">def</span> <span class="token function">a2</span><span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">return</span> x</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a2<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a2<span class="token punctuation">(</span><span class="token number">12.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a2<span class="token punctuation">(</span><span class="token string">'ruan'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a2<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a2<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a2<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a2<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"key"</span><span class="token punctuation">:</span><span class="token string">"vleaue"</span><span class="token punctuation">,</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'ruan'</span><span class="token punctuation">,</span><span class="token string">'mun'</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012153014-r27ykfm.png" alt="image.png"></p><h4 id="可变参数-3"><a class="anchor" href="#可变参数-3">#</a> * 可变参数</h4><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">def</span> <span class="token function">a3</span><span class="token punctuation">(</span><span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">return</span> x</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span><span class="token number">12.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span><span class="token string">'ruan'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"key"</span><span class="token punctuation">:</span><span class="token string">"vleaue"</span><span class="token punctuation">,</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'ruan'</span><span class="token punctuation">,</span><span class="token string">'mun'</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012154346-2eahz0b.png" alt="image.png"></p><h4 id="关键字参数-3"><a class="anchor" href="#关键字参数-3">#</a> ** 关键字参数</h4><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">def</span> <span class="token function">a3</span><span class="token punctuation">(</span><span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">return</span> kw</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span>kw<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span>kw<span class="token operator">=</span><span class="token number">12.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span>kw<span class="token operator">=</span><span class="token string">'ruan'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span>kw<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span>kw<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span>kw<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span>kw<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span>kw<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">(</span>kw<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"key"</span><span class="token punctuation">:</span><span class="token string">"vleaue"</span><span class="token punctuation">,</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'ruan'</span><span class="token punctuation">,</span><span class="token string">'mun'</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012154409-tp9u2z5.png" alt="image.png"></p><h3 id="递归函数-3"><a class="anchor" href="#递归函数-3">#</a> 递归函数</h3><p>在函数内部，可以调用其他函数。</p><p>一个函数在<strong>内部调用自身本身</strong>，这个函数就是<strong>递归函数</strong>。</p><p>使用递归函数需要<strong>注意防止栈溢出</strong></p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token comment">#递归函数</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">def</span> <span class="token function">funmyself</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">if</span> x<span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">return</span> x<span class="token operator">+</span>funmyself<span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">elif</span> x<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">return</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>funmyself<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012155139-884p9as.png" alt="image.png"></p><p>解决栈溢出方法：</p><p><strong>尾递归</strong>优化，事实上尾递归和循环的效果是一样的</p><p>尾递归是指，在函数返回的时候，<strong>调用自身</strong>本身，并且，<strong>return 语句不能包含表达式</strong></p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token comment">#尾递归</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">def</span> <span class="token function">funmyself2</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">return</span>  funmyself2_it<span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">def</span>  <span class="token function">funmyself2_it</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>pro<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">if</span> n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">return</span> pro</pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">else</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">return</span> funmyself2<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>n</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>funmyself2<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211012160333-tngb33o.png" alt="image.png"></p><p>此时 funmyself2 是尾递归函数</p><h2 id="转义字符-3"><a class="anchor" href="#转义字符-3">#</a> 转义字符  <code>\</code></h2><p>转义字符  <code>\</code>  可以转义很多字符，比如</p><p><code>\n</code>  表示换行，</p><p><code>\t</code>  表示制表符，</p><p>字符  <code>\</code>  本身也要转义，所以  <code>\\</code>  表示的字符就是  <code>\</code></p><p>Python 还允许用  <code>r''</code>  表示  <code>''</code>  内部的字符串默认不转义</p><h2 id="运算符and-or和not-3"><a class="anchor" href="#运算符and-or和not-3">#</a> 运算符 and、or 和 not</h2><p>运算优先级：not&gt;or&gt;and</p><h2 id="除法-3"><a class="anchor" href="#除法-3">#</a> 除法 ///</h2><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">//</span><span class="token number">3</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><h4 id="除法一-浮点数-3"><a class="anchor" href="#除法一-浮点数-3">#</a> 除法一 / 浮点数</h4><h4 id="除法二-地板除-整数-3"><a class="anchor" href="#除法二-地板除-整数-3">#</a> 除法二  //  地板除 整数</h4><p><code>/</code>  除法计算结果是浮点数，即使是两个整数恰好整除，结果也是浮点数：</p><p><code>//</code> ，称为地板除，两个整数的除法仍然是整数：</p><h2 id="取余-3"><a class="anchor" href="#取余-3">#</a> 取余 %</h2><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">%</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">%</span><span class="token number">7</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">%</span><span class="token number">20</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">#如果 a% b a&gt;b 则结果为 a</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009141744-i2nxg58.png" alt="image.png"></p><h2 id="字符编码-3"><a class="anchor" href="#字符编码-3">#</a> 字符编码</h2><p><code>ASCII</code>  编码</p><p>8 个比特（bit）作为一个字节（byte）</p><p>一个字节能表示的最大的整数就是 255（二进制 11111111 = 十进制 255）</p><p>两个字节可以表示的最大整数是  <code>65535</code> ，4 个字节可以表示的最大整数是  <code>4294967295</code></p><p>大写字母  <code>A</code>  的编码是  <code>65</code> ，二进制的  <code>01000001</code> ，小写字母  <code>z</code>  的编码是  <code>122</code></p><p>Unicode 把所有语言都统一到一套编码里，这样就不会再有乱码问题</p><p>ASCII 编码是 1 个字节，而 Unicode 编码通常是 2 个字节</p><p><strong>ASCll 出现乱码问题引入 Unicode 编码存储空间多了一倍引入 UTF-8 编码</strong></p><p>utf-8：将<strong> Unicode 字符根据不同的数字大小编码成 1-6 个字节，常用的英文字母被编码成 1 个字节，汉字通常是 3 个字节，</strong></p><table><thead><tr><th>字符</th><th>ASCII</th><th>Unicode</th><th>UTF-8</th></tr></thead><tbody><tr><td>A</td><td>01000001</td><td>00000000 01000001</td><td>01000001</td></tr><tr><td>中</td><td>x</td><td>01001110 00101101</td><td>11100100 10111000 10101101</td></tr></tbody></table><p>在计算机内存中，统一使用 Unicode 编码，当需要保存到硬盘或者需要传输的时候，就转换为 UTF-8 编码。</p><p>用记事本编辑的时候，从文件读取的 UTF-8 字符被转换为 Unicode 字符到内存里，编辑完成后，保存的时候再把 Unicode 转换为 UTF-8 保存到文件</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009142650-uopgqob.png" alt="image.png"></p><p>浏览网页的时候，服务器会把动态生成的 Unicode 内容转换为 UTF-8 再传输到浏览器：</p><p><img data-src="https://www.liaoxuefeng.com/files/attachments/923923759189600/0" alt="web-utf-8"></p><h4 id="compile-字符串编译为字节代码-3"><a class="anchor" href="#compile-字符串编译为字节代码-3">#</a> compile () 字符串编译为字节代码</h4><h4 id="编码转化-3"><a class="anchor" href="#编码转化-3">#</a> 编码转化</h4><h4 id="orda-字母转字符-3"><a class="anchor" href="#orda-字母转字符-3">#</a> ord ('A') 字母转字符</h4><h4 id="chr65-字符转字母-3"><a class="anchor" href="#chr65-字符转字母-3">#</a> chr (65) 字符转字母</h4><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>a<span class="token operator">=</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>b<span class="token operator">=</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009144810-rm45nsz.png" alt="image.png"></p><h4 id="bstr转为字节类型bytes-3"><a class="anchor" href="#bstr转为字节类型bytes-3">#</a> b'str' 转为字节类型 bytes</h4><p><code>bytes</code>  类型的数据用带  <code>b</code>  前缀的单引号或双引号表示</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>x <span class="token operator">=</span> <span class="token string">b'ABC'</span></pre></td></tr></tbody></table></figure><p>要注意区分  <code>'ABC'</code>  和  <code>b'ABC'</code> ，前者是  <code>str</code> ，后者虽然内容显示得和前者一样，但  <code>bytes</code>  的每个字符都只占用一个字节。</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009145112-3dmegln.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009150224-kn57ioe.png" alt="image.png"></p><h4 id="strencodeascii-str-变为-bytes-3"><a class="anchor" href="#strencodeascii-str-变为-bytes-3">#</a> str.encode('ascii')  <code>str</code>  变为  <code>bytes </code></h4><p><code>ASCII</code></p><p><code>UTF-8</code></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009150118-wy36xea.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009150204-81jvyjd.png" alt="image.png"></p><h4 id="strdecodeutf-8bytes变为-str-3"><a class="anchor" href="#strdecodeutf-8bytes变为-str-3">#</a> str.decode('utf-8') <code>bytes</code>  变为  <code>str</code></h4><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">b'abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">b'abc'</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">b'abc'</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009150844-zvt6jkv.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009150746-31uq63m.png" alt="image.png"></p><p>len（str）计算字符数</p><p>函数计算的是  <code>str</code>  的字符数，如果换成  <code>bytes</code> ， <code>len()</code>  函数就计算字节数</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token string">b'abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token string">'中'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token string">'中'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009151234-rhao6fv.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009151321-6k73tn8.png" alt="image.png"></p><h2 id="特殊注释-3"><a class="anchor" href="#特殊注释-3">#</a> 特殊注释</h2><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token comment">#!/usr/bin/env python3</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment"># -*- coding: utf-8 -*-</span></pre></td></tr></tbody></table></figure><p>第一行注释是为了告诉 Linux/OS X 系统，这是一个 Python 可执行程序，<strong>Windows 系统会忽略这个注释</strong>；</p><p>第二行注释是为了告诉 Python 解释器，<strong>按照 UTF-8 编码读取源代码</strong>，否则，你在源代码中写的中文输出可能会有乱码。</p><h2 id="占位符-格式化-3"><a class="anchor" href="#占位符-格式化-3">#</a> 占位符 格式化</h2><h3 id="占位符s-d-f-3"><a class="anchor" href="#占位符s-d-f-3">#</a> 占位符 % s % d % f</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009152324-rmac8lz.png" alt="image.png"></p><p>格式化方式和 C 语言是一致</p><p><code> %</code>  运算符就是用来格式化字符串的。</p><p>在字符串内部，</p><p><code>%s</code>  表示用字符串替换，</p><p><code>%d</code>  表示用整数替换，</p><p>有几个  <code>%?</code>  占位符，后面就跟几个变量或者值，顺序要对应好。如果只有一个  <code>%?</code> ，括号可以省略</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009152708-zy7vi8x.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009152722-wq5flos.png" alt="image.png"></p><table><thead><tr><th>占位符</th><th>替换内容</th></tr></thead><tbody><tr><td>%d</td><td>整数</td></tr><tr><td>%f</td><td>浮点数</td></tr><tr><td>%s</td><td>字符串</td></tr><tr><td>%x</td><td>十六进制整数</td></tr></tbody></table><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009153422-r1s8f5z.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009153433-1uhb1w3.png" alt="image.png"></p><p>转义： <code>%%</code>  来表示一个  <code>%</code></p><h3 id="format格式化字符串-3"><a class="anchor" href="#format格式化字符串-3">#</a> format（）格式化字符串</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009154141-a3v7tnj.png" alt="image.png"></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009154153-o6u9yd7.png" alt="image.png"></p><h3 id="f-string-格式化字符串-3"><a class="anchor" href="#f-string-格式化字符串-3">#</a> f-string 格式化字符串</h3><p><code>{r}</code>  被变量  <code>r</code>  的值替换， <code>{s:.2f}</code>  被变量  <code>s</code>  的值替换，并且  <code>:</code>  后面的  <code>.2f</code>  指定了格式化参数（即保留两位小数），因此， <code>{s:.2f}</code>  的替换结果是  <code>19.62</code></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009154406-qahm3f7.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211009154432-m2z0xx5.png" alt="image.png"></p><h2 id="函数式编程-3"><a class="anchor" href="#函数式编程-3">#</a> 函数式编程</h2><p>函数是 Python 内建支持的一种封装，通过层层函数进行调用</p><p>#面向过程的程序设计 #：把复杂任务分解成简单的任务，这种分解可以称之为面向过程的程序设计</p><p>函数式和函数的区别：</p><p>对比例子：计算和计算器的区别</p><p>编程语言，就是越低级的语言，越贴近计算机，抽象程度低，执行效率高，比如 C 语言；越高级的语言，越贴近计算，抽象程度高，执行效率低，比如 Lisp 语言</p><p>Python 不是纯函数式编程语言</p><p>函数式编程就是一种抽象程度很高的编程范式，</p><p>纯粹的函数式编程语言编写的<strong>函数没有变量</strong>，因此，任意一个函数，<strong>只要输入是确定的，输出就是确定的</strong></p><h3 id="函数式编程特点-3"><a class="anchor" href="#函数式编程特点-3">#</a> 函数式编程特点：</h3><ol><li>纯函数式编程语言函数没有变量，输入输出确定</li><li>允许本身作为参数传入另一个函数，允许返回一个函数</li></ol><h2 id="高阶函数-3"><a class="anchor" href="#高阶函数-3">#</a> 高阶函数</h2><p>参数中有函数</p><p>高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回</p><h3 id="变量可以指向函数-3"><a class="anchor" href="#变量可以指向函数-3">#</a> 变量可以指向函数</h3><p>a = 函数</p><p>求绝对值的函数  <code>abs()</code>  为例</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">abs</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211019114343-h6egecv.png" alt="image.png"></p><p>abs（-10）是函数调用，abs 是函数本身</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>k<span class="token operator">=</span><span class="token builtin">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">#函数本身也可以赋值给变量</span></pre></td></tr><tr><td data-num="4"></td><td><pre>h<span class="token operator">=</span><span class="token builtin">abs</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>h<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211019114757-z778j3c.png" alt="image.png"></p><p>结论：函数本身也可以赋值给变量，即：# 变量可以指向函数。#</p><h3 id="函数名也是变量-3"><a class="anchor" href="#函数名也是变量-3">#</a> 函数名也是变量</h3><p>#函数名 #：<strong>其实就是指向函数的变量</strong></p><p>a () 中 a 是指向函数 a（）的变量</p><h3 id="传入函数-3"><a class="anchor" href="#传入函数-3">#</a> 传入函数</h3><p>既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。</p><p>#高阶函数 #：<strong>一个函数就可以接收另一个函数作为参数</strong></p><p>b()</p><p>a(b)</p><p>x=a</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">return</span> <span class="token builtin">abs</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">def</span> <span class="token function">a</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">return</span> f<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">+</span>f<span class="token punctuation">(</span>b<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    a1<span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    a2<span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">(</span>a1<span class="token punctuation">,</span>a2<span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211019115835-q2esytb.png" alt="image.png"></p><p>此时函数 a 为高阶函数，需要调用 f 函数作为参数</p><h2 id="mapreduce-内建函数-3"><a class="anchor" href="#mapreduce-内建函数-3">#</a> map/reduce 内建函数</h2><p>内建了  <code>map()</code>  和  <code>reduce()</code>  函数 高阶函数</p><h3 id="map函数处理生成新iterator迭代器-3"><a class="anchor" href="#map函数处理生成新iterator迭代器-3">#</a> map（）函数处理生成新 Iterator 迭代器</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211019131933-ut47b16.png" alt="image.png"> 两个参数，函数名【函数本身】，需要处理的编程式 iterator</p><p><code>&lt;br /&gt;</code>  创建一个迭代器，使用每个迭代器中的参数计算函数。当最短迭代用尽时停止。</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token builtin">map</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> <span class="token operator">*</span>iterables<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">map</span> <span class="token builtin">object</span></pre></td></tr></tbody></table></figure><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">return</span> x<span class="token operator">*</span>x</pre></td></tr><tr><td data-num="3"></td><td><pre>r<span class="token operator">=</span><span class="token builtin">map</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211019133740-kxaifya.png" alt="image.png"></p><p>运算规则抽象</p><h3 id="reduce函数作用在序列上-3"><a class="anchor" href="#reduce函数作用在序列上-3">#</a> reduce（）函数作用在序列上</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211019142951-sxqvxp4.png" alt="image.png"></p><p>两个参数，函数名【函数本身】，需要处理的 #序列 #： sequence (序列) 是一组有顺序的元素的集合</p><p>序列基本样式 [下限：上限：步长]</p><p><code>reduce</code>  把结果继续和序列的下一个元素做累积计算</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token builtin">reduce</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token punctuation">[</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> x3<span class="token punctuation">,</span> x4<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> f<span class="token punctuation">(</span>f<span class="token punctuation">(</span>f<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span><span class="token punctuation">,</span> x3<span class="token punctuation">)</span><span class="token punctuation">,</span> x4<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> functools <span class="token keyword">import</span> <span class="token builtin">reduce</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">fn</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> x <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> y</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">reduce</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">13579</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211019142820-4tlrn7x.png" alt="image.png"></p><h2 id="filter过滤序列-3"><a class="anchor" href="#filter过滤序列-3">#</a> filter () 过滤序列</h2><p>参数和 map（）相似</p><p><code>filter()</code>  也接收一个函数和一个序列</p><h2 id="sorted排序-3"><a class="anchor" href="#sorted排序-3">#</a> sorted（）排序</h2><p>高阶函数<img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211020184319-dzvm55o.png" alt="image.png"></p><p>参数：排序对象，key = 函数</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>sorted<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">36</span>, <span class="token number">5</span>, -12, <span class="token number">9</span>, -21<span class="token punctuation">]</span>, <span class="token assign-left variable">key</span><span class="token operator">=</span>abs<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p>排序的核心是比较两个元素的大小</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>print<span class="token punctuation">(</span>sorted<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1,2</span>,353,6,3,234,43,435<span class="token punctuation">]</span><span class="token punctuation">))</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211020184421-43dcfax.png" alt="image.png"></p><p>key 指定绝对值大小排序</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>print<span class="token punctuation">(</span>sorted<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1,2</span>,353,6,3,234,43,435,-242,-34,34,35<span class="token punctuation">]</span>,key<span class="token operator">=</span>abs<span class="token punctuation">))</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211020184629-q7j7zxx.png" alt="image.png"></p><h2 id="返回函数-3"><a class="anchor" href="#返回函数-3">#</a> 返回函数</h2><h3 id="函数作为返回值-3"><a class="anchor" href="#函数作为返回值-3">#</a> 函数作为返回值</h3><p>高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token comment"># 如果不需要立刻求和，而是在后面的代码中，</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment"># 根据需要再计算怎么办？可以不返回求和的结果，而是返回求和的函数：</span></pre></td></tr><tr><td data-num="3"></td><td><pre>def zary_sum<span class="token punctuation">(</span>a<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="4"></td><td><pre>    def sum<span class="token punctuation">(</span><span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token assign-left variable">sum1</span><span class="token operator">=</span><span class="token number">0</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> a:</pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token assign-left variable">sum1</span><span class="token operator">=</span>sum1+i</pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token builtin class-name">return</span> sum1</pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token builtin class-name">return</span> <span class="token function">sum</span></pre></td></tr><tr><td data-num="10"></td><td><pre>print<span class="token punctuation">(</span>type<span class="token punctuation">(</span>zary_sum<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1,2</span>,3,4<span class="token punctuation">]</span><span class="token punctuation">))</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token assign-left variable">f</span><span class="token operator">=</span>zary_sum<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1,2</span>,3,4<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>print<span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token punctuation">))</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211021100621-oot0dd6.png" alt="image.png"></p><p>调用返回函数时，每次调用都会新生成一个函数</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211021100747-ho01xzp.png" alt="image.png"></p><h2 id="闭包-3"><a class="anchor" href="#闭包-3">#</a> 闭包</h2><p>当一个函数的返回值是另外一个函数，</p><p>而返回的那个函数如果调用了其父函数内部的其它变量，如果 <strong>返回的这个函数在外部被执行，就产生了闭包</strong> 。</p><p><strong>返回函数中，返回的函数调用父函数的内部变量</strong></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211021100950-gl5liu8.png" alt="image.png"></p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token comment">#返回函数</span></pre></td></tr><tr><td data-num="2"></td><td><pre>def count<span class="token punctuation">(</span><span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token assign-left variable">fs</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1,4</span><span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="5"></td><td><pre>        def f<span class="token punctuation">(</span><span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token builtin class-name">return</span> i*i</pre></td></tr><tr><td data-num="7"></td><td><pre>        fs.append<span class="token punctuation">(</span>f<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token builtin class-name">return</span> fs</pre></td></tr><tr><td data-num="9"></td><td><pre>f1,f2,f3<span class="token operator">=</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>print<span class="token punctuation">(</span>f1<span class="token punctuation">(</span><span class="token punctuation">)</span>,f2<span class="token punctuation">(</span><span class="token punctuation">)</span>,f3<span class="token punctuation">(</span><span class="token punctuation">))</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211021103727-wtd0kdc.png" alt="image.png"></p><p>返回一个函数时，牢记该函数并未执行，返回函数中不要引用任何可能会变化的变量。</p><h2 id="lambda匿名函数-3"><a class="anchor" href="#lambda匿名函数-3">#</a> lambda（）匿名函数</h2><p>lambda 关键字 函数参数：函数表达式</p><p>传入函数时，有些时候，不需要显式地定义函数</p><p>Python 对匿名函数的支持有限，只有一些简单的情况下可以使用匿名函数。</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>lambda x:x*x</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">#等价于</span></pre></td></tr><tr><td data-num="3"></td><td><pre>def f<span class="token punctuation">(</span>x<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token builtin class-name">return</span> x*x</pre></td></tr></tbody></table></figure><p>关键字  <code>lambda</code>  表示匿名函数，冒号前面的  <code>x</code>  表示函数参数，只能一个表达式</p><p>不用写  <code>return</code> ，返回值就是该表达式的结果。</p><p>匿名函数也是一个函数对象</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token assign-left variable">f</span><span class="token operator">=</span>lamdba x:x*x</pre></td></tr></tbody></table></figure><p>判断奇数函数</p><p>原函数：</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>def is_odd<span class="token punctuation">(</span>n<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token builtin class-name">return</span> n % <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>L <span class="token operator">=</span> list<span class="token punctuation">(</span>filter<span class="token punctuation">(</span>is_odd, range<span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">20</span><span class="token punctuation">))</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p>采用匿名函数修改</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token assign-left variable">l</span><span class="token operator">=</span>list<span class="token punctuation">(</span>filter<span class="token punctuation">(</span>lambda x:x%2<span class="token operator">==</span><span class="token number">1</span>,range<span class="token punctuation">(</span><span class="token number">1,20</span><span class="token punctuation">))</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>print<span class="token punctuation">(</span>l<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211021143505-wbqh836.png" alt="image.png"></p><h2 id="装饰器-decorator-3"><a class="anchor" href="#装饰器-decorator-3">#</a> 装饰器 Decorator</h2><h3 id="本质上装饰器就是一个返回函数的高阶函数-3"><a class="anchor" href="#本质上装饰器就是一个返回函数的高阶函数-3">#</a> 本质上，装饰器就是一个返回函数的高阶函数</h3><p>@log 等价于</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>now <span class="token operator">=</span> log<span class="token punctuation">(</span>now<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p>由于函数也是一个对象，而且函数对象可以被赋值给变量，</p><p>所以，通过变量也能调用该函数</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211022101101-ncgju0i.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211022101111-tgdwt0q.png" alt="image.png"></p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>def log<span class="token punctuation">(</span>func<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="2"></td><td><pre>    def wrapper<span class="token punctuation">(</span>*args,**kwargs<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="3"></td><td><pre>        print<span class="token punctuation">(</span><span class="token string">'call %s'</span>% func.__name__<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token builtin class-name">return</span> func<span class="token punctuation">(</span>*args,**kwargs<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token builtin class-name">return</span> wrapper<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">#func 为参数所以是高阶函数</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">#return 函数所以是返回函数，</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">#没有调用父函数中参数，所以不是闭包</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211022110733-h27x1zh.png" alt="image.png"><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211022110058-zyo7xpn.png" alt="image.png"></p><p>场景注意：</p><p>无 @装饰器时函数不调用，需要参数才调用</p><p>当 @时会直接调用装饰器定义函数然后执行函数，不用调用函数</p><p>三层时，传入参数</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>def log1<span class="token punctuation">(</span>text<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="2"></td><td><pre>    def decorator<span class="token punctuation">(</span>func<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="3"></td><td><pre>        def wapper<span class="token punctuation">(</span>*args,**kw<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="4"></td><td><pre>            print<span class="token punctuation">(</span><span class="token string">'%s %s'</span>%<span class="token punctuation">(</span>text,func.__name__<span class="token punctuation">))</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            <span class="token builtin class-name">return</span> func<span class="token punctuation">(</span>*args,**kw<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token builtin class-name">return</span> wapper</pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token builtin class-name">return</span> decorator</pre></td></tr><tr><td data-num="8"></td><td><pre>@log1<span class="token punctuation">(</span><span class="token string">'ruan'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>def now3<span class="token punctuation">(</span><span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="10"></td><td><pre>    print<span class="token punctuation">(</span><span class="token string">"hhh"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>now3<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p>相当于在返回高阶函数上还有一个函数，所以返回时应该还要调用一次</p><h2 id="wraps-常用装饰器-3"><a class="anchor" href="#wraps-常用装饰器-3">#</a> @wraps 常用装饰器</h2><p>当装饰器是个闭包时，装饰器调用变量会改变增加 @wraps 后装饰器内的变量不变</p><p>装饰器在装饰一个函数时，，原函数就成了一个新的函数，也</p><p>就是说其属性会发生变化，所以为了 <strong>不改变原函数的属性</strong>，</p><p>我们会调用 functools 中的 wraps 装饰器来保证原函数的属性不变</p><h4 id="不加wraps时-3"><a class="anchor" href="#不加wraps时-3">#</a> 不加 wraps 时</h4><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>@wraps<span class="token punctuation">(</span>func<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>from functools <span class="token function">import</span> wraps</pre></td></tr><tr><td data-num="2"></td><td><pre>def wrap<span class="token punctuation">(</span>func<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="3"></td><td><pre>   </pre></td></tr><tr><td data-num="4"></td><td><pre>    def b<span class="token punctuation">(</span><span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token string">'b'</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        print<span class="token punctuation">(</span><span class="token string">'decorator:'</span>,b.__name__<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        print<span class="token punctuation">(</span><span class="token string">'funname'</span>,func.__name__<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        func<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token builtin class-name">return</span> b</pre></td></tr><tr><td data-num="10"></td><td><pre>@wrap</pre></td></tr><tr><td data-num="11"></td><td><pre>def a<span class="token punctuation">(</span><span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token string">'a'</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    print<span class="token punctuation">(</span><span class="token string">'name'</span>,a.__name__<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>a<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211022115935-kgsz7b2.png" alt="image.png"></p><p>加装饰器 wraps 时</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>from functools <span class="token function">import</span> wraps</pre></td></tr><tr><td data-num="2"></td><td><pre>def wrap<span class="token punctuation">(</span>func<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="3"></td><td><pre>    @wraps<span class="token punctuation">(</span>func<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    def b<span class="token punctuation">(</span><span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token string">'b'</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        print<span class="token punctuation">(</span><span class="token string">'decorator:'</span>,b.__name__<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        print<span class="token punctuation">(</span><span class="token string">'funname'</span>,func.__name__<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        func<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token builtin class-name">return</span> b</pre></td></tr><tr><td data-num="10"></td><td><pre>@wrap</pre></td></tr><tr><td data-num="11"></td><td><pre>def a<span class="token punctuation">(</span><span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token string">'a'</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    print<span class="token punctuation">(</span><span class="token string">'name'</span>,a.__name__<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>a<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211022115950-2j3i7ht.png" alt="image.png"></p><p>闭包的概念：调用父函数中的变量的函数，为了保证数据安全。变量作用域只在函数内部，可在闭包中操作数据。</p><p>装饰器返回为什么是函数名（函数内存地址）而不直接执行函数？</p><p>当有参数传入时，可直接与调用的函数中的值传入参数执行。</p><p>（）是运算符 f () 与 f.<strong>call</strong> () 等价：将 f 对象变成变成可调用的对象</p><h2 id="偏函数functools模块-3"><a class="anchor" href="#偏函数functools模块-3">#</a> 偏函数（functools 模块）</h2><p>属于 functools 模块</p><h3 id="作用-5"><a class="anchor" href="#作用-5">#</a> 作用：</h3><p>通过设定参数的默认值，降低函数调用的参数</p><p><code>int()</code>  函数默认按十进制转换</p><p>print(int('100',base=8))</p><p>经常调用于是重写一个函数 int2</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>def int2<span class="token punctuation">(</span>x, <span class="token assign-left variable">base</span><span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="2"></td><td><pre>    print<span class="token punctuation">(</span>int<span class="token punctuation">(</span>x, base<span class="token punctuation">))</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token builtin class-name">return</span> int<span class="token punctuation">(</span>x, base<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>print<span class="token punctuation">(</span>int2<span class="token punctuation">(</span><span class="token string">'2334'</span><span class="token punctuation">))</span></pre></td></tr></tbody></table></figure><p>采用偏函数</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token function">import</span> functools</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token assign-left variable">int3</span><span class="token operator">=</span>functools.partial<span class="token punctuation">(</span>int,base<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>print<span class="token punctuation">(</span>int3<span class="token punctuation">(</span><span class="token string">'46'</span><span class="token punctuation">))</span></pre></td></tr><tr><td data-num="4"></td><td><pre>print<span class="token punctuation">(</span>int<span class="token punctuation">(</span><span class="token punctuation">))</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211028103219-mdbldp6.png" alt="image.png"></p><p>functools.partial 的作用是将函数的特定参数固定住（设定为默认值）</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211028103645-7po81oc.png" alt="image.png"></p><p>创建偏函数的时候也可以接收，函数对象，*args，**kw</p><h2 id="模块-3"><a class="anchor" href="#模块-3">#</a> 模块</h2><p>python 包：作用区分相同名称的模块</p><p>模块相当于一个 py 文件</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211028105055-2xv0z2i.png" alt="image.png"></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211028105133-tkzgcka.png" alt="image.png"></p><h2 id="作用域-3"><a class="anchor" href="#作用域-3">#</a> 作用域</h2><p>仅仅在模块内部使用。在 Python 中，是通过  <code>_</code> 前缀来实现的。</p><h3 id="pubilc公开-3"><a class="anchor" href="#pubilc公开-3">#</a> pubilc 公开</h3><p>正常的函数和变量名是公开的（public）</p><h3 id="private非公开___-3"><a class="anchor" href="#private非公开___-3">#</a> private 非公开_,__</h3><p>_xxx 和__xxx 这样的函数或变量就是非公开的（private）</p><h2 id="安装第三方模块pip-3"><a class="anchor" href="#安装第三方模块pip-3">#</a> 安装第三方模块 pip</h2><p>pip install 模块名</p><h3 id="模块搜索路径-3"><a class="anchor" href="#模块搜索路径-3">#</a> 模块搜索路径</h3><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token function">import</span> sys</pre></td></tr><tr><td data-num="2"></td><td><pre>print<span class="token punctuation">(</span>sys.path<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p>两种方式：</p><ol><li>添加搜索路径<figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token function">import</span> sys</pre></td></tr><tr><td data-num="2"></td><td><pre>sys.path.append<span class="token punctuation">(</span><span class="token string">'/Users/michael/my_py_scripts'</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure></li><li>设置环境变量</li></ol><p>第二种方法是设置环境变量  <code>PYTHONPATH</code></p><h2 id="面向对象编程-3"><a class="anchor" href="#面向对象编程-3">#</a> 面向对象编程</h2><p>面向对象编程 ——Object Oriented Programming，简称 OOP，是一种程序设计思想</p><p>对象作为程序的基本单元，</p><p>一个对象包含了数据和操作数据的函数</p><p>数据封装、继承和多态是面向对象的三大特点</p><h2 id="类和实例-3"><a class="anchor" href="#类和实例-3">#</a> 类和实例</h2><p>面向对象最重要的概念就是类（Class）和实例（Instance）</p><p>类是抽象出来的模板</p><p>实例是根据类创建出的对象，每个对象可能有属性和方法</p><p>定义类是通过  <code>class</code>  关键字，类名通常是大写开头的单词</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>class Student<span class="token punctuation">(</span>object<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="2"></td><td><pre>    pass</pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211028113324-1nch2o5.png" alt="image.png"></p><p>！！！在类中定义函数有一点不同，定义佛如方法第一个参数永远是实例变量本身 self</p><p>仍然可以用默认参数、可变参数、关键字参数和命名关键字参数</p><h2 id="数据封装-3"><a class="anchor" href="#数据封装-3">#</a> 数据封装</h2><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>class Student<span class="token punctuation">(</span>object<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="2"></td><td><pre>    def __init__<span class="token punctuation">(</span>self, name, score<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="3"></td><td><pre>        self.name <span class="token operator">=</span> name</pre></td></tr><tr><td data-num="4"></td><td><pre>        self.score <span class="token operator">=</span> score</pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>    def get_grade<span class="token punctuation">(</span>self<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">if</span> self.score <span class="token operator">&gt;</span><span class="token operator">=</span> <span class="token number">90</span>:</pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token builtin class-name">return</span> <span class="token string">'A'</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">elif</span> self.score <span class="token operator">&gt;</span><span class="token operator">=</span> <span class="token number">60</span>:</pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token builtin class-name">return</span> <span class="token string">'B'</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        else:</pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token builtin class-name">return</span> <span class="token string">'C'</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211028113713-vhhvowi.png" alt="image.png"></p><h2 id="访问限制-3"><a class="anchor" href="#访问限制-3">#</a> 访问限制</h2><h3 id="作用-6"><a class="anchor" href="#作用-6">#</a> 作用：</h3><p><strong>确保了外部代码不能随意修改对象内部的状态</strong></p><p>实例的变量名如果以  <code>__</code> 开头，就变成了一个私有变量（private）</p><p>外部无法访问_name</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>class Student<span class="token punctuation">(</span>object<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="2"></td><td><pre>    def __init__<span class="token punctuation">(</span>self,name,age<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="3"></td><td><pre>        self._name<span class="token operator">=</span>name</pre></td></tr><tr><td data-num="4"></td><td><pre>        self.age<span class="token operator">=</span>age</pre></td></tr><tr><td data-num="5"></td><td><pre>    def print_name<span class="token punctuation">(</span>self<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="6"></td><td><pre>        print<span class="token punctuation">(</span>self._name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token builtin class-name">return</span> self.age,self._name</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token assign-left variable">a</span><span class="token operator">=</span>Student<span class="token punctuation">(</span><span class="token string">'ruan'</span>,23<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token assign-left variable">h</span><span class="token operator">=</span>a.print_name<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>print<span class="token punctuation">(</span>h<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211028114732-awu2k2m.png" alt="image.png"></p><p>若是要获取，修改变量增加 get，set 方式即可</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>class Student<span class="token punctuation">(</span>object<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="2"></td><td><pre>    def __init__<span class="token punctuation">(</span>self,name,age<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="3"></td><td><pre>        self._name<span class="token operator">=</span>name</pre></td></tr><tr><td data-num="4"></td><td><pre>        self.age<span class="token operator">=</span>age </pre></td></tr><tr><td data-num="5"></td><td><pre>    def get_name<span class="token punctuation">(</span>self<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token builtin class-name">return</span> self.name</pre></td></tr><tr><td data-num="7"></td><td><pre>    def set_name<span class="token punctuation">(</span>self,name<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="8"></td><td><pre>        self._name<span class="token operator">=</span>name</pre></td></tr></tbody></table></figure><p>Python 本身没有任何机制阻止你干坏事，一切全靠自觉。</p><p>类外部无法访问</p><h2 id="继承和多态-3"><a class="anchor" href="#继承和多态-3">#</a> 继承和多态</h2><h3 id="继承-3"><a class="anchor" href="#继承-3">#</a> 继承</h3><h4 id="多态-3"><a class="anchor" href="#多态-3">#</a> 多态</h4><p>在继承关系中，如果一个实例的数据类型是某个子类，那它的数据类型也可以被看做是父类。</p><p>比如：动物是父类，狗和鱼是子类；鱼是鱼类，鱼是动物都成立。</p><p>判断一个变量是否是某个类型可以用  <code>isinstance()</code>  判断</p><h3 id="鸭子类型-3"><a class="anchor" href="#鸭子类型-3">#</a> 鸭子类型</h3><p>并不要求严格的继承体，一个对象只要 “看起来像鸭子，走起路来像鸭子”，那它就可以被看做是鸭子。</p><h2 id="获取对象信息-3"><a class="anchor" href="#获取对象信息-3">#</a> 获取对象信息</h2><h3 id="type判断对象类型-3"><a class="anchor" href="#type判断对象类型-3">#</a> type（）判断对象类型</h3><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211102183643-gwgjuho.png" alt="image.png"></p><h3 id="isinstance对于继承关系判断class的类型-3"><a class="anchor" href="#isinstance对于继承关系判断class的类型-3">#</a> isinstance () 对于继承关系，判断 class 的类型</h3><h3 id="dir获取对象的所有属性和方法-3"><a class="anchor" href="#dir获取对象的所有属性和方法-3">#</a> dir（）获取对象的所有属性和方法</h3><h4 id="len对象长度-3"><a class="anchor" href="#len对象长度-3">#</a> len（）对象长度</h4><h4 id="lower返回小写的字符串-3"><a class="anchor" href="#lower返回小写的字符串-3">#</a> lower（）返回小写的字符串</h4><h4 id="getattr获取属性a-3"><a class="anchor" href="#getattr获取属性a-3">#</a> getattr（）获取属性 a</h4><h4 id="setattr设置属性a-3"><a class="anchor" href="#setattr设置属性a-3">#</a> setattr（）设置属性 a</h4><h4 id="hasattrobja判断是否有属性a-3"><a class="anchor" href="#hasattrobja判断是否有属性a-3">#</a> hasattr（obj,'a'）判断是否有属性 a</h4><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>getattr<span class="token punctuation">(</span>obj, <span class="token string">'z'</span>, <span class="token number">404</span><span class="token punctuation">)</span> <span class="token comment"># 获取属性 'z'，如果不存在，返回默认值 404</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">404</span></pre></td></tr></tbody></table></figure><h2 id="实例属性和类属性-3"><a class="anchor" href="#实例属性和类属性-3">#</a> 实例属性和类属性</h2><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211102184822-83nvy25.png" alt="image.png"></p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>class Student<span class="token punctuation">(</span>object<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">'ruan'</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   </pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token assign-left variable">h</span><span class="token operator">=</span>Student<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>h.name<span class="token operator">=</span><span class="token string">'hhh'</span></pre></td></tr></tbody></table></figure><p>类中的 name 是类属性，</p><p>创建 h 类对象即实例后赋值的是实例属性 name，但由于实例对象的优先级比类属性高，会屏蔽类中的 name 属性，即 h.name 的值为 hhh</p><h3 id="总结-7"><a class="anchor" href="#总结-7">#</a> 总结：</h3><ol><li>实例属性属于各个实例所有，互不干扰；</li><li>类属性属于类所有，所有实例共享一个属性；</li><li>不要对实例属性和类属性使用相同的名字，否则将产生难以发现的错误</li></ol><h1 id="面向对象高级编程-3"><a class="anchor" href="#面向对象高级编程-3">#</a> 面向对象高级编程</h1><p>数据封装、继承和多态只是面向对象程序设计中最基础的 3 个概念</p><p>多重继承、定制类、元类</p><h1 id="_slots_使用-3"><a class="anchor" href="#_slots_使用-3">#</a> _slots_使用</h1><p>可以给创建的实例绑定属性和方法</p><p>给一个实例绑定的方法对另外一个实例对象是不起作用的</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>class A:</pre></td></tr><tr><td data-num="2"></td><td><pre>    def run<span class="token punctuation">(</span>self<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="3"></td><td><pre>        print<span class="token punctuation">(</span><span class="token string">"i im ferther runing...."</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token assign-left variable">sun1</span><span class="token operator">=</span>A<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">#给实例 sun1 设置 name 属性</span></pre></td></tr><tr><td data-num="6"></td><td><pre>sun1.name<span class="token operator">=</span><span class="token string">'i im name'</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">#创建实例对象 2</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token assign-left variable">sun2</span><span class="token operator">=</span>A<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">#实例对象 sun1 的属性和 sun2 无关，即 sun2 没有 name 属性</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">#给实例 sun1 绑定方法，方法和属性同理</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">#定义方法</span></pre></td></tr><tr><td data-num="12"></td><td><pre>def setAll<span class="token punctuation">(</span>self,num<span class="token punctuation">)</span>:</pre></td></tr><tr><td data-num="13"></td><td><pre>    print<span class="token punctuation">(</span>num<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>sun1.newfun<span class="token operator">=</span>MethodType<span class="token punctuation">(</span>setAll, sun1<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>sun1.newfun<span class="token punctuation">(</span><span class="token number">37</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment">#若所有实例都需要绑定方法则给类绑定方法</span></pre></td></tr><tr><td data-num="17"></td><td><pre>A.setAll<span class="token operator">=</span>setAll</pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">#给类绑定方法后，所有创建的实例的均可调用</span></pre></td></tr></tbody></table></figure><pre><code>def set_age(self, age): # 定义一个函数作为实例方法...     self.age = age...&gt;&gt;&gt; from types import MethodType&gt;&gt;&gt; s.set_age = MethodType(set_age, s) # 给实例绑定一个方法&gt;&gt;&gt; s.set_age(25) # 调用实例方法</code></pre><h2 id="限制实例属性定义一个特殊的-__slots__变量-3"><a class="anchor" href="#限制实例属性定义一个特殊的-__slots__变量-3">#</a> 限制实例属性，定义一个特殊的  <code>__slots__</code> 变量</h2><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    __slots__ <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">)</span> <span class="token comment"># 用 tuple 定义允许绑定的属性名称</span></pre></td></tr><tr><td data-num="3"></td><td><pre>s<span class="token operator">=</span>Student<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>s<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'ruan'</span></pre></td></tr><tr><td data-num="5"></td><td><pre>s<span class="token punctuation">.</span>firstname<span class="token operator">=</span><span class="token string">'i im firstname'</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">#输出的时候 firstname 的属性会报错，</span></pre></td></tr><tr><td data-num="7"></td><td><pre>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  File <span class="token string">"&lt;stdin&gt;"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>AttributeError<span class="token punctuation">:</span> <span class="token string">'Student'</span> <span class="token builtin">object</span> has no attribute <span class="token string">'firstaname'</span></pre></td></tr></tbody></table></figure><h3 id="注意-3"><a class="anchor" href="#注意-3">#</a> 注意：</h3><p>_slots_使用时要注意，定义的属性只在当前的类的实例中，对于继承的子类是不起作用的</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    __slots__ <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'i im run people......'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span>People<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">say</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'i im teacher....'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>t<span class="token operator">=</span>Teacher<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>t<span class="token punctuation">.</span>tall<span class="token operator">=</span><span class="token string">'shouhua'</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>tall<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>p<span class="token operator">=</span>People<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>p<span class="token punctuation">.</span>tall<span class="token punctuation">(</span><span class="token string">'shouhuap'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>tall<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211103140608-7ezqmvs.png" alt="image.png"></p><p>只限制父类 People 的属性，而子类 Teacher 中不限制</p><h2 id="property-3"><a class="anchor" href="#property-3">#</a> @property</h2><p>在绑定属性时，如果我们直接把属性暴露出去，导致可以随意更改。通过 get，set 来获取更改属性值。</p><p>在 python 中直接调用装饰器将一个方法变成属性调用</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token decorator annotation punctuation">@property</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">#使用 get 方法是调用装饰器 @peoperty，</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment"># 同时自动创建了另一个装饰器 @属性.setter</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">score</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>score</pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token decorator annotation punctuation">@score<span class="token punctuation">.</span>setter</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">score</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        self<span class="token punctuation">.</span>_score<span class="token operator">=</span>value</pre></td></tr></tbody></table></figure><h2 id="总结-8"><a class="anchor" href="#总结-8">#</a> 总结：</h2><p>- 权限限制只对类对象实际起作用，想要达到方法和属性强制访问权限，需要使用 @property 装饰器进行 get，set 方法</p><p>属性名与方法名一定要区分开，不然会进入死循环（self._age，def age ()）<br>实例化的对象使用属性时，不是调用属性（meizi._age），而是用的方法名（meizi.age）<br>@property 其实就是实现了 getter 功能； @xxx.setter 实现的是 setter 功能；还有一个 @xxx.deleter 实现删除功能<br>定义方法的时候 @property 必须在 @xxx.setter 之前，且二者修饰的方法名相同（age ()）<br>如果只实现了 @property（而没有实现 @xxx.setter），那么该属性为 只读属性</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token comment">#请利用 @property 给一个 Screen 对象加上 width 和 height 属性，</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment"># 以及一个只读属性 resolution：</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Screen</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    __slots__ <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'_width'</span><span class="token punctuation">,</span><span class="token string">'_height'</span><span class="token punctuation">,</span><span class="token string">'_resolution'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token decorator annotation punctuation">@property</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">width</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_width</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token comment"># 方法名称和实例变量均为 width:</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token decorator annotation punctuation">@width<span class="token punctuation">.</span>setter</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">width</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>widthValue<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        self<span class="token punctuation">.</span>_width<span class="token operator">=</span>widthValue</pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token decorator annotation punctuation">@property</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">height</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_height</pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token decorator annotation punctuation">@width<span class="token punctuation">.</span>setter</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">height</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        self<span class="token punctuation">.</span>_height <span class="token operator">=</span> height</pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token decorator annotation punctuation">@property</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">resolution</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_width <span class="token operator">*</span> self<span class="token punctuation">.</span>_height</pre></td></tr><tr><td data-num="26"></td><td><pre>s<span class="token operator">=</span>Screen<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>s<span class="token punctuation">.</span>width<span class="token operator">=</span><span class="token number">23</span></pre></td></tr><tr><td data-num="28"></td><td><pre>s<span class="token punctuation">.</span>height<span class="token operator">=</span><span class="token number">12</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>resolution<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211103150647-dge6za2.png" alt="image.png"></p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>s<span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">60</span> <span class="token comment"># OK，实际转化为 s.set_score (60)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>s<span class="token punctuation">.</span>score <span class="token comment"># OK，实际转化为 s.get_score ()</span></pre></td></tr></tbody></table></figure><p>要特别注意：属性的方法名不要和实例变量重名。例如，以下的代码是错误的：</p><pre><code>class Student(object):    # 方法名称和实例变量均为birth:    @property    def birth(self):        return self.birth</code></pre><p>出现递归调用错误</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211103151046-5z499ew.png" alt="image.png"></p><p>之前的例子中 width 和_width 不同所以可以运行</p><h2 id="多重继承-5"><a class="anchor" href="#多重继承-5">#</a> 多重继承</h2><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211103151750-dvwa7qb.png" alt="image.png"></p><p>python 可以支持多继承，即一个子类可以继承多个父类；但 java 是单继承，只能有一个父类</p><p>Tercher（Name，study，teach）即 Teacher 可以继承多个父类</p><h3 id="mixin-3"><a class="anchor" href="#mixin-3">#</a> MixIn</h3><p>在设计类的继承关系时，通常，主线都是单一继承下来的，例如， <code>Teacher</code>  继承自 Name。但是，如果需要 “混入” 额外的功能，通过多重继承就可以实现，比如 Teacher 除了继承自  <code>Name</code>  外，再同时继承  <code>Teach</code> 。这种设计通常称之为 MixIn</p><p>Python 自带了  <code>TCPServer</code>  和  <code>UDPServer</code>  这两类网络服务，而要同时服务多个用户就必须使用多进程或多线程模型，这两种模型由  <code>ForkingMixIn</code>  和  <code>ThreadingMixIn</code>  提供。</p><h3 id="多继承-3"><a class="anchor" href="#多继承-3">#</a> 多继承</h3><p>多重继承这个名词一般用来形容继承链条可以很长，多个层次。</p><h3 id="多重继承-6"><a class="anchor" href="#多重继承-6">#</a> 多重继承</h3><p><strong>多继承则指一个类可以有多个基类，相反则是单继承</strong>。任何面向对象编程语言都支持多重继承，但像 java 这种只能通过接口实现有限程度的多继承</p><p>问：多继承 如果多个类有共同得方法名 怎么区分是调得哪个类🤡</p><p>答：调用该方法的时候，会调用第一顺位继承父类的方法</p><h3 id="总结-9"><a class="anchor" href="#总结-9">#</a> 总结：</h3><ol><li>Python 允许使用多重继承，因此，MixIn 就是一种常见的设计</li><li>只允许单一继承的语言（如 Java）不能使用 MixIn 的设计</li></ol><h2 id="定制类-3"><a class="anchor" href="#定制类-3">#</a> 定制类</h2><p>Python 的 class 中还有__xxx__有特殊用途的函数，可以帮助我们定制类</p><h3 id="str回用户看到的字符串-3"><a class="anchor" href="#str回用户看到的字符串-3">#</a> <strong>str</strong> () 回用户看到的字符串</h3><p>将对象  <code>&lt;__main__.Student object at 0x109afb190&gt;</code>  变成易读的数据</p><p>只在调用 print 时会调用__str__，交互界面时还是现实上方不易读的对象内容，此时用</p><h3 id="repr返回程序开发者看到的字符串-3"><a class="anchor" href="#repr返回程序开发者看到的字符串-3">#</a> <strong>repr</strong> () 返回程序开发者看到的字符串</h3><p><code>__str__()</code>  返回用户看到的字符串，而  <code>__repr__()</code>  返回程序开发者看到的字符串，</p><p>也就是说， <code>__repr__()</code>  是为调试服务的</p><p>简写</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>        <span class="token keyword">return</span> <span class="token string">'xxx object (name=%s)'</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name</pre></td></tr><tr><td data-num="3"></td><td><pre>__repr__ <span class="token operator">=</span> __str__</pre></td></tr></tbody></table></figure><h3 id="_iter返回一个迭代对象-3"><a class="anchor" href="#_iter返回一个迭代对象-3">#</a> _<strong>iter</strong> () 返回一个迭代对象</h3><p>需要用到 for in 迭代，需要转化为迭代对象</p><p>该方法返回一个迭代对象，然后，Python 的 for 循环就会不断调用该迭代对象的  <code>__next__()</code>  方法拿到循环的下一个值，直到遇到  <code>StopIteration</code>  错误时退出循环</p><p>例子：</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Fib</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        self<span class="token punctuation">.</span>a<span class="token punctuation">,</span>self<span class="token punctuation">.</span>b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">return</span> self</pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        self<span class="token punctuation">.</span>a<span class="token punctuation">,</span>self<span class="token punctuation">.</span>b<span class="token operator">=</span>self<span class="token punctuation">.</span>b<span class="token punctuation">,</span>self<span class="token punctuation">.</span>a<span class="token operator">+</span>self<span class="token punctuation">.</span>b</pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>a<span class="token operator">&gt;</span><span class="token number">1000</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token keyword">raise</span>  StopIteration</pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>a</pre></td></tr><tr><td data-num="11"></td><td><pre>a<span class="token operator">=</span>Fib<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">for</span> i <span class="token keyword">in</span> a<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211103155046-1xs33i9.png" alt="image.png"></p><h3 id="getitem表现得像list那样按照下标取出元素-3"><a class="anchor" href="#getitem表现得像list那样按照下标取出元素-3">#</a> <strong><strong>getitem</strong></strong> () 表现得像 list 那样按照下标取出元素</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Fib</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        self<span class="token punctuation">.</span>a<span class="token punctuation">,</span>self<span class="token punctuation">.</span>b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">return</span> self</pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        self<span class="token punctuation">.</span>a<span class="token punctuation">,</span>self<span class="token punctuation">.</span>b<span class="token operator">=</span>self<span class="token punctuation">.</span>b<span class="token punctuation">,</span>self<span class="token punctuation">.</span>a<span class="token operator">+</span>self<span class="token punctuation">.</span>b</pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>a<span class="token operator">&gt;</span><span class="token number">1000</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token keyword">raise</span>  StopIteration</pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>a</pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        a<span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            a<span class="token punctuation">,</span>b<span class="token operator">=</span>b<span class="token punctuation">,</span>a<span class="token operator">+</span>b</pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">return</span> a</pre></td></tr><tr><td data-num="16"></td><td><pre>a<span class="token operator">=</span>Fib<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211103155122-fo5pjxz.png" alt="image.png"></p><p>以上是传入 int，切片功能实现，isinstance 判断类型</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Fib</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        self<span class="token punctuation">.</span>a<span class="token punctuation">,</span>self<span class="token punctuation">.</span>b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">return</span> self</pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        self<span class="token punctuation">.</span>a<span class="token punctuation">,</span>self<span class="token punctuation">.</span>b<span class="token operator">=</span>self<span class="token punctuation">.</span>b<span class="token punctuation">,</span>self<span class="token punctuation">.</span>a<span class="token operator">+</span>self<span class="token punctuation">.</span>b</pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>a<span class="token operator">&gt;</span><span class="token number">1000</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token keyword">raise</span>  StopIteration</pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>a</pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="15"></td><td><pre>                a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token operator">+</span> b</pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token keyword">return</span> a</pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span><span class="token builtin">slice</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            start<span class="token operator">=</span>item<span class="token punctuation">.</span>start</pre></td></tr><tr><td data-num="19"></td><td><pre>            stop<span class="token operator">=</span>item<span class="token punctuation">.</span>stop</pre></td></tr><tr><td data-num="20"></td><td><pre>            <span class="token keyword">if</span> start <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="21"></td><td><pre>                start<span class="token operator">=</span><span class="token number">0</span></pre></td></tr><tr><td data-num="22"></td><td><pre>            a<span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            L<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>stop<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="25"></td><td><pre>                L<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>                a<span class="token punctuation">,</span>b<span class="token operator">=</span>b<span class="token punctuation">,</span>a<span class="token operator">+</span>b</pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token keyword">return</span> L</pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>a<span class="token operator">=</span>Fib<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211103155838-wdwjies.png" alt="image.png"></p><h3 id="getattr动态返回一个属性-3"><a class="anchor" href="#getattr动态返回一个属性-3">#</a> <strong>getattr</strong> () 动态返回一个属性</h3><p>调用类属性或方法时，先在__init__() 获取后，再从__getattr__() 获取，获取不到才报错</p><h3 id="call直接调用实例本身-3"><a class="anchor" href="#call直接调用实例本身-3">#</a> <strong>call</strong> () 直接调用实例本身</h3><p>与直接调用这个函数一样</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        self<span class="token punctuation">.</span>name<span class="token operator">=</span>name</pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'i im call %s'</span><span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>p<span class="token operator">=</span>People<span class="token punctuation">(</span><span class="token string">'ruan'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>p<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211104150832-d8wkn0m.png" alt="image.png"></p><h2 id="使用枚举类-3"><a class="anchor" href="#使用枚举类-3">#</a> 使用枚举类</h2><p>枚举类：在某些情况下，一个类的 实例对象 的<strong>数量</strong>是 <strong>有限且固定</strong> 的，如季节类，它的实例对象只有春、夏、秋、冬。 在 Java 中像这种对象实例有限且固定的类被称为枚举类；这样的枚举类型定义一个 class 类型，然后，每个常量都是 class 的一个唯一实例。Python 提供了  <code>Enum</code>  类来实现这个功能。</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> enum <span class="token keyword">import</span> Enum</pre></td></tr><tr><td data-num="2"></td><td><pre>M<span class="token operator">=</span>Enum<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'sun1'</span><span class="token punctuation">,</span><span class="token string">'sun2'</span><span class="token punctuation">,</span><span class="token string">'sun3'</span><span class="token punctuation">,</span><span class="token string">'sun4'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>M<span class="token punctuation">.</span>sun1<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211104151622-x7yqw9j.png" alt="image.png"></p><p>自定义枚举类</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> enum <span class="token keyword">import</span> Enum<span class="token punctuation">,</span>unique</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token decorator annotation punctuation">@unique</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Week</span><span class="token punctuation">(</span>Enum<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    sun1<span class="token operator">=</span><span class="token number">1</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    sun2<span class="token operator">=</span><span class="token number">2</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    sun3<span class="token operator">=</span><span class="token number">3</span></pre></td></tr><tr><td data-num="7"></td><td><pre>day2<span class="token operator">=</span>Week<span class="token punctuation">.</span>sun2</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>day2<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211104152125-y6nm9vn.png" alt="image.png"></p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> enum <span class="token keyword">import</span> Enum<span class="token punctuation">,</span>unique</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token decorator annotation punctuation">@unique</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Gender</span><span class="token punctuation">(</span>Enum<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    Male<span class="token operator">=</span><span class="token number">0</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    Female<span class="token operator">=</span><span class="token number">1</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>gender<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        self<span class="token punctuation">.</span>name<span class="token operator">=</span>name</pre></td></tr><tr><td data-num="9"></td><td><pre>        self<span class="token punctuation">.</span>gender<span class="token operator">=</span>gender</pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment"># 测试:</span></pre></td></tr><tr><td data-num="12"></td><td><pre>bart <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'Bart'</span><span class="token punctuation">,</span> Gender<span class="token punctuation">.</span>Male<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">if</span> bart<span class="token punctuation">.</span>gender <span class="token operator">==</span> Gender<span class="token punctuation">.</span>Male<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'测试通过!'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">else</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'测试失败!'</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211104152731-wmdziil.png" alt="image.png"></p><h2 id="使用元类创建类-3"><a class="anchor" href="#使用元类创建类-3">#</a> 使用元类 [创建类]</h2><p>实例对象是类创建</p><p>类是元类创建</p><p>创建类的方式</p><h3 id="方式一type-3"><a class="anchor" href="#方式一type-3">#</a> 方式一：type（）</h3><p><code>type()</code>  函数既可以返回一个对象的类型，又可以创建出新的类型，比如，我们可以通过  <code>type()</code>  函数创建出  <code>Hello</code>  类</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> class1104 <span class="token keyword">import</span> <span class="token operator">*</span></pre></td></tr><tr><td data-num="2"></td><td><pre>h<span class="token operator">=</span>Hello<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>Hello<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211104153538-6iulybe.png" alt="image.png"></p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>Hello <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>hello<span class="token operator">=</span>fn<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p>要创建一个 class 对象， <code>type()</code>  函数依次传入 3 个参数：</p><ol><li>class 的名称；</li><li>继承的父类集合，注意 Python 支持多重继承，如果只有一个父类，别忘了 tuple 的单元素写法；</li><li>class 的方法名称与函数绑定，这里我们把函数  <code>fn</code>  绑定到方法名  <code>hello</code>  上</li></ol><h3 id="方式二元类metaclass-3"><a class="anchor" href="#方式二元类metaclass-3">#</a> 方式二：元类 metaclass</h3><p>先定义 metaclass，然后创建类。</p><p>先定义类，然后创建实例。</p><p><s>metaclass 是 Python 面向对象里最难理解，也是最难使用的魔术代码。</s></p><p>按照默认习惯，metaclass 的类名总是以 Metaclass 结尾，以便清楚地表示这是一个 metaclass</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token comment"># metaclass 采用 type 创建类 ，metaclass 是类的模板，所以必须从 `type` 类型派生</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">ListMetaclass</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> name<span class="token punctuation">,</span>bases<span class="token punctuation">,</span>attrs<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        attrs<span class="token punctuation">[</span><span class="token string">'add'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">lambda</span> self<span class="token punctuation">,</span> value<span class="token punctuation">:</span>self<span class="token punctuation">.</span>append<span class="token punctuation">(</span>value<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">return</span> <span class="token builtin">type</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">,</span>name<span class="token punctuation">,</span>bases<span class="token punctuation">,</span>attrs<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">MyList</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">,</span>metaclass<span class="token operator">=</span>ListMetaclass<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">pass</span></pre></td></tr><tr><td data-num="9"></td><td><pre>mylist<span class="token operator">=</span>MyList<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>mylist<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211104155010-cbldtfp.png" alt="image.png"></p><p><code>__new__()</code>  方法接收到的参数依次是：</p><ol><li>当前准备创建的类的对象；</li><li>类的名字；</li><li>类继承的父类集合；</li><li>类的方法集合</li></ol><h3 id="应用场景-3"><a class="anchor" href="#应用场景-3">#</a> 应用场景</h3><p>ORM 全称 “Object Relational Mapping”，即对象 - 关系映射，就是把关系数据库的一行映射为一个对象，也就是一个类对应一个表，这样，写代码更简单，不用直接操作 SQL 语句。</p><p>要编写一个 ORM 框架，所有的类都只能动态定义，因为只有使用者才能根据表的结构定义出对应的类来。</p><h2 id="错误处理try-3"><a class="anchor" href="#错误处理try-3">#</a> 错误处理 try</h2><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">try</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'try...'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    r <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'result:'</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">except</span> ValueError <span class="token keyword">as</span> e<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ValueError:'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">except</span> ZeroDivisionError <span class="token keyword">as</span> e<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ZeroDivisionError:'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>e<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">finally</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'finally...'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'END'</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p>Python 的错误其实也是 class，所有的错误类型都继承自  <code>BaseException</code></p><p><code>UnicodeError</code>  是  <code>ValueError</code>  的子类🤡</p><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvMy9saWJyYXJ5L2V4Y2VwdGlvbnMuaHRtbCNleGNlcHRpb24taGllcmFyY2h5">Built-in Exceptions — Python 3.10.0 documentation</span></p><h2 id="调用栈-3"><a class="anchor" href="#调用栈-3">#</a> 调用栈</h2><p>让 Python 解释器来打印出错误堆栈</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211104162726-fird23x.png" alt="image.png"></p><h2 id="记录错误logging-3"><a class="anchor" href="#记录错误logging-3">#</a> 记录错误 logging</h2><p>可将 logging 生成一个 txt 方便查看</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">try</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>        xxx</pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        logging<span class="token punctuation">.</span>exception<span class="token punctuation">(</span>e<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><h3 id="抛出错误raise-3"><a class="anchor" href="#抛出错误raise-3">#</a> 抛出错误 raise</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">except</span> ValueError <span class="token keyword">as</span> e<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ValueError!'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">raise</span></pre></td></tr></tbody></table></figure><p>在  <code>bar()</code>  函数中，我们明明已经捕获了错误，但是，打印一个  <code>ValueError!</code>  后，又把错误通过  <code>raise</code>  语句抛出去了，这不有病么？</p><p>其实这种错误处理方式不但没病，而且相当常见。捕获错误目的只是记录一下，便于后续追踪。但是，由于当前函数不知道应该怎么处理该错误，所以，最恰当的方式是继续往上抛，让顶层调用者去处理。</p><h2 id="调试方法-3"><a class="anchor" href="#调试方法-3">#</a> 调试方法</h2><h3 id="1-print-3"><a class="anchor" href="#1-print-3">#</a> 1. print（）</h3><h3 id="2-断言assert-3"><a class="anchor" href="#2-断言assert-3">#</a> 2. 断言 assert</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">assert</span> n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'n is zero!'</span></pre></td></tr></tbody></table></figure><p><code>assert</code>  的意思是，表达式  <code>n != 0</code>  应该是  <code>True</code> ，否则，根据程序运行的逻辑，后面的代码肯定会出错。</p><p>采用断言的好处：</p><p>启动 Python 解释器时可以用  <code>-O</code>  参数来关闭  <code>assert</code> ：</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>$ python <span class="token operator">-</span>O err<span class="token punctuation">.</span>py</pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211104164034-js5sidi.png" alt="image.png"></p><p>关闭后，你可以把所有的  <code>assert</code>  语句当成  <code>pass</code>  来看</p><h3 id="3-logging-3"><a class="anchor" href="#3-logging-3">#</a> 3. logging</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> logging</pre></td></tr><tr><td data-num="2"></td><td><pre>s <span class="token operator">=</span> <span class="token string">'0'</span></pre></td></tr><tr><td data-num="3"></td><td><pre>n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'n = %d'</span> <span class="token operator">%</span> n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">/</span> n<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><h3 id="4pbd单步执行-3"><a class="anchor" href="#4pbd单步执行-3">#</a> 4.pbd 单步执行</h3><p>启动 Python 的调试器 pdb，让程序以单步方式运行，可以随时查看运行状态。</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>python <span class="token operator">-</span>m pdb xxx<span class="token punctuation">.</span>py</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">(</span>Pbd<span class="token punctuation">)</span> <span class="token number">1</span><span class="token comment">#查看第一行代码，单步执行第一行代码</span></pre></td></tr></tbody></table></figure><h3 id="5-pdbset_trace-3"><a class="anchor" href="#5-pdbset_trace-3">#</a> 5. pdb.set_trace()</h3><p>这个方法也是用 pdb，但是不需要单步执行，我们只需要  <code>import pdb</code> ，然后，在可能出错的地方放一个  <code>pdb.set_trace()</code> ，就可以设置一个断点：</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> pdb</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>s <span class="token operator">=</span> <span class="token string">'0'</span></pre></td></tr><tr><td data-num="4"></td><td><pre>n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>pdb<span class="token punctuation">.</span>set_trace<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 运行到这里会自动暂停</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">/</span> n<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p>可以用命令  <code>p</code>  查看变量，或者用命令  <code>c</code>  继续运行：</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211104164634-anjnpuu.png" alt="image.png"></p><h3 id="6ide工具-3"><a class="anchor" href="#6ide工具-3">#</a> 6.IDE 工具</h3><p>vscode,pycharm....</p><h2 id="单元测试-3"><a class="anchor" href="#单元测试-3">#</a> 单元测试</h2><p>单元测试是用来对一个模块、一个函数或者一个类来进行正确性检验的测试工作。</p><h2 id="文档测试-3"><a class="anchor" href="#文档测试-3">#</a> 文档测试</h2><p>doctest 非常有用，不但可以用来测试，还可以直接作为示例代码。通过某些文档生成工具，就可以自动把包含 doctest 的注释提取出来。用户看文档的时候，同时也看到了 doctest。</p><p>Python 内置的 “文档测试”（doctest）模块可以直接提取注释中的代码并执行测试.</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Dict</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token triple-quoted-string string">""""</span></pre></td></tr><tr><td data-num="3"></td><td><pre>      这一段就是文档测试</pre></td></tr><tr><td data-num="4"></td><td><pre>       Simple dict but also support access as x.y style.</pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>       &gt;&gt;&gt; d1 = Dict()</pre></td></tr><tr><td data-num="7"></td><td><pre>       &gt;&gt;&gt; d1['x'] = 100</pre></td></tr><tr><td data-num="8"></td><td><pre>       &gt;&gt;&gt; d1.x</pre></td></tr><tr><td data-num="9"></td><td><pre>       100</pre></td></tr><tr><td data-num="10"></td><td><pre>       &gt;&gt;&gt; d1.y = 200</pre></td></tr><tr><td data-num="11"></td><td><pre>       &gt;&gt;&gt; d1['y']</pre></td></tr><tr><td data-num="12"></td><td><pre>       200</pre></td></tr><tr><td data-num="13"></td><td><pre>       &gt;&gt;&gt; d2 = Dict(a=1, b=2, c='3')</pre></td></tr><tr><td data-num="14"></td><td><pre>       &gt;&gt;&gt; d2.c</pre></td></tr><tr><td data-num="15"></td><td><pre>       '3'</pre></td></tr><tr><td data-num="16"></td><td><pre>       &gt;&gt;&gt; d2['empty']</pre></td></tr><tr><td data-num="17"></td><td><pre>       Traceback (most recent call last):</pre></td></tr><tr><td data-num="18"></td><td><pre>           ...</pre></td></tr><tr><td data-num="19"></td><td><pre>       KeyError: 'empty'</pre></td></tr><tr><td data-num="20"></td><td><pre>       &gt;&gt;&gt; d2.empty</pre></td></tr><tr><td data-num="21"></td><td><pre>       Traceback (most recent call last):</pre></td></tr><tr><td data-num="22"></td><td><pre>           ...</pre></td></tr><tr><td data-num="23"></td><td><pre>       AttributeError: 'Dict' object has no attribute 'empty'</pre></td></tr><tr><td data-num="24"></td><td><pre>       """</pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token builtin">super</span><span class="token punctuation">(</span>Dict<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kw<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__getattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token keyword">try</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="31"></td><td><pre>            <span class="token keyword">return</span> self<span class="token punctuation">[</span>key<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token keyword">except</span> KeyError<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="33"></td><td><pre>            <span class="token keyword">raise</span> AttributeError<span class="token punctuation">(</span><span class="token string">r"'Dict' object has no attribute '%s'"</span> <span class="token operator">%</span> key<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__setattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        self<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value</pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token keyword">import</span> doctest</pre></td></tr><tr><td data-num="40"></td><td><pre>    doctest<span class="token punctuation">.</span>testmod<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p>将其中一个函数注释，运行让它报错</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211108110503-erlvnk1.png" alt="image.png"></p><h2 id="io编程-3"><a class="anchor" href="#io编程-3">#</a> IO 编程</h2><p>程序和运行时的数据在内存中驻留</p><p>涉及到数据交换的地方，通常是磁盘、网络等，就需要 IO 接口</p><p>通常，程序完成 IO 操作会有 Input 和 Output 两个数据流</p><p>Stream（流）是一个很重要的概念，可以把流想象成一个水管，数据就是水管里的水，但是只能单向流动。</p><p>在 IO 编程中，就存在<strong>速度严重不匹配的问题</strong>。举个例子来说，比如要把 100M 的数据写入磁盘，CPU 输出 100M 的数据只需要 0.01 秒，可是磁盘要接收这 100M 数据可能需要 10 秒，怎么办呢？有两种办法：</p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211108111749-yobbduz.png" alt="image.png"></p><h2 id="同步io-3"><a class="anchor" href="#同步io-3">#</a> 同步 IO</h2><p>第一种是 CPU 等着，也就是程序暂停执行后续代码，等 100M 的数据在 10 秒后写入磁盘，再接着往下执行，这种模式称为同步 IO；</p><h2 id="异步io-3"><a class="anchor" href="#异步io-3">#</a> 异步 IO</h2><p>另一种方法是 CPU 不等待，只是告诉磁盘，“您老慢慢写，不着急，我接着干别的事去了”，于是，后续代码可以立刻接着执行，这种模式称为异步 IO。</p><p>如果是服务员跑过来找到你，这是回调模式，如果服务员发短信通知你，你就得不停地检查手机，这是轮询模式。总之，异步 IO 的复杂度远远高于同步 IO。</p><h2 id="文件读写-3"><a class="anchor" href="#文件读写-3">#</a> 文件读写</h2><h3 id="读文件open-3"><a class="anchor" href="#读文件open-3">#</a> 读文件 open（）</h3><p>传入文件名，标示符</p><p>参数：'rb' 二进制</p><p>encoding='gbk' 字符编码</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'/Users/michael/test.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><h3 id="read一次读取全部内容-3"><a class="anchor" href="#read一次读取全部内容-3">#</a> read () 一次读取全部内容</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token string">'Hello, world!'</span></pre></td></tr></tbody></table></figure><h3 id="fclose关闭文件-3"><a class="anchor" href="#fclose关闭文件-3">#</a> f.close（）关闭文件</h3><p>简化方法</p><h3 id="with-openfilepath-r-as-f-printfread-3"><a class="anchor" href="#with-openfilepath-r-as-f-printfread-3">#</a> with open('filepath', 'r') as f:    print(f.read())</h3><p>Python 引入了  <code>with</code>  语句来自动帮我们调用  <code>close()</code>  方法，并且不必调用  <code>f.close()</code>  方法</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'/path/to/file'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p>如果文件很小， <code>read()</code>  一次性读取最方便；</p><p>如果不能确定文件大小，反复调用  <code>read(size)</code>  比较保险；</p><p>如果是配置文件，调用  <code>readlines()</code>  最方便</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 把末尾的 '\n' 删掉</span></pre></td></tr></tbody></table></figure><p>file 和缓存时 = 是 file-like Object 对象，不要求从特定类继承，只要写个  <code>read()</code>  方法就行</p><h3 id="fwrite写文件-3"><a class="anchor" href="#fwrite写文件-3">#</a> f.write () 写文件</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'/Users/michael/test.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'Hello, world!'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p>或</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'/Users/michael/test.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'Hello, world!'</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p>使用  <code>with</code>  语句操作文件 IO 是个好习惯</p><h2 id="stringio和bytesio-3"><a class="anchor" href="#stringio和bytesio-3">#</a> StringIO 和 BytesIO</h2><h3 id="stringio-3"><a class="anchor" href="#stringio-3">#</a> StringIO</h3><p>StringIO 顾名思义就是在内存中读写 str</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> io <span class="token keyword">import</span> StringIO</pre></td></tr><tr><td data-num="2"></td><td><pre> f <span class="token operator">=</span> StringIO<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><code>getvalue()</code>  方法用于获得写入后的 str</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> io <span class="token keyword">import</span> StringIO</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f <span class="token operator">=</span> StringIO<span class="token punctuation">(</span><span class="token string">'Hello!\nHi!\nGoodbye!'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     s <span class="token operator">=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">if</span> s <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token keyword">break</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><h3 id="bytesio-3"><a class="anchor" href="#bytesio-3">#</a> BytesIO</h3><p>操作二进制数据，就需要使用 BytesIO</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> io <span class="token keyword">import</span> BytesIO</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f <span class="token operator">=</span> BytesIO<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'中文'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">6</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token string">b'\xe4\xb8\xad\xe6\x96\x87'</span></pre></td></tr></tbody></table></figure><h2 id="os模块-3"><a class="anchor" href="#os模块-3">#</a> os 模块</h2><h3 id="osname操作系统类型-3"><a class="anchor" href="#osname操作系统类型-3">#</a> os.name 操作系统类型</h3><h3 id="osuname详细系统信息-3"><a class="anchor" href="#osuname详细系统信息-3">#</a> os.uname () 详细系统信息</h3><h3 id="osenciron环境变量-3"><a class="anchor" href="#osenciron环境变量-3">#</a> os.enciron 环境变量</h3><p>要获取某个环境变量的值，可以调用  <code>os.environ.get('key')</code></p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token comment"># 查看当前目录的绝对路径:</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token string">'/Users/michael'</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment"># 在某个目录下创建一个新目录，首先把新目录的完整路径表示出来:</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'/Users/michael'</span><span class="token punctuation">,</span> <span class="token string">'testdir'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token string">'/Users/michael/testdir'</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment"># 然后创建一个目录:</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">'/Users/michael/testdir'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment"># 删掉一个目录:</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>rmdir<span class="token punctuation">(</span><span class="token string">'/Users/michael/testdir'</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p>通过  <code>os.path.join()</code>  函数，这样可以正确处理不同操作系统的路径分隔符</p><h3 id="ospathjoin连接路径-3"><a class="anchor" href="#ospathjoin连接路径-3">#</a>  <code>os.path.join(</code> ) 连接路径</h3><h3 id="ospathsplit拆分路径-3"><a class="anchor" href="#ospathsplit拆分路径-3">#</a>  <code>os.path.split()</code>  拆分路径</h3><h3 id="ospathsplitext-文件扩展名-3"><a class="anchor" href="#ospathsplitext-文件扩展名-3">#</a>  <code>os.path.splitext()</code>  文件扩展名</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token comment"># 对文件重命名:</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span> <span class="token string">'test.py'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment"># 删掉文件:</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'test.py'</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><code>shutil</code>  模块提供了  <code>copyfile()</code>  的函数，它们可以看做是  <code>os</code>  模块的补充</p><p>最后看看如何利用 Python 的特性来过滤文件。比如我们要列出当前目录下的所有目录，只需要一行代码：</p><pre><code>&gt;&gt;&gt; [x for x in os.listdir('.') if os.path.isdir(x)]['.lein', '.local', '.m2', '.npm', '.ssh', '.Trash', '.vim', 'Applications', 'Desktop', ...]</code></pre><p>要列出所有的  <code>.py</code>  文件，也只需一行代码：</p><pre><code>&gt;&gt;&gt; [x for x in os.listdir('.') if os.path.isfile(x) and os.path.splitext(x)[1]=='.py']['apis.py', 'config.py', 'models.py', 'pymonitor.py', 'test_db.py', 'urls.py', 'wsgiapp.py']</code></pre><h2 id="序列化pickle模块-3"><a class="anchor" href="#序列化pickle模块-3">#</a> 序列化 pickle 模块</h2><p>变量从内存中变成可存储或传输的过程称之为序列化，Python 中叫 pickling</p><p>变量内容从序列化的对象重新读到内存里称之为反序列化，即 unpickling</p><h3 id="pickledumps对象-字节序列化-3"><a class="anchor" href="#pickledumps对象-字节序列化-3">#</a> pickle.dumps () 对象 -》字节 [序列化]</h3><p><code>pickle.dumps()</code>  方法把任意对象序列化成一个  <code>bytes</code></p><p><code>pickle.dumps()</code>  方法把任意对象序列化成一个  <code>bytes</code> , 并写入文件中</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> pickle</pre></td></tr><tr><td data-num="2"></td><td><pre>d<span class="token operator">=</span><span class="token builtin">dict</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'ruan'</span><span class="token punctuation">,</span>age<span class="token operator">=</span><span class="token number">34</span><span class="token punctuation">,</span>freand<span class="token operator">=</span><span class="token string">'woman'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment"># print(pickle.dumps(d))</span></pre></td></tr><tr><td data-num="4"></td><td><pre>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'timezone.txt'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>d<span class="token punctuation">,</span> f<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><h3 id="pickleload字节-对象反序列化-3"><a class="anchor" href="#pickleload字节-对象反序列化-3">#</a> pickle.load () 字节 -》对象【反序列化】</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> pickle</pre></td></tr><tr><td data-num="2"></td><td><pre>f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">r'C:\Users\yangs\PycharmProjects\python_study\fun\timezone.txt'</span><span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>d<span class="token operator">=</span>pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211108132946-rtt8k8p.png" alt="image.png"></p><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211108133035-b8gyft4.png" alt="image.png"></p><h2 id="json模块-3"><a class="anchor" href="#json模块-3">#</a> json 模块</h2><p><code>json</code>  模块的  <code>dumps()</code>  和  <code>loads()</code>  函数是定义得非常好的接口的典范。</p><h4 id="jsondumpspython对象python对象-json对象-3"><a class="anchor" href="#jsondumpspython对象python对象-json对象-3">#</a> json.dumps (python 对象) python 对象 -》json 对象</h4><p><code>dumps()</code>  方法返回一个  <code>str</code> ，内容就是标准的 JSON</p><h4 id="jsonloadsjson对象json对象-python对象-3"><a class="anchor" href="#jsonloadsjson对象json对象-python对象-3">#</a> json.loads (json 对象) json 对象 -》python 对象</h4><p><code>json.``dump</code> (obj,&nbsp;fp,&nbsp;<em>,&nbsp;skipkeys=False,&nbsp;ensure_ascii=True,&nbsp;check_circular=True,&nbsp;allow_nan=True,&nbsp;cls=None,&nbsp;indent=None,&nbsp;separators=None,&nbsp;default=None,&nbsp;sort_keys=False,&nbsp;<strong>kw</strong>)</em>*</p><h3 id="类变为字典并序列化-3"><a class="anchor" href="#类变为字典并序列化-3">#</a> 类变为字典并序列化</h3><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>s<span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token keyword">lambda</span> obj<span class="token punctuation">:</span> obj<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><h2 id="进程和线程-3"><a class="anchor" href="#进程和线程-3">#</a> 进程和线程</h2><p>Python 的标准库提供了两个模块： <code>_thread</code>  和  <code>threading</code> ， <code>_thread</code>  是低级模块， <code>threading</code>  是高级模块</p><p><strong>线程是最小的执行单元，而进程由至少一个线程组成</strong></p><p>操作系统轮流让各个任务交替执行</p><p>真正的并行执行多任务只能在多核 CPU 上实现</p><p>对于操作系统来说，一个任务就是一个进程（Process），比如打开一个浏览器就是启动一个浏览器进程</p><p>Word，它可以同时进行打字、拼写检查、打印等事情。在一个进程内部，要同时干多件事，就需要同时运行多个 “子任务”，我们把进程内的这些 “子任务” 称为线程（Thread）</p><ul><li>多进程模式；</li><li>多线程模式；</li><li>多进程 + 多线程模式。</li></ul><h2 id="多进程-3"><a class="anchor" href="#多进程-3">#</a> 多进程</h2><p>Unix/Linux 操作系统提供了一个  <code>fork()</code>  系统调用，普通的函数调用，调用一次，返回一次，但是  <code>fork()</code>  调用一次，返回两次，因为操作系统自动把当前进程（称为父进程）复制了一份（称为子进程），然后，分别在父进程和子进程内返回。</p><p>创建子进程</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> os</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">def</span> <span class="token function">run_pro</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'开始运行子进程%s，%s'</span><span class="token operator">%</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'开始运行进程%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    p<span class="token operator">=</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>run_pro<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p><img data-src="https://b3logfile.com/siyuan/1629903953048/assets/image-20211111131512-zqm80if.png" alt="image.png"></p><h3 id="启动大量子进程pool-3"><a class="anchor" href="#启动大量子进程pool-3">#</a> 启动大量子进程 pool</h3><p>进程池</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> time<span class="token punctuation">,</span> threading</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment"># 新线程执行的代码:</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">def</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'thread %s is running...'</span> <span class="token operator">%</span> threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    n <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">while</span> n <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        n <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'thread %s &gt;&gt;&gt; %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'thread %s ended.'</span> <span class="token operator">%</span> threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'thread %s is running...'</span> <span class="token operator">%</span> threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>loop<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'LoopThread'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>t<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'thread %s ended.'</span> <span class="token operator">%</span> threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><h1 id="模块总结-3"><a class="anchor" href="#模块总结-3">#</a> 模块总结</h1><h2 id="doctest文档测试-3"><a class="anchor" href="#doctest文档测试-3">#</a> doctest 文档测试</h2><h2 id="ospath文件路径-3"><a class="anchor" href="#ospath文件路径-3">#</a> os.path 文件路径</h2><h2 id="pickle序列化-3"><a class="anchor" href="#pickle序列化-3">#</a> pickle 序列化</h2><h2 id="json-3"><a class="anchor" href="#json-3">#</a> json</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Django详细介绍todolist实例</title>
      <link href="computer-science/python/django/course-1/Django%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8Dtodolist%E5%AE%9E%E4%BE%8B/"/>
      <url>computer-science/python/django/course-1/Django%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8Dtodolist%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="开发环境"><a class="anchor" href="#开发环境">#</a> 开发环境</h2><p>python3.7</p><p>django</p><p>win10（64 位）</p><h2 id="什么是框架"><a class="anchor" href="#什么是框架">#</a> 什么是框架</h2><p>通俗的说，框架是实现某种功能的半成品，提供了一些常用的工具类和一些基础通用化的组件，可以供开发人员在此基础上，更高效的满足各自的业务需求。</p><h2 id="为什么要使用框架"><a class="anchor" href="#为什么要使用框架">#</a> 为什么要使用框架</h2><p>一个优秀的的框架，它相当于是一个模板代码库，很多基础性的功能，底层功能操作都已经帮我们实现了，我们只需要专心的实现所需要的业务逻辑就可以了。这样，就大大提高了我们的开发效率，所以技术的发展，多数情况下是为了满足业务的需求。</p><p>简单，快捷，高效，响应，兼容</p><h2 id="什么是django"><a class="anchor" href="#什么是django">#</a> 什么是 django</h2><p>我们都知道，Django 是基于 Python 的 Web 开发框架。</p><p>百度百科介绍：</p><p>Django 是一个开放<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlQkElOTAlRTQlQkIlQTMlRTclQTAlODEvMzgxNDIxMw==">源代码</span>的<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9XZWIlRTUlQkElOTQlRTclOTQlQTglRTYlQTElODYlRTYlOUUlQjYvNDI2MjIzMw=="> Web 应用框架</span>，由<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9QeXRob24vNDA3MzEz"> Python</span> 写成。采用了 MTV 的框架模式，即模型 M，视图 V 和模版 T。它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的，即是 CMS（内容管理系统）软件。并于 2005 年 7 月在<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9CU0QlRTglQUUlQjglRTUlOEYlQUYlRTglQUYlODEvMTA2NDI0MTI="> BSD 许可证</span>下发布。</p><p>这套框架是以比利时的吉普赛<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclODglQjUlRTUlQTMlQUIlRTUlOTAlODklRTQlQkIlOTYvNDY5NjIwMQ==">爵士吉他</span>手 Django Reinhardt 来命名的。</p><p>有一家劳伦斯的出版社，说白了就想新浪。这种网站会涉及到什么问题呢我们来看一下：</p><p><img data-src="https://img-blog.csdnimg.cn/c05a55328e394c1da23a9a7f66787826.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>只需进行数据库替换，采用此模板样式不变，那网站的开发速率提高</p><h2 id="django目的和用途"><a class="anchor" href="#django目的和用途">#</a> django 目的和用途</h2><p>django 的主要目的是<strong>简便，快速</strong>的开发<strong>数据库驱动</strong>的网站，他强调代码复用。</p><p>多个组件看依方便的以 “插件” 形式服务整个框架</p><p><strong>所有的 web 框架的意义都在于：</strong></p><ol><li>搭建框架应用</li><li>免去不同 web 应用相同代码的部分重复编写，只需关心应用核心的业务实现</li></ol><p>}}}</p><p>}}}</p><h2 id="django的特点"><a class="anchor" href="#django的特点">#</a> django 的特点</h2><p>对比 Flask 框架，Django 原生提供了众多的功能组件，让开发更便捷</p><ol><li>提供项目工程管理的自动脚手工具（脚手架工具）</li><li>数据库 ORM 支持（对象关系映射）[外链图片转存失败，源站可能有防盗链机制，建议将图片保存下来直接上传 (img-GygyZD04-1632645131208)(assets/image-20210921214755-gc5rj3l.png)]【不会 sql 语句也可以实现】</li><li>模板【replace，可以通过变量将模板和数据打通。使用数据替换模板变量，达到动态展示效果】</li><li>表单【表单获取直接转化成对象处理】</li><li>admin 管理站点【自动生成后台】</li><li>文件管理</li><li>认证权限</li><li>session 机制</li><li>缓存</li></ol><p><img data-src="https://img-blog.csdnimg.cn/757319e9e9534c6fbb7fc517f248c1ea.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_13,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>如果 Django 类似于精装修的房子，自带豪华家具、非常齐全功能强大的家电，什么都有了，拎包入住即可，十分方便。重量级框架，快捷。</p><p><img data-src="https://img-blog.csdnimg.cn/5c06637e024842678528696dc46b3345.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_13,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>而 Flask 类似于毛坯房，自己想把房子装修成什么样自己找材料，买家具自己装。材料和家具种类非常丰富，并且都是现成免费的，直接拿过去用即可。轻量级，灵活。</p><h2 id="mvt设计模式"><a class="anchor" href="#mvt设计模式">#</a> MVT 设计模式</h2><p><img data-src="https://img-blog.csdnimg.cn/2fb652d4bc814b5789d1f1bd439f3de7.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_20,color_FFFFFF,t_70,g_se,x_16" alt=""></p><p>前端客户端发起请求，请求可能是用户点击浏览器发起的，app，ajax 请求或是爬虫程序，</p><p>服务器：接受和解析 http 请求报文，他的服务对象是 http 请求</p><p ”request_path“：request="">框架：后端服务框架，服务器解析成字典格式</p><p>视图：定义数据处理方法：index（）然后经处理完的结果变成响应对象，发送给服务器</p><p>中间层：装饰器</p><p>作用：在不添加源代码的情况下增加功能</p><p>#补充知识点#</p><p>((20210923102902-68l094i))</p><p>WSGI 只是一个<strong> PythonWeb 服务器网关接口协议</strong>，或者说是一份标准，用来描述 Server 与 Framework 之间的通信接口。</p><p>这样，一些符合 WSGI 标准的 Framework 如 Flask、Django、web.py 等等就可以与同样符合 WSGI 标准的 Server 库进行无缝对接。</p><p>只要你的 Framework 符合 WSGi 规范，那么在以后有了效率更高的 Server 的时候，你可以毫不费力地将代码迁移过去。</p><p>#场景 #：开发了几个应用后，发现每个应用都完成了从监听网络端口到建立连接、解析请求的参数、进行回应、发送 Response 数据包等等一系列的工作，每次都要在获取请求、解析请求、发送请求这些一成不变的步骤上花费大量时间，不如写个 Server 模块，把这些功能单独实现，以后再有新的需求，只需要考虑 Framework 部分即可，这样就可以避免 “重复造轮子” 了。当自己写好了一套 server 程序，隔壁老王听说你写了个 Server 程序很牛掰，想要借用一下你的代码。你本着开源精神将 Server 模块分享给他，可是，老王拿到代码一看就傻眼了 —— 天啊，你的 Server 部分的数据接口、函数调用方式和他自己写的 Framework 完全不搭，改动起来难度颇大，还不如自己再写一个 Server 来得方便。应该整一套接口规范出来，让老王在编写自己的 Framework 的时候就按照你设计的规范来写，这样写出来的程序才能够互相 “契合”，便于调试和使用。就是 WSGI（Python Web Server Gateway）</p><h3 id="mvc"><a class="anchor" href="#mvc">#</a> <strong>MVC</strong></h3><p>程序设计模式：MVC，核心思想 **：分工，解耦 **，让不同的代码块之间降低耦合，增强代码的可扩展性和可移植性，实现向后兼容<br><img data-src="https://img-blog.csdnimg.cn/a73b713de951442fba00f3e7b32906c7.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_17,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><strong>M</strong> 全拼为 Model，主要封装对数据库的访问，对数据库中<strong>数据进行增删改查</strong>操作</p><p><strong>V</strong> 全拼为 View，用于封装结果，<strong>生成页面展示的 html</strong></p><p><strong>C</strong> 全拼 Controller，用于接收请求，<strong>处理业务逻辑</strong>，与 Model 和 View 进行交互，返回结果</p><h3 id="mvt"><a class="anchor" href="#mvt">#</a> <strong>MVT</strong></h3><p>原理就是 mvc 不过自己将名字改了</p><p><img data-src="https://img-blog.csdnimg.cn/327ef1142afe453fbe8800ae1ab8d1bd.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_18,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><strong>M</strong> 全拼为 Model，与 MVC 中的<strong> M</strong> 功能相同，主要封装对数据库的访问，对数据库中<strong>数据进行增删改查</strong>操作</p><p><strong>V</strong> 全拼为 View，与 MVC 中的<strong> C</strong> 功能相同，用于接收请求，<strong>处理业务逻辑</strong>，与 Model 和 View 进行交互，返回结果</p><p><strong>T</strong> 全拼 Template，与 MVC 中的<strong> V</strong> 功能相同，用于封装结果，<strong>负责封装构造要返回的 htm</strong>l</p><p>((20210924115549-5h51jh6))</p><h2 id="虚拟环境"><a class="anchor" href="#虚拟环境">#</a> 虚拟环境</h2><h3 id="什么场景需要用虚拟环境"><a class="anchor" href="#什么场景需要用虚拟环境">#</a> 什么场景需要用虚拟环境</h3><p><img data-src="https://img-blog.csdnimg.cn/246673b637ec44fdb412970e4f387173.png" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/61c59d045ab1428baa225725f4a81d23.png" alt="在这里插入图片描述"></p><p>比如两个项目在并行，然后用到的 python 和 django 版本不一样</p><p>解释器一样包都可能不一样</p><h3 id="虚拟环境效果"><a class="anchor" href="#虚拟环境效果">#</a> 虚拟环境效果</h3><p>[ <img data-src="https://img-blog.csdnimg.cn/4071780b82744bf1ac2f342e6d32517b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_18,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>((20210923111014-udk4aum))</p><h1 id="实战"><a class="anchor" href="#实战">#</a> 实战</h1><h2 id="搭建环境"><a class="anchor" href="#搭建环境">#</a> 搭建环境</h2><p>默认会下载最新版本</p><p><code>pip install django</code> <br><img data-src="https://img-blog.csdnimg.cn/be491549204b49389d43e65bd6feee63.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_19,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="创建工程"><a class="anchor" href="#创建工程">#</a> 创建工程</h2><p>进入<strong>想要创建的项目目录</strong>下</p><p><img data-src="https://img-blog.csdnimg.cn/5d6b11a591e64531bd88e10428da796f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_12,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>再命令行中输入</p><p><code>django-admin startproject todo</code></p><p><img data-src="https://img-blog.csdnimg.cn/79c5201413144fcaa2111b728ffe957d.png" alt=""></p><p>查看文件</p><p><img data-src="https://img-blog.csdnimg.cn/33b77bcecfe44e7994b73c5e160797bc.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_9,color_FFFFFF,t_70,g_se,x_16" alt=" "></p><p>采用 pycharm 打开项目</p><p>然后进入项目中</p><p><code>cd todo</code></p><p><img data-src="https://img-blog.csdnimg.cn/a8f201c1ccd84932937b953ae45a42c8.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_17,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>尝试启动服务器</p><p>在开发阶段，未来能够快速预览到开发效果<br> django 提供了一个纯 python 编写的轻量级 web 服务器，仅在开发阶段使用。</p><p><code> python manage.py runserver</code></p><p><img data-src="https://img-blog.csdnimg.cn/b46ee99650114e10a5c009e4b629e43a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_18,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><img data-src="https://img-blog.csdnimg.cn/fea8ecb71797494388a82374415be90c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>这样这是成功</p><p><code> python manage.py migrate</code></p><p><img data-src="https://img-blog.csdnimg.cn/d5f9a09d1695496abe4426475c2a1e46.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_18,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="创建管理员账号"><a class="anchor" href="#创建管理员账号">#</a> 创建管理员账号</h2><p><code>python manage.py createsuperuser</code></p><p><img data-src="https://img-blog.csdnimg.cn/e71995c4f6ae4aa082b7cae285e6abe4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>重新启动服务器：</p><p><img data-src="https://img-blog.csdnimg.cn/8763318a678c4f2ca0bde9a353dd45ab.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>登陆刚注册号的账号密码</p><p>进入数据管理页面 <span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo4MDAwL2FkbWlu">http://localhost:8000/admin</span></p><p><img data-src="https://img-blog.csdnimg.cn/6ac41ecab9494bc6913c0413faef1536.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>终止服务器， <code>Ctrl+C</code></p><h2 id="创建子应用"><a class="anchor" href="#创建子应用">#</a> 创建子应用</h2><p><code> python manage.py startapp tasks</code></p><p><img data-src="https://img-blog.csdnimg.cn/8716443073e74fb69c461122a65fb827.png" alt="在这里插入图片描述"></p><p>查看目录中的结构</p><p><img data-src="https://img-blog.csdnimg.cn/9893fc6b9b364286a31e1fac81a8ee97.png" alt="在这里插入图片描述"></p><h2 id="配置app路径"><a class="anchor" href="#配置app路径">#</a> 配置 app 路径</h2><p>然计算机找到创建的 app</p><p>在添加</p><pre><code class="language-、">'tasks'</code></pre><p>查找定位到 app 的路径</p><p><img data-src="https://img-blog.csdnimg.cn/6e1517522c4347709927b6fa6cf2a83e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>跟项目路径：</p><p>之前 django2.x</p><pre><code class="language-、">BASE_DIR =as.path.dirname(os.path.dirname(os.path.abspath(__file__)))</code></pre><p>引入 path 之后</p><pre><code>BASE_DIR = Path(__file__).resolve().parent.parent</code></pre><p>C:\Users\yangs\Desktop\ 新建文件夹 \todo\todo\<span class="exturl" data-url="aHR0cDovL3NldHRpbmdzLnB5">settings.py</span></p><h2 id="创建视图函数"><a class="anchor" href="#创建视图函数">#</a> 创建视图函数</h2><p>再 app tasks 中创建视图函数 view index</p><pre><code>from django.shortcuts import render from django.http import    HttpResponse ## Create your views here. def index(request):       return HttpResponse('hello djangho')</code></pre><p><img data-src="https://img-blog.csdnimg.cn/515b6f25f89d442cac395ea3c46de68e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="创建urls路由"><a class="anchor" href="#创建urls路由">#</a> 创建 urls 路由</h2><p><img data-src="https://img-blog.csdnimg.cn/8058ae65f1674bc6800e422b18d878ca.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="配置项目urls"><a class="anchor" href="#配置项目urls">#</a> 配置项目 urls</h2><p><img data-src="https://img-blog.csdnimg.cn/2098c7e745784e928ce10d95c3608ea8.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><pre><code>"""todo URL Configuration  The `urlpatterns` list routes URLs to views. For more information please see:     https://docs.djangoproject.com/en/3.2/topics/http/urls/ Examples: Function views  1. Add an import:  from my_app import views   2. Add a URL to urlpatterns:  path('', views.home, name='home') Class-based views  1. Add an import:  from other_app.views import Home   2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home') Including another URLconf   1. Import the include() function: from django.urls import include, path   2. Add a URL to urlpatterns:  path('blog/', include('blog.urls')) """ from django.contrib import admin from django.urls import path,include  urlpatterns = [path('admin/', admin.site.urls),   path('',include('tasks.urls')) ]</code></pre><h2 id="重启服务器"><a class="anchor" href="#重启服务器">#</a> 重启服务器</h2><p>重新启动服务器  <code> python manage.py runserver</code></p><p><img data-src="https://img-blog.csdnimg.cn/e338878352404f65b447d5cf5ec3b627.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_17,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="创建模板"><a class="anchor" href="#创建模板">#</a> 创建模板</h2><p>创建文件夹 templates 中再创建 tasks 文件夹中创建 list.html</p><p>[外链图片转存失败，源站可能有防盗链机制，建议将图片保存下来直接上传 (img-Yhxl9wbo-1632645131300)(assets/clipboard-20210921230301-1lv02wo-20210924095934-379n9oy.png)]</p><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>TODO<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span></pre></td></tr></tbody></table></figure><h2 id="修改视图"><a class="anchor" href="#修改视图">#</a> 修改视图</h2><p>修改 app tasks 中的 views</p><p><img data-src="https://img-blog.csdnimg.cn/fbafdc78d7664bdc91d7a9bcb09ecc50.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><pre><code>from django.shortcuts import renderfrom django.http import    HttpResponse# Create your views here.def index(request):    return render(request,'tasks/list.html')</code></pre><p>此时出现</p><p><img data-src="https://img-blog.csdnimg.cn/f552b6c933154fa497ca5edda577e676.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>别着急看看错误提示</p><h2 id="配置模板默认路径"><a class="anchor" href="#配置模板默认路径">#</a> 配置模板默认路径</h2><p>显示找不到 list.html 文件，所以我们将从配置 setting 中设置</p><p><img data-src="https://img-blog.csdnimg.cn/d8ade6c117db426dac71a67fd7d2d6e4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_19,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><pre><code>"""Django settings for todo project.Generated by 'django-admin startproject' using Django 3.2.6.For more information on this file, seehttps://docs.djangoproject.com/en/3.2/topics/settings/For the full list of settings and their values, seehttps://docs.djangoproject.com/en/3.2/ref/settings/"""import osfrom pathlib import Path# Build paths inside the project like this: BASE_DIR / 'subdir'.BASE_DIR = Path(__file__).resolve().parent.parent# Quick-start development settings - unsuitable for production# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/# SECURITY WARNING: keep the secret key used in production secret!SECRET_KEY = 'django-insecure-+(9j8^8xt6(5aa79o^bp8g8#t#lpuif3u424yx55bz=yrk@)d%'# SECURITY WARNING: don't run with debug turned on in production!DEBUG = TrueALLOWED_HOSTS = []# Application definitionINSTALLED_APPS = [    'django.contrib.admin',    'django.contrib.auth',    'django.contrib.contenttypes',    'django.contrib.sessions',    'django.contrib.messages',    'django.contrib.staticfiles',    'tasks',]MIDDLEWARE = [    'django.middleware.security.SecurityMiddleware',    'django.contrib.sessions.middleware.SessionMiddleware',    'django.middleware.common.CommonMiddleware',    'django.middleware.csrf.CsrfViewMiddleware',    'django.contrib.auth.middleware.AuthenticationMiddleware',    'django.contrib.messages.middleware.MessageMiddleware',    'django.middleware.clickjacking.XFrameOptionsMiddleware',]ROOT_URLCONF = 'todo.urls'TEMPLATES = [    {        'BACKEND': 'django.template.backends.django.DjangoTemplates',        'DIRS': [os.path.join(BASE_DIR, 'templates')], #连接成模板目录        'APP_DIRS': True,        'OPTIONS': {            'context_processors': [                'django.template.context_processors.debug',                'django.template.context_processors.request',                'django.contrib.auth.context_processors.auth',                'django.contrib.messages.context_processors.messages',            ],        },    },]WSGI_APPLICATION = 'todo.wsgi.application'# Database# https://docs.djangoproject.com/en/3.2/ref/settings/#databasesDATABASES = {    'default': {        'ENGINE': 'django.db.backends.sqlite3',        'NAME': BASE_DIR / 'db.sqlite3',    }}# Password validation# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validatorsAUTH_PASSWORD_VALIDATORS = [    {        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',    },    {        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',    },    {        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',    },    {        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',    },]# Internationalization# https://docs.djangoproject.com/en/3.2/topics/i18n/LANGUAGE_CODE = 'en-us'TIME_ZONE = 'UTC'USE_I18N = TrueUSE_L10N = TrueUSE_TZ = True# Static files (CSS, JavaScript, Images)# https://docs.djangoproject.com/en/3.2/howto/static-files/STATIC_URL = '/static/'# Default primary key field type# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-fieldDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'</code></pre><p>此时刷新一下：</p><p><img data-src="https://img-blog.csdnimg.cn/94a972ec67a5460fbb958d1565528f10.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_16,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="创建模型"><a class="anchor" href="#创建模型">#</a> 创建模型</h2><p>之后我们来创建 model 文件</p><p><img data-src="https://img-blog.csdnimg.cn/9d5c4dc54f3e46ddae7b54afc6b211da.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><pre><code>from django.db import models# Create your models here.class Task(models.Model):    title=models.CharField(max_length=200)    complete=models.BooleanField(default=False)    create=models.DateTimeField(auto_now_add=True)    def __str__(self):        return self.title</code></pre><p>再命令行中输入：</p><h2 id="更新数据库"><a class="anchor" href="#更新数据库">#</a> 更新数据库</h2><p>python <span class="exturl" data-url="aHR0cDovL21hbmFnZS5weQ==">manage.py</span> makemigrations</p><p><img data-src="https://img-blog.csdnimg.cn/c44e88709d274af1a8831890b80809c0.png" alt="在这里插入图片描述"></p><p>python <span class="exturl" data-url="aHR0cDovL21hbmFnZS5weQ==">manage.py</span> migrate</p><p><img data-src="https://img-blog.csdnimg.cn/db4bccd56562420c813c8bcfeccfa59b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_19,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>将数据库进行更新</p><h2 id="启动服务器"><a class="anchor" href="#启动服务器">#</a> 启动服务器：</h2><p>python <span class="exturl" data-url="aHR0cDovL21hbmFnZS5weQ==">manage.py</span> runserver</p><p><img data-src="https://img-blog.csdnimg.cn/305b61c394204d74a168fc5918e91543.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_19,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>访问 8000:/admin</p><p><img data-src="https://img-blog.csdnimg.cn/01fe157ce7d74a23b6f1a1941909257a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_20,color_FFFFFF,t_70,g_se,x_16" alt="<span data-type=">[外链图片转存失败，源站可能有防盗链机制，建议将图片保存下来直接上传 (img-KLguiQfn-1632645131322)(assets/clipboard-20210921230301-svzfg5q-20210924095934-vw2uo7h.png)]" /&gt;</p><p>没有发现新建的 model</p><h2 id="用户和model进行关联"><a class="anchor" href="#用户和model进行关联">#</a> 用户和 model 进行关联</h2><p>需要将用户和 model 进行关联</p><p>在 app tasks 中 admin 中</p><p><img data-src="https://img-blog.csdnimg.cn/497a47161e8843a593304e2cf913a9ad.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><pre><code>from django.contrib import adminfrom .models import *# Register your models here.admin.site.register(Task)</code></pre><p>重新刷新页面 <img data-src="https://img-blog.csdnimg.cn/a31bad1777e243c7a863dddba34617f3.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>其中新创建的模块</p><h2 id="添加数据库数据"><a class="anchor" href="#添加数据库数据">#</a> 添加数据库数据</h2><p>添加数据并在数据库中查看数据：</p><p><img data-src="https://img-blog.csdnimg.cn/1de7e6a02d1a408b9f539fa45434de63.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_19,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>&lt;br /&gt;</p><p><img data-src="https://img-blog.csdnimg.cn/00154d7c0c714d40972aad77605565da.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>现在我们想要将数据库中的数据显示在 views 中</p><p>将 models 中映射的数据放在 view 中展示出来</p><h2 id="展示数据"><a class="anchor" href="#展示数据">#</a> 展示数据</h2><p><img data-src="https://img-blog.csdnimg.cn/abfc94f318f14fb4b3383dbff559b9c3.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="修改view"><a class="anchor" href="#修改view">#</a> 修改 view</h3><p>在 app tasks 中 view 修改</p><pre><code>from django.shortcuts import renderfrom django.http import    HttpResponsefrom .models import *# Create your views here.def index(request):    tasks=Task.objects.all()    context={'tasks',tasks}    return render(request,'tasks/list.html',context)</code></pre><h3 id="修改html"><a class="anchor" href="#修改html">#</a> 修改 html</h3><p>将数据传入模板当中</p><p>list.html</p><p><img data-src="https://img-blog.csdnimg.cn/dc5d97b9d81b49058789cd34ac5c0a05.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>TO DO<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment"></span></pre></td></tr></tbody></table></figure><p>在 app tasks 中创建 form 文件</p><h3 id="创建form"><a class="anchor" href="#创建form">#</a> 创建 form</h3><pre><code>from django import formsfrom django.forms import ModelFormfrom .models import *class TaskForm(forms.ModelForm):    class Meta:        model=Task        fields='__all__'</code></pre><p><img data-src="https://img-blog.csdnimg.cn/f33ff9da2cdf4856a874e091eb29ea2d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="修改view-2"><a class="anchor" href="#修改view-2">#</a> 修改 view</h3><p>在 view 中更改：</p><pre><code>from django.shortcuts import renderfrom django.http import    HttpResponsefrom .models import *from .forms import *# Create your views here.def index(request):    tasks=Task.objects.all()    form=TaskForm()    context={'tasks':tasks,'form':form}    return render(request,'tasks/list.html',context)</code></pre><p>&lt;br /&gt;</p><p><img data-src="https://img-blog.csdnimg.cn/47aefcae44c847eb965b469acb91a7e3.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="更改模板文件"><a class="anchor" href="#更改模板文件">#</a> 更改模板文件：</h3><pre><code>&lt;h3&gt;TO DO&lt;/h3&gt;&lt;form&gt;    {{form}}    &lt;input type="submit" name="create Task"&gt;&lt;/form&gt;{% for task in tasks %}<p>{{task.title}}</p>{% endfor %}</code></pre><p><img data-src="https://img-blog.csdnimg.cn/ff397403c7e34dc4bd6022890b1703d4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>查看页面：</p><p><img data-src="https://img-blog.csdnimg.cn/ad8bb0edb98e4963a7d7f3e45bcfbf1a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_16,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="添加数据"><a class="anchor" href="#添加数据">#</a> 添加数据</h2><h3 id="修改模板html页面"><a class="anchor" href="#修改模板html页面">#</a> 修改模板 html 页面：</h3><pre><code>&lt;h3&gt;TO DO&lt;/h3&gt;&lt;form method="POST" action="/"&gt;    {{form}}    &lt;input type="submit" name="create Task"&gt;&lt;/form&gt;{% for task in tasks %}<p>{{task.title}}</p>{% endfor %}</code></pre><p>&lt;br /&gt;</p><p><img data-src="https://img-blog.csdnimg.cn/56925a483e6d41b791553d3d59bf2ae2.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>&lt;br /&gt;</p><p><img data-src="https://img-blog.csdnimg.cn/14e11bc7a06342dabb153b71940adc9d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><pre><code>from django.shortcuts import render,redirectfrom django.http import    HttpResponsefrom .models import *from .forms import *# Create your views here.def index(request):    tasks=Task.objects.all()    form=TaskForm()    if request.method=='POST':        form=TaskForm(request.POST)        if form.is_valid():            form.save()        return redirect('/')    context={'tasks':tasks,'form':form}    return render(request,'tasks/list.html',context)</code></pre><p>启动发现：</p><p>输入数据点击提交</p><p><img data-src="https://img-blog.csdnimg.cn/53553f3f7f0949c39f5f2c54cbb39232.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_19,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>此时我们设置一下 list,html</p><h3 id="修改html-2"><a class="anchor" href="#修改html-2">#</a> 修改 html</h3><pre><code>&lt;h3&gt;TO DO&lt;/h3&gt;&lt;form method="POST" action="/"&gt;    #csrf_token  #数据发送django自带保护机制    {{form}}    &lt;input type="submit" name="create Task"&gt;&lt;/form&gt;{% for task in tasks %}<p>{{task.title}}</p>{% endfor %}</code></pre><p><img data-src="https://img-blog.csdnimg.cn/2ae75fcef9bf4772ba03bcd79809a260.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>在页面上测试添加</p><p><img data-src="https://img-blog.csdnimg.cn/a7d5216c120142898778d82a89d64c62.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_16,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>成功，现在我们来编写</p><h2 id="修改页面"><a class="anchor" href="#修改页面">#</a> 修改页面</h2><p>先在模板下创建 update_task.html 页面</p><h3 id="修改html-3"><a class="anchor" href="#修改html-3">#</a> 修改 html</h3><p><img data-src="https://img-blog.csdnimg.cn/be2db14b4a5d40c99ae5743b66b4a2f3.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><pre><code>&lt;h3&gt;Update Task&lt;/h3&gt;&lt;form&gt;    &lt;input type="submit" name="Update Task"&gt;&lt;/form&gt;</code></pre><h3 id="修改view-3"><a class="anchor" href="#修改view-3">#</a> 修改 view</h3><p>在 views 页面中进行修改：</p><p><img data-src="https://img-blog.csdnimg.cn/3c61cee232a8445ca413c0bc5fbdffc4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><pre><code>from django.shortcuts import render,redirectfrom django.http import    HttpResponsefrom .models import *from .forms import *# Create your views here.def index(request):    tasks=Task.objects.all()    form=TaskForm()    if request.method=='POST':        form=TaskForm(request.POST)        if form.is_valid():            form.save()        return redirect('/')    context={'tasks':tasks,'form':form}    return render(request,'tasks/list.html',context)def updateTask(request,pk):    task=Task.objects.all(id=pk)    return render(request,'tasks/update_task.html')</code></pre><p>&lt;br /&gt;</p><p><img data-src="https://img-blog.csdnimg.cn/c5a48a4282a9490f902f48528bef972a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="修改url"><a class="anchor" href="#修改url">#</a> 修改 url</h3><p>修改 app task 中的 urls</p><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>from django.urls import path</pre></td></tr><tr><td data-num="2"></td><td><pre>from . import views</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>app_name = 'tasks'</pre></td></tr><tr><td data-num="5"></td><td><pre>urlpatterns = [</pre></td></tr><tr><td data-num="6"></td><td><pre>    path('', views.index, name='list'),</pre></td></tr><tr><td data-num="7"></td><td><pre>    path('update_task/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">str:</span>pk</span><span class="token punctuation">&gt;</span></span>',views.updateTask,name='update_task'),</pre></td></tr><tr><td data-num="8"></td><td><pre>]</pre></td></tr></tbody></table></figure><p><img data-src="https://img-blog.csdnimg.cn/1e7c6195ce054c7fadc1c39b45092167.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><img data-src="https://img-blog.csdnimg.cn/849a9c84760c4754b44ef7bdf0be220b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_17,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><img data-src="https://img-blog.csdnimg.cn/a98842752aaf4568a25c06ee15b92a60.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_20,color_FFFFFF,t_70,g_se,x_16" alt="这里插入图片"></p><p>接着我们需要在修改页面写入响应的数据和输入框</p><p><img data-src="https://img-blog.csdnimg.cn/e8dc00773f9747cea7b9488478b1076c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><pre><code>from django.shortcuts import render,redirectfrom django.http import    HttpResponsefrom .models import *from .forms import *# Create your views here.def index(request):    tasks=Task.objects.all()    form=TaskForm()    if request.method=='POST':        form=TaskForm(request.POST)        if form.is_valid():            form.save()        return redirect('/')    context={'tasks':tasks,'form':form}    return render(request,'tasks/list.html',context)def updateTask(request,pk):    task=Task.objects.get(id=pk)    form=TaskForm(instance=task)    context={'form':form}    return render(request,'tasks/update_task.html',context=context)</code></pre><h3 id="修改html-4"><a class="anchor" href="#修改html-4">#</a> 修改 html</h3><p>修改模板 update_task 页面：</p><p><img data-src="https://img-blog.csdnimg.cn/bd6a63b2256a46e4b825b76b63d4e379.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>Update Task<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span></pre></td></tr><tr><td data-num="3"></td><td><pre>  </pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment"></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Update Task<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span></pre></td></tr></tbody></table></figure><p>页面显示<br><img data-src="https://img-blog.csdnimg.cn/ca13287a29a44109a081852081ae0180.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_19,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>&lt;br /&gt;</p><p><img data-src="https://img-blog.csdnimg.cn/fb497bd0b1094c45a0c657ea8c7bb1cd.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_17,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>这里只是显示出来还不能修改</p><p>修改页面</p><p><img data-src="https://img-blog.csdnimg.cn/1b53e85217b3439a80dddf58d2620cff.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><pre><code>&lt;h3&gt;Update Task&lt;/h3&gt;&lt;form method="post" action=""&gt;       {{form}}    &lt;input type="submit" name="Update Task"&gt;&lt;/form&gt;</code></pre><h3 id="修改view文件"><a class="anchor" href="#修改view文件">#</a> <strong>修改 view 文件：</strong></h3><p><img data-src="https://img-blog.csdnimg.cn/8c801893c4004ce8bb6949f76bf1f1b3.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><pre><code>from django.shortcuts import render,redirectfrom django.http import    HttpResponsefrom .models import *from .forms import *# Create your views here.def index(request):    tasks=Task.objects.all()    form=TaskForm()    if request.method=='POST':        form=TaskForm(request.POST)        if form.is_valid():            form.save()        return redirect('/')    context={'tasks':tasks,'form':form}    return render(request,'tasks/list.html',context)def updateTask(request,pk):    task=Task.objects.get(id=pk)    form=TaskForm(instance=task)    if request.method=='POST':        form = TaskForm(request.POST, instance=task)        if form.is_valid():            form.save()            return redirect('/')    context={'form':form}    return render(request,'tasks/update_task.html',context=context)</code></pre><p><code>&lt;br /&gt;</code>  <img data-src="https://img-blog.csdnimg.cn/b31e74e28bb64627ae8b602a72440052.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_17,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>修改功能实现</p><h2 id="删除功能"><a class="anchor" href="#删除功能">#</a> 删除功能</h2><p>开始删除功能</p><h3 id="新建html"><a class="anchor" href="#新建html">#</a> 新建 html</h3><p><img data-src="https://img-blog.csdnimg.cn/611c026fd0a44cd4ab67cf0b41f43ce5.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>创建删除模板</p><pre><code>&lt;p&gt;Are you sure want to delete "{{item}}" ?&lt;/p&gt;&lt;a href="`{% url 'tasks:list'%}`"&gt;Cancel&lt;/a&gt;</code></pre><h3 id="修改views"><a class="anchor" href="#修改views">#</a> 修改 views</h3><pre><code>from django.shortcuts import render,redirectfrom django.http import    HttpResponsefrom .models import *from .forms import *#Create your views here.def index(request):    tasks=Task.objects.all()    form=TaskForm()    if request.method=='POST':        form=TaskForm(request.POST)        if form.is_valid():            form.save()        return redirect('/')    context={'tasks':tasks,'form':form}    return render(request,'tasks/list.html',context)def updateTask(request,pk):    task=Task.objects.get(id=pk)    form=TaskForm(instance=task)    if request.method=='POST':        form = TaskForm(request.POST, instance=task)        if form.is_valid():            form.save()            return redirect('/')    context={'form':form}    return render(request,'tasks/update_task.html',context=context)def deleteTask(request,pk):    return render(request,'tasks/delete.html')</code></pre><p><img data-src="https://img-blog.csdnimg.cn/b7b56309767749a3863e9bc333a5b42b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="修改url文件"><a class="anchor" href="#修改url文件">#</a> 修改 url 文件</h3><p><img data-src="https://img-blog.csdnimg.cn/c763e1af2ab34a71b332ec5842c54ea3.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><pre><code>from django.urls import pathfrom . import viewsapp_name = 'tasks'urlpatterns = [    path('', views.index, name='list'),    path('update_task/&lt;str:pk&gt;',views.updateTask,name='update_task'),    path('delete/&lt;str:pk&gt;', views.deleteTask, name='delete_task'),]</code></pre><h3 id="再次修改view文件"><a class="anchor" href="#再次修改view文件">#</a> 再次修改 view 文件</h3><pre><code>from django.shortcuts import render,redirectfrom django.http import    HttpResponsefrom .models import *from .forms import *Create your views here.def index(request):    tasks=Task.objects.all()    form=TaskForm()    if request.method=='POST':        form=TaskForm(request.POST)        if form.is_valid():            form.save()        return redirect('/')    context={'tasks':tasks,'form':form}    return render(request,'tasks/list.html',context)def updateTask(request,pk):    task=Task.objects.get(id=pk)    form=TaskForm(instance=task)    if request.method=='POST':        form = TaskForm(request.POST, instance=task)        if form.is_valid():            form.save()            return redirect('/')    context={'form':form}    return render(request,'tasks/update_task.html',context=context)def deleteTask(request,pk):    item=Task.objects.get(id=pk)    context={'item':item}    return render(request,'tasks/delete.html',context)&lt;br /&gt;</code></pre><h3 id="查看页面"><a class="anchor" href="#查看页面">#</a> 查看页面</h3><p><img data-src="https://img-blog.csdnimg.cn/0d2799bebe374092811a0264cdd42b0d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_16,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>&lt;br /&gt;</p><h3 id="修改html删除页面"><a class="anchor" href="#修改html删除页面">#</a> 修改 html 删除页面</h3><pre><code>&lt;p&gt;Are you sure want to delete "{{item}}" ?&lt;/p&gt;&lt;a href="`{% url 'tasks:list' %}`"&gt;Cancel&lt;/a&gt;&lt;form method="POST" action=""&gt;      &lt;input type="submit" name="Confirm"&gt;&lt;/form&gt;</code></pre><p>&lt;br /&gt;</p><p><img data-src="https://img-blog.csdnimg.cn/25e741dd87b64a809b914e04732840a0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>页面展示</p><p><img data-src="https://img-blog.csdnimg.cn/bf97e14b2c5544ff8493b1ee4a01a781.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_17,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="修改views文件"><a class="anchor" href="#修改views文件">#</a> 修改 views 文件</h3><pre><code>from django.shortcuts import render,redirectfrom django.http import    HttpResponsefrom .models import *from .forms import *# Create your views here.def index(request):    tasks=Task.objects.all()    form=TaskForm()    if request.method=='POST':        form=TaskForm(request.POST)        if form.is_valid():            form.save()        return redirect('/')    context={'tasks':tasks,'form':form}    return render(request,'tasks/list.html',context)def updateTask(request,pk):    task=Task.objects.get(id=pk)    form=TaskForm(instance=task)    if request.method=='POST':        form = TaskForm(request.POST, instance=task)        if form.is_valid():            form.save()            return redirect('/')    context={'form':form}    return render(request,'tasks/update_task.html',context=context)def deleteTask(request,pk):    item=Task.objects.get(id=pk)    if request.method=='POST':        item.delete()        return redirect('/')    context={'item':item}    return render(request,'tasks/delete.html',context=context)</code></pre><p><img data-src="https://img-blog.csdnimg.cn/44dc60890efd44289014cf5c4c9459f8.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>页面展示可以成功删除：<br><img data-src="https://img-blog.csdnimg.cn/f7b1dc88b9b1425997b76f6bb206687a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_16,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="修改一下list的html页面"><a class="anchor" href="#修改一下list的html页面">#</a> 修改一下 list 的 html 页面：</h2><pre><code>&lt;h3&gt;TO DO&lt;/h3&gt;&lt;form method="POST" action="/"&gt;      {{form}}    &lt;input type="submit" name="create Task"&gt;&lt;/form&gt;`{% for task in tasks %}`<div>    <a href="{% url 'tasks:update_task' task.id %}">Update</a>    <a href="{% url 'tasks:delete' task.id %}">Delete</a>    {% if 'task.complete==True' %}    <strike>{{task}}</strike>    {% else %}    <span>{{task}}</span>    {% endif %}</div>`{% endfor %}`</code></pre><p><img data-src="https://img-blog.csdnimg.cn/d7b27def3b24469ba1624d6c1886a74c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="完成的项目-在这里插入图片描述"><a class="anchor" href="#完成的项目-在这里插入图片描述">#</a> 完成的项目 <img data-src="https://img-blog.csdnimg.cn/10ced2fbc2cd443195c2cbd5d42f33e4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_17,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></h2><p><code>&lt;br /&gt;</code>  <img data-src="https://img-blog.csdnimg.cn/8656b5cc13eb4b5fbb5773512ddfc2f4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_19,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>&lt;br /&gt;</p><p><img data-src="https://img-blog.csdnimg.cn/810cc0c5287740b5a8c6c0d4dd6baaa8.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_14,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>最终效果</p><p><img data-src="https://img-blog.csdnimg.cn/3bb4f446140449e4b58b81942509e2d0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ0MDU0NzU2,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Python </category>
          
          <category> Django框架 </category>
          
          <category> 零基础学Django框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>看创业新闻感悟</title>
      <link href="records/live-record/new-idea/%E7%9C%8B%E5%88%9B%E4%B8%9A%E6%96%B0%E9%97%BB%E6%84%9F%E6%82%9F/"/>
      <url>records/live-record/new-idea/%E7%9C%8B%E5%88%9B%E4%B8%9A%E6%96%B0%E9%97%BB%E6%84%9F%E6%82%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="5g时代新生行业"><a class="anchor" href="#5g时代新生行业">#</a> 5g 时代新生行业；</h2><ol><li>5g 时代的到来必然会替代一些重复性的体力工作，但同时也会诞生出新的产业和工作。所以我们不用太过忧心工作问题。</li><li>而且 5g 发展是一个阶段性的发展，而不是突然人们就进入 5g 时代，需要过度时期。</li><li>5g 创业是一个较大的长期投资，相较于短期收益，5g 是一个比较砸钱的投资，需要长期投入资金而且短期内很难看到收益。投资有风险创业需谨慎。</li></ol><h2 id="ofo小黄车摩拜单车的转型"><a class="anchor" href="#ofo小黄车摩拜单车的转型">#</a> ofo 小黄车摩拜单车的转型</h2><p>在新闻中听说 ofo 单车欠缺资金链多年，但好像从未倒闭。甚至时至今日，还在去上班的路上发现。有小黄车，但相较于支付宝的用户小黄车的使用集群很少；听到 2018 年北京总部大楼已空空如也的小心我并不惊讶，让我仿佛想到了诺基亚的发展。想要独占市场，不想有第三方接入打兆品牌效应固然是没有问题，但支付宝的用户集群和快捷程度。作为一个用户打工人每天共享单车会选择哈罗单车</p><p>我认为导致 ofo 小黄车失败几点原因：</p><ol><li><p>时机；</p><p>2014 在刚开始创业时，正值创业大潮，4 个喜欢骑行的年轻人创建了 ofo，提出了” 只连接车，不生产车 “的理念。抓住这个时机很重要；但之后又有两个时间节点，一个是 2017 年初 ofo 和摩拜已经大规模在中国投入单车市场，ofo 还完成了 d 轮融资。此时资本想要将这两个市场巨头进行合并但 ofo 拒绝了；不敢保障对于这个确定是错误还是正确的，但对于企业是一个选择性的转机；还有一个节点是 2018 年在摩拜单车已经选择离开市场，行业出现大的变动，热钱不再涌入，带助力的小蓝车杀入市场。但 ofo 仍然想自己发展走出世界。这个决定可以用一意孤行形容了。</p></li><li><p><strong>创始人理想与投资人形成冲突</strong>；</p><p>2018 年有大量投资人进行谈判但创始人都认为还可以更好，长时间以往导致融资失败。</p></li><li><p>公关处理；</p><p>对于融资失败大量新闻出现，未及时处理公关事件，导致大量用户进行退款，这算是压死骆驼的最后一稻草。</p></li><li><p>用户意识；</p><p>刚兴起共享单车大潮时，大量用户的心理，出钱借用。出现大面积人为破坏的共享单车、将共享单车进行搬入家中以及后来共享单车出现在咸鱼市场上售卖等现象。这个时代环境所致人为不能变动。</p></li></ol><h2 id="脱发衍生出来的产业"><a class="anchor" href="#脱发衍生出来的产业">#</a> 脱发衍生出来的产业</h2><p>之前脱发行业大多用户均是 40 来岁的中年男性，近几年随着生活压力和年轻人熬夜，脱发产品的用户集群已经驱于年轻化。现有统计第一大用户集群仍然是中年男性，但位居第二居然是 90 后的年轻人，数据有点吓人。据统计 2014 年在脱发产品市场占比仅仅只有 0.07%，2017 年的时候已经到达了 12% 左右。可见市场用户的火热程度，平均中国 6 个人中就有一个有脱发症状。2020-2025 将是火速发展的几年。</p><p>脱发产业将衍生出来的几个新方向：</p><ol><li>脱发洗发水，洗发水中填入脱发字样的销量会比其他关键字的销量好很多；</li><li>生发产品的推出；</li><li>养发产品</li><li>假发产品</li><li>生发药物 - 医疗</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 心得记录 </category>
          
          <category> 生活记录 </category>
          
          <category> 新创意点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 创业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>看阮一峰博客的感悟</title>
      <link href="records/live-record/live-feel/%E7%9C%8B%E9%98%AE%E4%B8%80%E5%B3%B0%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%84%9F%E6%82%9F/"/>
      <url>records/live-record/live-feel/%E7%9C%8B%E9%98%AE%E4%B8%80%E5%B3%B0%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%84%9F%E6%82%9F/</url>
      
        <content type="html"><![CDATA[<p>偶然间发现</p><p>在学习 shell 编程中发现阮一峰老师的教程，看了一下他的网络日志。感受到震撼，一个经济专业的人居然对计算机的了解程度如此之深。而且每每读完他的文章都收获颇多，他的文章不会像纯技术文章一样，但是参杂着自己的见解。之下是几点我的收获感悟：</p><ol><li><p>坚持写博客；</p><p>阮一峰老师明确的说他写博客是为了自己，坚持写了 17 年上千片的文章。虽然有很多大牛动说要写博客，但真正做到并且坚持下去的人少之又少。虽然对于有些知识可能了解上有偏差导致网上人们对他褒贬不一。但他经过考证，有的坚持自己的见解有的虚心接收错误。但一直再坚持写作，曾在一遍文章中还写到一开始没想到会有那么多人看，坚持写作完全就是为了一方面让自己更有逻辑，文字表达更好一些另一方面为了学习的时候有产出有自己的思考。我也是所以之后很长一段时间我会坚持好好写博客的，没有必要强硬要求自己要每日一更但是学习后需要有产出。</p></li><li><p>原来成长都是探索的过程；</p><p>在如今教育大环境下，很多中国式教育出来的人才都会考试但对于深度思考很欠缺。我之前很长一段时间就是认为我是一个没有特别想法的人。总认为思维上的差异想要改变难于上青天，如今我已慢慢发现或是改变虽然没有精明思绪，但近几年我听到很多的是我觉得你是一个很有想法的人。未曾想到阮一峰先生这样的大牛人也曾说自己是一个没有想法的人，然后随着思考和阅读才慢慢建立起牛人思想。所以呀，我也在往这方面发展，因为始终相信思维决定一个人。</p></li><li><p>技术文章可以 “不那么技术”；</p><p>现在很多大佬的文章都很技术性，一句话让人思考半天。但阮一峰的文章采用了很多经济学思维。随心编写的文章也不错，没必要必须按照专业术语有时候增加自己的而一些看法，可以让自己思维更发散一些。</p></li><li><p>多看书；</p><p>这三个字应该是伴随着你的前半生，但做到的人并不多。看到阮一峰看过的书籍相当于一个小图书馆了。特别是国外的一些文献，我们不得不承认的是很多计算机技术国外发展更快速一些，之前一直觉得英语不好不喜欢阅读英文文献，但现在其实有很多中文翻译。应该好好利用网络资源阅读。这里的多看书不止是技术相关的书籍还有很多其他书籍。纵向发展是技术深度但纵观全局你会发现大佬不仅仅是纵向有深度，横向也有广度。除了技术很多方面金融，经济很多领域都有了解。</p></li><li><p>多多写出自己的想法；</p><p>这样也是锻炼自己想法的一个过程，一方面可以增强写作，一方面可以锻炼逻辑，还可以树立自己的想法。何乐而不为。</p></li><li><p>多看论文，期刊；</p><p>无论是国内还是国外，通过阮一峰老师打开了新大陆一样，看到了很多大佬的博客笔记。自己在有一些新想法的时候也会收集相关的论文进行学习。</p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 心得记录 </category>
          
          <category> 生活记录 </category>
          
          <category> 生活感悟 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>win10笔记本插上耳机没声音设置</title>
      <link href="computer/win/win10/win10%E7%AC%94%E8%AE%B0%E6%9C%AC%E6%8F%92%E4%B8%8A%E8%80%B3%E6%9C%BA%E6%B2%A1%E5%A3%B0%E9%9F%B3%E8%AE%BE%E7%BD%AE/"/>
      <url>computer/win/win10/win10%E7%AC%94%E8%AE%B0%E6%9C%AC%E6%8F%92%E4%B8%8A%E8%80%B3%E6%9C%BA%E6%B2%A1%E5%A3%B0%E9%9F%B3%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>win10 笔记本插上耳机没有声音<br></p><ul class="toc"><li><a href="#%E5%89%8D%E8%A8%80">前言</a></li><li><a href="#%E4%B8%80-%E7%A6%81%E7%94%A8%E6%8F%92%E5%AD%94%E8%AE%BE%E7%BD%AE">一、禁用插孔设置</a></li><li><a href="#%E4%BA%8C-%E6%A3%80%E6%9F%A5%E9%A9%B1%E5%8A%A8">二、检查驱动</a></li><li><a href="#%E4%B8%89-%E9%87%8D%E7%BD%AE%E6%89%AC%E5%A3%B0%E5%99%A8">三、重置扬声器</a></li></ul> (文章目录)<p></p><h1 id="前言"><a class="anchor" href="#前言">#</a> 前言</h1><h1 id="一-禁用插孔设置"><a class="anchor" href="#一-禁用插孔设置">#</a> 一、禁用插孔设置</h1><p>1<br> 点击电脑左下方的 “开始” 图标，找到 “控制面板” 选项进入。<br><img data-src="https://img-blog.csdnimg.cn/2021070312331380.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>2<br> 然后在控制面板的页面中找到 “硬件与声音”，点击进入。</p><p><img data-src="https://img-blog.csdnimg.cn/20210703123352619.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>3<br> 然后找到下方的 “Realtek 高清晰音频管理器”，点击进入。</p><p><img data-src="https://img-blog.csdnimg.cn/20210703123418333.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>4<br> 进入 Realtek 高清晰音频管理器界面后，点击禁用插孔设置的图标，如下图所示。<br><img data-src="https://img-blog.csdnimg.cn/20210703123455101.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>5<br> 勾选 “禁用前面板插孔检测”，点击确定。</p><p><img data-src="https://img-blog.csdnimg.cn/20210703123515258.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="二-检查驱动"><a class="anchor" href="#二-检查驱动">#</a> 二、检查驱动</h1><p>1<br> 找到电脑桌面上的” 计算机 “，单击鼠标右键，选择” 属性 “。<br><img data-src="https://img-blog.csdnimg.cn/20210703123837954.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>2<br> 然后在属性的页面中，选择 “设备管理器”，点击进入。<br><img data-src="https://img-blog.csdnimg.cn/20210703123907814.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>3<br> 检查音频驱动，点击下图中选中的部分，查看相应的驱动是否有感叹号之类的符号，如果有，重装驱动，然后重启。<br><img data-src="https://img-blog.csdnimg.cn/20210703123925542.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="三-重置扬声器"><a class="anchor" href="#三-重置扬声器">#</a> 三、重置扬声器</h1><p>1<br> 打开控制面板，找到 “硬件与声音”，点击进入。</p><p><img data-src="https://img-blog.csdnimg.cn/20210703123952116.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>2<br> 在硬件与声音的页面中，选择声音中的 “更改系统声音”。<br><img data-src="https://img-blog.csdnimg.cn/2021070312400934.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>3<br> 然后选择 “声音”，重新选择 “声音方案” 为 “windows 默认”，点击确定，然后重启电脑即可。</p><p><img data-src="https://img-blog.csdnimg.cn/20210703124025377.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 电脑 </category>
          
          <category> 电脑配置 </category>
          
          <category> win10 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>win10专业版激活</title>
      <link href="computer/win/win10/win10%E4%B8%93%E4%B8%9A%E7%89%88%E6%BF%80%E6%B4%BB/"/>
      <url>computer/win/win10/win10%E4%B8%93%E4%B8%9A%E7%89%88%E6%BF%80%E6%B4%BB/</url>
      
        <content type="html"><![CDATA[<p></p><ul class="toc"><li><a href="#%E5%89%8D%E8%A8%80">前言</a></li><li><a href="#%E4%B8%80-%E6%BF%80%E6%B4%BBwin10%E4%B8%93%E4%B8%9A%E7%89%88">一、激活win10专业版</a><ul><li><a href="#1%E6%BF%80%E6%B4%BB%E6%96%B9%E6%B3%95">1.激活方法</a><ul><li><a href="#win10%E4%B8%93%E4%B8%9A%E7%89%88%E7%94%A8%E6%88%B7%E8%AF%B7%E4%BE%9D%E6%AC%A1%E8%BE%93%E5%85%A5">win10专业版用户请依次输入：</a></li><li><a href="#win10%E4%BC%81%E4%B8%9A%E7%89%88%E7%94%A8%E6%88%B7%E8%AF%B7%E4%BE%9D%E6%AC%A1%E8%BE%93%E5%85%A5">win10企业版用户请依次输入：</a></li><li><a href="#win10%E5%AE%B6%E5%BA%AD%E7%89%88%E7%94%A8%E6%88%B7%E4%BE%9D%E6%AC%A1%E8%BE%93%E5%85%A5">win10家庭版用户依次输入：</a></li><li><a href="#%E4%B8%93%E4%B8%9A%E7%89%88%E9%87%87%E7%94%A8%E6%AD%A5%E9%AA%A4">专业版采用步骤：</a></li></ul></li></ul></li></ul>(文章目录)<p></p><h1 id="前言"><a class="anchor" href="#前言">#</a> 前言</h1><p>相关 win10 的一些常用操作</p><h1 id="一-激活win10专业版"><a class="anchor" href="#一-激活win10专业版">#</a> 一、激活 win10 专业版</h1><h2 id="1激活方法"><a class="anchor" href="#1激活方法">#</a> 1. 激活方法</h2><p>系统安装完毕后，首先以管理员身份打开 CMD 命令行窗口，按下 Win+X，选择命令提示符 (管理员)。<br>说明：kms.xspace.in 是 kms 服务器地址，可能会失效，如果激活失败，可以自行搜索 kms 服务器地址，将 kms.xspace.in 替换成新的地址即可，<span class="exturl" data-url="aHR0cDovL3huLS1rbXMtZW84ZXIxOWE2MmJtNnouMDNrLm9yZw==">比如换成 kms.03k.org</span>，参考可用的 kms 激活服务器有哪些</p><h3 id="win10专业版用户请依次输入"><a class="anchor" href="#win10专业版用户请依次输入">#</a> win10 专业版用户请依次输入：</h3><p>1 打开 cmd</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>slmgr /ipk W269N-WFGWX-YVC9B-4J6C9-T83GX</pre></td></tr></tbody></table></figure><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>slmgr /skms kms.03k.org</pre></td></tr></tbody></table></figure><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>slmgr /ato</pre></td></tr></tbody></table></figure><h3 id="win10企业版用户请依次输入"><a class="anchor" href="#win10企业版用户请依次输入">#</a> win10 企业版用户请依次输入：</h3><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>slmgr /ipk NPPR9-FWDCX-D2C8J-H872K-2YT43</pre></td></tr></tbody></table></figure><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>slmgr /skms kms.03k.org</pre></td></tr></tbody></table></figure><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>slmgr /ato</pre></td></tr></tbody></table></figure><h3 id="win10家庭版用户依次输入"><a class="anchor" href="#win10家庭版用户依次输入">#</a> win10 家庭版用户依次输入：</h3><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>slmgr /ipk TX9XD-98N7V-6WMQ6-BX7FG-H8Q99</pre></td></tr></tbody></table></figure><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>slmgr /skms kms.03k.org</pre></td></tr></tbody></table></figure><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>slmgr /ato</pre></td></tr></tbody></table></figure><h3 id="专业版采用步骤"><a class="anchor" href="#专业版采用步骤">#</a> 专业版采用步骤：</h3><p><img data-src="https://img-blog.csdnimg.cn/20210703115807540.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img data-src="https://img-blog.csdnimg.cn/20210703115826577.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img data-src="https://img-blog.csdnimg.cn/20210703115844344.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img data-src="https://img-blog.csdnimg.cn/20210703115903593.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20210703115921220.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img data-src="https://img-blog.csdnimg.cn/20210703115933541.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 电脑 </category>
          
          <category> 电脑配置 </category>
          
          <category> win10 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>01钉钉小程序</title>
      <link href="computer-science/DDapp/ddapp-study1/01%E9%92%89%E9%92%89%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
      <url>computer-science/DDapp/ddapp-study1/01%E9%92%89%E9%92%89%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="钉钉小程序学习记录"><a class="anchor" href="#钉钉小程序学习记录">#</a> 钉钉小程序学习记录</h1><p>学习记录</p><p></p><ul class="toc"><li><a href="#%E9%92%89%E9%92%89%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95">钉钉小程序学习记录</a></li><li><a href="#%E5%89%8D%E8%A8%80">前言</a></li><li><a href="#%E4%B8%80-%E9%92%89%E9%92%89%E5%B0%8F%E7%A8%8B%E5%BA%8F">一、钉钉小程序</a></li><li><a href="#%E4%BA%8C-%E4%BD%BF%E7%94%A8%E6%AD%A5%E9%AA%A4">二、使用步骤</a><ul><li><a href="#1%E6%90%AD%E5%BB%BA%E5%BA%94%E7%94%A8%E7%8E%AF%E5%A2%83">1.搭建应用环境</a></li></ul></li></ul>(文章目录)<p></p><p>&lt;/font&gt;</p><p>&lt;hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1"&gt;</p><h1 id="前言"><a class="anchor" href="#前言">#</a> 前言</h1><p>小程序开发优点</p><p>&lt;hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1"&gt;</p><p>1 轻量 便捷<br> 2 开发成本低<br> 3 用户集群大<br> 4 封装好的小程序语言，语法简单<br>由于开发时，发现钉钉小程序教程较少，因此在开发过程中作为纪录。适用于小白。</p><h1 id="一-钉钉小程序"><a class="anchor" href="#一-钉钉小程序">#</a> 一、钉钉小程序</h1><p>采用钉钉小程序的原因：<br>1 钉钉作为一中国企业管理而生的企业应用，用户集群大<br> 2 钉钉拥有完整的企业组织架构，无需其他应用人员导入<br> 3 钉钉提供丰富的 API 接口供开发者使用<br> 4 拥有监控平台更好管控 API 和数据的调用，实现实时监控，及时发现问题</p><h1 id="二-使用步骤"><a class="anchor" href="#二-使用步骤">#</a> 二、使用步骤</h1><h2 id="1搭建应用环境"><a class="anchor" href="#1搭建应用环境">#</a> 1. 搭建应用环境</h2><p>本次将钉钉小程序作为前端<br>下载工具：<br>1 java<br>2 小程序开发者工具为开发工具<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmRpbmd0YWxrLmNvbS9kb2N1bWVudC9yZXNvdXJjZWRvd25sb2FkL21pbmlhcHAtdG9vbD9wbmFtZXNwYWNlPWFwcA==">小程序开发者工具下载地址</span><br><img data-src="https://img-blog.csdnimg.cn/20210421175821647.png" alt="在这里插入图片描述"><br>此外钉钉开发者，提供接口调试工具，方便开发者调用 API 调参。</p><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmRpbmd0YWxrLmNvbS9kb2N1bWVudC9yZXNvdXJjZWRvd25sb2FkL2pzYXBpLWV4cGxvcmVyP3BuYW1lc3BhY2U9YXBw">钉钉小程序在线调参工具地址</span></p><p><img data-src="https://img-blog.csdnimg.cn/20210421180315927.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol><li>登陆钉钉后台<span class="exturl" data-url="aHR0cHM6Ly9vYS5kaW5ndGFsay5jb20vP3JlZGlyZWN0PWh0dHA6Ly9vYS5kaW5ndGFsay5jb20vb21wL2FwaS9taWNyb19hcHAvYWRtaW4vbGFuZGluZz9jb3JwaWQ9b3Blbi1kZXYuZGluZ3RhbGsuY29tJmFtcDtyZWRpcmVjdF91cmw9aHR0cDovL29wZW4tZGV2LmRpbmd0YWxrLmNvbS8jL2xvZ2lu">钉钉后台</span><br><img data-src="https://img-blog.csdnimg.cn/20210421180538796.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>创建一个钉钉组织或者成为钉钉组织管理员</li></ol><p>2.<img data-src="https://img-blog.csdnimg.cn/20210421180640509.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol start="3"><li>在弹出的创建应用页面中填写基本信息，然后单击确定创建。</li></ol><p>应用类型：选择小程序。</p><p>开发方式：选择企业自助开发。</p><p><img data-src="https://img-blog.csdnimg.cn/20210421181101213.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol start="4"><li>应用创建完成后，在基础信息页面，复制应用的 AppKey 和 AppSecret 备用。<br>5.<img data-src="https://img-blog.csdnimg.cn/20210421181140972.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>单击开发管理进入开发管理页面，然后单击修改，并根据以下内容配置开发信息。</li></ol><p>服务器出口 IP：输入调用钉钉服务端 API 时使用的 IP 即企业服务器的公网 IP，多个 IP 请以英文逗号 "," 隔开，支持带一个 * 号通配符的 IP 格式。</p><p>本教程设置为本机的公网 IP：30.40.xx.xx。</p><p>PC 端首页地址（可选）：输入在 PC 端钉钉工作台上打开本应用的地址。链接地址必须以 http 或 https 开头。</p><p>本教程设置为：<span class="exturl" data-url="aHR0cHM6Ly9kaW5nLWRvYy5kaW5ndGFsay5jb20vJUUzJTgwJTgy">https://ding-doc.dingtalk.com/。</span></p><p>管理后台地址（可选）：输入组织管理员在钉钉管理后台访问该应用的地址。<br><img data-src="https://img-blog.csdnimg.cn/20210421181205965.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>6 单击人员管理，然后单击添加人员添加开发人员。<br><img data-src="https://img-blog.csdnimg.cn/20210421181234257.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>单击安全中心，然后单击添加添加一个 HTTP 安全域名。</p><p>当小程序的前端与服务端需要进行网络通信时，需要设置安全域名。小程序前端只能通过已设置的安全域名（或 IP）与服务端进行网络通信。当安全域名更新时，需要在小程序开发工具重新打包上传版本，设置的域名才会生效。</p><p>安全域名是后端服务部署的服务器的公网 IP 或域名，本教程输入 127.0.0.1。</p><p><img data-src="https://img-blog.csdnimg.cn/20210421181259228.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>单击权限管理进入权限管理页面，然后根据以下配置添加接口调用权限。<br>权限范围选择全部员工，然后选择通讯录管理。</p><p>选择通讯录部门信息读权限和通讯录部门成员读权限，然后单击申请权限。<br><img data-src="https://img-blog.csdnimg.cn/20210421181340910.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>之后可以在小程序开发者工具中创建一个简单的 demo</p><p><img data-src="https://img-blog.csdnimg.cn/20210421182322826.png" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20210421182409241.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img data-src="https://img-blog.csdnimg.cn/20210421182503611.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>创建好后的目录<br><img data-src="https://img-blog.csdnimg.cn/20210421182608774.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>模拟器效果：<img data-src="https://img-blog.csdnimg.cn/20210421182723513.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> 1 app.js 全文逻辑<br>用来设置全局变量，以及页面配置<br><img data-src="https://img-blog.csdnimg.cn/20210421182823799.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20210421183041431.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>配置路由，创建一个新的页面必须，在这配置相对路径</p><p><img data-src="https://img-blog.csdnimg.cn/20210421183128492.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>页面导航栏的设置<br><img data-src="https://img-blog.csdnimg.cn/20210421183205639.png" alt="在这里插入图片描述"><br>存放照片</p><p><img data-src="https://img-blog.csdnimg.cn/20210421183227798.png" alt="在这里插入图片描述"><br>页面，主要在这编写代码</p><p>每个页面由这几个组成<br><img data-src="https://img-blog.csdnimg.cn/20210421183258739.png" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20210421183322126.png" alt="在这里插入图片描述"><br>公共资源存放</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> 钉钉小程序 </category>
          
          <category> 钉钉小程序学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 钉钉小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用hexo搭建一个自己的博客</title>
      <link href="records/live-record/live-blog/%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
      <url>records/live-record/live-blog/%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="系列文章目录"><a class="anchor" href="#系列文章目录">#</a> 系列文章目录</h1><p></p><ul class="toc"><li><a href="#%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95">系列文章目录</a></li><li><a href="#%E5%89%8D%E8%A8%80">前言</a></li><li><a href="#%E4%B8%80-hexo%E6%98%AF%E4%BB%80%E4%B9%88">一、Hexo是什么？</a></li><li><a href="#%E4%BA%8C-%E5%AE%89%E8%A3%85hexo">二、安装Hexo</a><ul><li><a href="#1%E5%AE%89%E8%A3%85nodejs">1.安装node.JS</a><ul><li><a href="#1%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E5%8C%85">1.下载安装包</a></li><li><a href="#2-%E5%AE%89%E8%A3%85">2、安装</a></li><li><a href="#3-%E9%85%8D%E7%BD%AEnpm%E5%9C%A8%E5%AE%89%E8%A3%85%E5%85%A8%E5%B1%80%E6%A8%A1%E5%9D%97%E6%97%B6%E7%9A%84%E8%B7%AF%E5%BE%84%E5%92%8C%E7%BC%93%E5%AD%98cache%E7%9A%84%E8%B7%AF%E5%BE%84">3、配置npm在安装全局模块时的路径和缓存cache的路径</a></li><li><a href="#4%E6%B5%8B%E8%AF%95">4.测试</a></li><li><a href="#5%E5%AE%89%E8%A3%85%E5%B7%B2%E5%AE%8C%E6%88%90">5.安装已完成</a></li></ul></li><li><a href="#2npm%E9%85%8D%E7%BD%AE">2.npm配置</a></li></ul></li><li><a href="#%E4%B8%89-%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BAhexo">三、开始搭建Hexo</a><ul><li><a href="#1%E5%88%9B%E5%BB%BA%E6%9C%AC%E5%9C%B0hexo%E5%8D%9A%E5%AE%A2">1.创建本地hexo博客</a></li><li><a href="#2github%E4%B8%AD%E5%8D%9A%E5%AE%A2">2.github中博客</a></li><li><a href="#3gitee%E4%B8%AD%E5%8D%9A%E5%AE%A2">3.gitee中博客</a></li></ul></li><li><a href="#3%E6%9B%B4%E6%94%B9%E4%B8%BB%E9%A2%98">3.更改主题</a></li><li><a href="#%E6%80%BB%E7%BB%93">总结</a></li></ul>(文章目录)<p></p><h1 id="前言"><a class="anchor" href="#前言">#</a> 前言</h1><p><img data-src="https://img-blog.csdnimg.cn/20201022152856330.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>分享搭建 hexo 个人博客的过程<br>参考文档链接在 总结模块中</p><h1 id="一-hexo是什么"><a class="anchor" href="#一-hexo是什么">#</a> 一、Hexo 是什么？</h1><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。即把用户的 markdown 文件，按照指定的主题解析成静态网页。</p><h1 id="二-安装hexo"><a class="anchor" href="#二-安装hexo">#</a> 二、安装 Hexo</h1><p>安装 Hexo 钱需要一些环境依赖，接下来我们就来一步一步安装</p><h2 id="1安装nodejs"><a class="anchor" href="#1安装nodejs">#</a> 1. 安装 node.JS</h2><h3 id="1下载安装包"><a class="anchor" href="#1下载安装包">#</a> 1. 下载安装包</h3><p>Node.js 官方网站下载：<span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2VuLw==">https://nodejs.org/en/</span><span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2VuLw==">node.js 官网</span><br>选择操作系统对应的包：</p><p><img data-src="https://img-blog.csdnimg.cn/20201022155931920.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>下载完成，安装包如下：</p><p><img data-src="https://img-blog.csdnimg.cn/20201022160155165.png#pic_center" alt="在这里插入图片描述"></p><h3 id="2-安装"><a class="anchor" href="#2-安装">#</a> 2、安装</h3><p>打开安装，傻瓜式下一步即可：</p><p><img data-src="https://img-blog.csdnimg.cn/20201022160202461.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img data-src="https://img-blog.csdnimg.cn/20201022160218388.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>选择安装位置，我这里装在 D 盘下：</p><p><img data-src="https://img-blog.csdnimg.cn/20201022160228674.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img data-src="https://img-blog.csdnimg.cn/20201022160240285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20201022160246205.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img data-src="https://img-blog.csdnimg.cn/20201022160351984.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img data-src="https://img-blog.csdnimg.cn/20201022160358528.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>安装成功，文件夹结构如下，并在上面安装过程中已自动配置了环境变量和安装好了 npm 包，此时可以执行 node -v 和 npm -v 分别查看 node 和 npm 的版本号：</p><p><img data-src="https://img-blog.csdnimg.cn/20201022160406245.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="3-配置npm在安装全局模块时的路径和缓存cache的路径"><a class="anchor" href="#3-配置npm在安装全局模块时的路径和缓存cache的路径">#</a> 3、配置 npm 在安装全局模块时的路径和缓存 cache 的路径</h3><p>因为在执行例如 <code>npm install webpack -g</code>  等命令全局安装的时候，默认会将模块安装在 C:\Users\ 用户名 \AppData\Roaming 路径下的 npm 和 npm_cache 中，不方便管理且占用 C 盘空间，如下图所示：<br><img data-src="https://img-blog.csdnimg.cn/20201022160446689.png#pic_center" alt="在这里插入图片描述"></p><p>所以这里配置自定义的全局模块安装目录，在 node.js 安装目录下新建两个文件夹 node_global 和 node_cache，然后在 cmd 命令下执行如下两个命令：<br> <code>npm config set prefix "D:\Program Files\nodejs\node_global"</code> <br> <code>npm config set cache "D:\Program Files\nodejs\node_cache"</code> <br><img data-src="https://img-blog.csdnimg.cn/20201022160455508.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>执行成功。然后在环境变量 -&gt; 系统变量中新建一个变量名为</p><blockquote><p>“NODE_PATH”</p></blockquote><p>， 值为</p><blockquote><p>“D:\Program Files\nodejs\node_modules”</p></blockquote><p>，如下图：</p><p><img data-src="https://img-blog.csdnimg.cn/20201022160550279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>最后编辑用户变量里的 Path，将相应 npm 的路径改为：</p><blockquote><p>D:\Program Files\nodejs\node_global</p></blockquote><p>，如下：<br>更改前：</p><p><img data-src="https://img-blog.csdnimg.cn/20201022160557678.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>更改后：<br><img data-src="https://img-blog.csdnimg.cn/20201022160604671.png#pic_center" alt="在这里插入图片描述"></p><p>配置完成。</p><h3 id="4测试"><a class="anchor" href="#4测试">#</a> 4. 测试</h3><p>安装完成后可以使用 cmd（win+r 然后输入 cmd 进入）测试下是否安装成功。<br>方法：在 cmd 下输入 <code>node -v</code> ，出现下图版本提示就是完成了 NodeJS 的安装。<br><img data-src="https://img-blog.csdnimg.cn/20201022160956465.png#pic_center" alt="在这里插入图片描述"></p><h3 id="5安装已完成"><a class="anchor" href="#5安装已完成">#</a> 5. 安装已完成</h3><p>常规 NodeJS 的搭建到现在为止已经完成了。</p><h2 id="2npm配置"><a class="anchor" href="#2npm配置">#</a> 2.npm 配置</h2><p>6、npm 配置<br> npm 作为一个 NodeJS 的模块管理，很有必要列出一些：<br>①、模块路径、cache 路径<br>先配置 npm 的全局模块的存放路径以及 cache 的路径，<br>例如希望将以上两个文件夹放在 NodeJS 的主目录下，便在 NodeJs 下建立 "node_global" 及 "node_cache" 两个文件夹。如下图<br><img data-src="https://img-blog.csdnimg.cn/20201022161140713.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>②、使用 cmd 命令进行配置<br>启动 cmd，输入</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token function">npm</span> config <span class="token builtin class-name">set</span> prefix <span class="token string">"H:<span class="token entity" title="\n">\n</span>odejs<span class="token entity" title="\n">\n</span>ode_global"</span></pre></td></tr></tbody></table></figure><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token function">npm</span> config <span class="token builtin class-name">set</span> cache <span class="token string">"H:<span class="token entity" title="\n">\n</span>odejs<span class="token entity" title="\n">\n</span>ode_cache"</span></pre></td></tr></tbody></table></figure><p>如果不进行这一步设置，npm 的全局安装包，将不会在 node 安装文件夹里。<br>如果这个步骤出现错误，如：operation not permitted, mkdir 'C:\Program Files\nodejs'，请使用管理员身份打开 cmd 命令行。<br>③、测试<br>现在我们来装个模块试试，<br>在 cmd 命令行里面，输入 “ <code>npm install express -g</code> ”（“-g” 这个参数意思是装到 global 目录下，也就是上面说设置的 “H:\nodejs\node_global” 里面。）。<br>④、查看环境变量<br><img data-src="https://img-blog.csdnimg.cn/2020102216120689.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20201022161215478.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>⑤、配置 node_path<br> 进入环境变量对话框，在系统变量下新建 "NODE_PATH"，输入” <code>H:\nodejs\node_global\node_modules“</code> 。（ps：这一步相当关键。）<br>2014.4.19 新增：由于改变了 module 的默认地址，所以上面的用户变量都要跟着改变一下（用户变量 "PATH" 修改为 “H:\nodejs\node_global\”），要不使用 module 的时候会导致输入命令出现 “xxx 不是内部或外部命令，也不是可运行的程序或批处理文件” 这个错误。</p><p>8、安装淘宝 npm（cnpm）<br>(1) 输入以下命令</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry <span class="token operator">=</span> https：//registry.npm.taobao.org</pre></td></tr></tbody></table></figure><p>(2) 添加系统变量 path 的内容<br>　　因为 cnpm 会被安装到 H:nodejs\node_global 下，而系统变量 path 并未包含该路径。在系统变量 path 下添加该路径即可正常使用 cnpm。<br>(3) 输入 <code>cnpm -v</code>  命令，查看结果</p><p><img data-src="https://img-blog.csdnimg.cn/20201022161344956.png#pic_center" alt="在这里插入图片描述"><br>测试 cnpm</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>cnpm -v</pre></td></tr></tbody></table></figure><p><img data-src="https://img-blog.csdnimg.cn/2020102216190448.png#pic_center" alt="在这里插入图片描述"></p><h1 id="三-开始搭建hexo"><a class="anchor" href="#三-开始搭建hexo">#</a> 三、开始搭建 Hexo</h1><h2 id="1创建本地hexo博客"><a class="anchor" href="#1创建本地hexo博客">#</a> 1. 创建本地 hexo 博客</h2><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>cnpm <span class="token function">install</span> -g hexo-cli</pre></td></tr></tbody></table></figure><p>全局安装框架<br><img data-src="https://img-blog.csdnimg.cn/20201022162222991.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>验证</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>hexo -v</pre></td></tr></tbody></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20201022162237645.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>安装完成、<br>创建项目目录空文件夹 testblog<br> 初始化 hexo</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>hexo init</pre></td></tr></tbody></table></figure><p>需要等待一段时间<br>初始化成功<br><img data-src="https://img-blog.csdnimg.cn/202010221622502.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token function">dir</span></pre></td></tr></tbody></table></figure><p>查看生成的文件<br><img data-src="https://img-blog.csdnimg.cn/20201022162257710.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>启动 hexo</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>hexo s</pre></td></tr></tbody></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20201022162319529.png#pic_center" alt="在这里插入图片描述"></p><p>启动成功<br><img data-src="https://img-blog.csdnimg.cn/20201022162325796.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>先断开<br><img data-src="https://img-blog.csdnimg.cn/20201022162332362.png#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20201022162337591.png#pic_center" alt="在这里插入图片描述"><br>创建我的第一篇博客文章：</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>hexo n <span class="token string">"我的第一篇博客文章"</span></pre></td></tr></tbody></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20201022162452107.png#pic_center" alt="在这里插入图片描述"></p><p>查看文章</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token builtin class-name">cd</span> source/_posts/</pre></td></tr></tbody></table></figure><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token function">dir</span></pre></td></tr></tbody></table></figure><p><img data-src="https://img-blog.csdnimg.cn/2020102216260614.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>编写博客内容<br><img data-src="https://img-blog.csdnimg.cn/20201022162613918.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>回退目录</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>cd<span class="token punctuation">..</span></pre></td></tr></tbody></table></figure><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>cd<span class="token punctuation">..</span></pre></td></tr></tbody></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20201022162633584.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>清理博客</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>hexo clean</pre></td></tr></tbody></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20201022162710893.png#pic_center" alt="在这里插入图片描述"></p><p>生成博客</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>hexo g</pre></td></tr></tbody></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20201022162721268.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>重新启动</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>hexo s</pre></td></tr></tbody></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20201022162734122.png#pic_center" alt="在这里插入图片描述"></p><p>新文章生成：<br><img data-src="https://img-blog.csdnimg.cn/20201022162742689.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="2github中博客"><a class="anchor" href="#2github中博客">#</a> 2.github 中博客</h2><p>github<br> 创建一个仓库</p><p><img data-src="https://img-blog.csdnimg.cn/20201022162912392.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img data-src="https://img-blog.csdnimg.cn/20201022162918660.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>用户名.github.io 一定要是这样的格式否则会报错<br><strong> config.yml</strong><br> 中修改</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>deploy:</pre></td></tr><tr><td data-num="2"></td><td><pre>  type: <span class="token string">'git'</span> </pre></td></tr><tr><td data-num="3"></td><td><pre>  repo: https://github.com/ppxpython/ppxpython.github.io.git </pre></td></tr><tr><td data-num="4"></td><td><pre>  branch: master</pre></td></tr></tbody></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20201022162958121.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>hexo clean</pre></td></tr></tbody></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20201022163010929.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>hexo g</pre></td></tr></tbody></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20201022163020688.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>hexo d</pre></td></tr></tbody></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20201022163037507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>刷新查看仓库<br><img data-src="https://img-blog.csdnimg.cn/20201022163043727.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>打开网址：<br><a href="https://ppxpython.github.io/">https://ppxpython.github.io/</a></p><p><img data-src="https://img-blog.csdnimg.cn/20201022163051921.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="3gitee中博客"><a class="anchor" href="#3gitee中博客">#</a> 3.gitee 中博客</h2><p>在 gitee 上创建一个仓库</p><p><img data-src="https://img-blog.csdnimg.cn/20201022163300166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>安装工具</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>cnpm <span class="token function">install</span> --save hexo-deployer-git</pre></td></tr></tbody></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20201022163316359.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token function">dir</span></pre></td></tr></tbody></table></figure><p>查看<br><img data-src="https://img-blog.csdnimg.cn/20201022163327454.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>需要设置<strong> config.yml</strong> 文件<br>打开文件到最下面更改</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token comment"># Deployment</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">## Docs: https://hexo.io/docs/one-command-deployment</span></pre></td></tr><tr><td data-num="3"></td><td><pre>deploy:</pre></td></tr><tr><td data-num="4"></td><td><pre>  type: <span class="token string">'git'</span> </pre></td></tr><tr><td data-num="5"></td><td><pre>  repo: https://gitee.com/ppxpython/testblog.git </pre></td></tr><tr><td data-num="6"></td><td><pre>  bronch: master</pre></td></tr></tbody></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20201022163413621.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>没有引号都没关系<br>部署远端</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>hexo d</pre></td></tr></tbody></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20201022163428812.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>成功</p><p><img data-src="https://img-blog.csdnimg.cn/20201022163436449.png#pic_center" alt="在这里插入图片描述"></p><p>刷新 gitee 显示代码：<br><img data-src="https://img-blog.csdnimg.cn/20201022163445215.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>点击：<br><img data-src="https://img-blog.csdnimg.cn/20201022163452430.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>显示：<br><img data-src="https://img-blog.csdnimg.cn/2020102216345846.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>启动成功：<br><img data-src="https://img-blog.csdnimg.cn/20201022163504245.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>网页：</p><p><img data-src="https://img-blog.csdnimg.cn/2020102216351173.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>发现没有样式，不要着急，更改配置文件：</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>url: https://ppxpython.gitee.io/testblog</pre></td></tr></tbody></table></figure><p><img data-src="https://img-blog.csdnimg.cn/202010221635425.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>hexo clean</pre></td></tr></tbody></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20201022163547650.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>hexo d</pre></td></tr></tbody></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20201022163555372.png#pic_center" alt="在这里插入图片描述"></p><p>在 gitee 上查看更新<br><img data-src="https://img-blog.csdnimg.cn/20201022163608279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="3更改主题"><a class="anchor" href="#3更改主题">#</a> 3. 更改主题</h1><p>下载主题：<br>选择自己喜欢的主题</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token function">git</span> clone https://github.com/ShanaMaid/hexo-theme-shana.git themes/ShanaMaid</pre></td></tr></tbody></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20201022163753909.png#pic_center" alt="在这里插入图片描述"></p><p>修改配置文件<br><img data-src="https://img-blog.csdnimg.cn/20201022163805787.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>hexo clean</pre></td></tr></tbody></table></figure><p>本地查看<br> hexo s<br><img data-src="https://img-blog.csdnimg.cn/20201022163823260.png#pic_center" alt="在这里插入图片描述"></p><p>效果：</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>http://localhost:4000/easyblog/</pre></td></tr></tbody></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20201022163845843.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>hexo d</pre></td></tr></tbody></table></figure><p>部署上去<br><img data-src="https://img-blog.csdnimg.cn/20201022163909953.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>在 gitee 上更新一下<br><img data-src="https://img-blog.csdnimg.cn/20201022163919206.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>部署成功，点击网址，查看我的博客<br>最后附上 <a href="https://ppxpython.github.io/">我的博客</a>：<br><a href="https://ppxpython.github.io/">https://ppxpython.github.io/</a></p><h1 id="总结"><a class="anchor" href="#总结">#</a> 总结</h1><p>参照的链接这里附上：<br><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FudG1hL2FydGljbGUvZGV0YWlscy84NjEwNDA2OA==">Node.js 安装链接</span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 心得记录 </category>
          
          <category> 生活记录 </category>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01postman学习</title>
      <link href="software-test/test-tools/api-testing2/postman/01postman%E5%AD%A6%E4%B9%A0/"/>
      <url>software-test/test-tools/api-testing2/postman/01postman%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="系列文章目录"><a class="anchor" href="#系列文章目录">#</a> 系列文章目录</h1><p></p><ul class="toc"><li><a href="#%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95">系列文章目录</a></li><li><a href="#%E5%89%8D%E8%A8%80">前言</a></li><li><a href="#%E4%B8%80-postman%E6%98%AF%E4%BB%80%E4%B9%88">一、postman是什么？</a></li><li><a href="#%E4%BA%8C-%E6%8E%A5%E5%8F%A3%E6%98%AF%E4%BB%80%E4%B9%88">二、 接口是什么？</a></li><li><a href="#%E4%B8%89-%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%92%8C%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%9A%84%E7%9B%AE%E7%9A%84">三、 接口测试和接口测试的目的</a><ul><li><a href="#1%E4%BB%80%E4%B9%88%E6%98%AF%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95">1.什么是接口测试</a></li><li><a href="#2%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E8%BF%9B%E8%A1%8C%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95">2.为什么要进行接口测试</a></li><li><a href="#3%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E9%87%8D%E7%82%B9">3.接口测试重点</a></li><li><a href="#4%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%88%86%E7%B1%BB">4.接口测试分类</a></li></ul></li><li><a href="#%E5%9B%9B-postman%E8%BF%9B%E8%A1%8C%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95">四、postman进行接口测试</a><ul><li><a href="#1http%E7%9F%A5%E8%AF%86">1.HTTP知识</a></li><li><a href="#2%E5%A2%9E%E5%8A%A0%E6%96%AD%E8%A8%80">2.增加断言</a></li><li><a href="#3%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E6%B5%8B%E8%AF%95%E5%AE%9E%E4%BE%8B">3.编写一个测试实例</a></li><li><a href="#4sandbox">4.sandbox</a></li><li><a href="#5%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95">5.请求方法</a></li><li><a href="#6cookie">6.cookie</a></li><li><a href="#7%E9%89%B4%E6%9D%83">7.鉴权</a><ul><li><a href="#1%E4%BB%80%E4%B9%88%E6%98%AF%E9%89%B4%E6%9D%83">（1）什么是鉴权</a></li><li><a href="#2%E9%89%B4%E6%9D%83%E6%96%B9%E5%BC%8F">（2）鉴权方式</a></li></ul></li><li><a href="#8cllection%E5%AE%B9%E5%99%A8">8.cllection容器</a><ul><li><a href="#%E9%9B%86%E5%90%88%E6%A6%82%E8%BF%B0">集合概述</a></li><li><a href="#collection-%E5%B8%B8%E7%94%A8api">Collection 常用API</a></li></ul></li><li><a href="#9-%E5%8F%98%E9%87%8F">9. 变量</a></li><li><a href="#10-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E6%96%B9%E6%B3%951%E5%AE%9E%E4%BE%8B">10. 环境变量方法1实例</a></li><li><a href="#11%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E6%96%B9%E6%B3%95%E4%BA%8C%E5%AE%9E%E4%BE%8B">11.全局变量方法二实例</a></li><li><a href="#12%E8%BF%90%E8%A1%8Ccollection">12.运行collection</a></li><li><a href="#13%E8%BF%90%E8%A1%8Ccollection%E5%AE%9E%E4%BE%8B%E7%94%9F%E6%88%90html%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A">13.运行collection实例生成HTML测试报告</a></li><li><a href="#14postman%E5%AF%BC%E5%87%BApython%E8%84%9A%E6%9C%AC">14.postman导出python脚本</a></li></ul></li><li><a href="#5-postman%E4%B8%AD%E6%96%AD%E8%A8%80%E5%92%8C%E6%8A%93%E5%8C%85">5、postman中断言和抓包</a><ul><li><a href="#1%E6%B5%8B%E8%AF%95%E6%96%AD%E8%A8%80">1.测试断言</a></li><li><a href="#2postman%E4%B8%AD%E5%85%85%E5%BD%93%E4%BB%A3%E7%90%86%E8%BF%9B%E8%A1%8Capp%E6%8A%93%E5%8C%85">2.postman中充当代理进行app抓包</a></li></ul></li><li><a href="#%E6%80%BB%E7%BB%93">总结</a></li></ul>(文章目录)<p></p><h1 id="前言"><a class="anchor" href="#前言">#</a> 前言</h1><p>本文为视频学习的截图记录，<br>用途：以方便以后学习翻阅<br>主要以图片的形式展现<br>这里附上视频链接：<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUd0NHkxRDdjbz9wPTU=">postman 学习</span></p><h1 id="一-postman是什么"><a class="anchor" href="#一-postman是什么">#</a> 一、postman 是什么？</h1><p>postman 是一个 HTTP 客户端，用于发送请求和接收响应，是专门用于测试 API 的工具</p><h1 id="二-接口是什么"><a class="anchor" href="#二-接口是什么">#</a> 二、 接口是什么？</h1><p>IT 行业从 WWW 万维网时代 的 C/S、B/S 架构，到移动互联网时代的大前端时代，发展到云计算时代以 IaaS（基础架构即服务），PaaS（平台即服务），SaaS（软件即服务）为代表的云端架构，如今更是进入到万物互联的物联网时代，网络连接着我们生活的方方面面，而承载这些连接的连接点，就是网络接口，接口是不同网络应用之间联系、交互、相互作用的入口和桥梁。</p><p>如下图，是接口在软件系统中所处位置的示意图：<br><img data-src="https://img-blog.csdnimg.cn/2020102009213540.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="三-接口测试和接口测试的目的"><a class="anchor" href="#三-接口测试和接口测试的目的">#</a> 三、 接口测试和接口测试的目的</h1><h2 id="1什么是接口测试"><a class="anchor" href="#1什么是接口测试">#</a> 1. 什么是接口测试</h2><p>百度百科中：</p><blockquote><p>接口测试是测试系统组件间接口的一种测试。接口测试主要用于检测外部系统与系统之间以及内部各个子系统之间的交互点。测试的重点是要检查数据的交换，传递和控制管理过程，以及系统间的相互逻辑依赖关系等。</p></blockquote><p><img data-src="https://img-blog.csdnimg.cn/20201020110441401.png#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20201020110449981.png#pic_center" alt="在这里插入图片描述"></p><p>接口测试是测试系统组件间接口的一种测试，<br>主要用于测试系统与外部其他系统之间的接口，<br>以及系统内部各个子模块之间的接口。</p><h2 id="2为什么要进行接口测试"><a class="anchor" href="#2为什么要进行接口测试">#</a> 2. 为什么要进行接口测试</h2><ol><li>现在很多系统前后端架构是分离的，因为不同端（前段，后端）的工作进度不一样，所以我们要针对最开始出来的接口，以及需要调用其他公司的（银行，支付宝，微信，qq 等）一些接口进行接口测试及验证数据，从安全层面来说，只依赖前端进行限制已经完全不能满足系统的安全要求（绕过前端太容易了）， 需要后端同样进行控制，在这种情况下就需要从接口层面进行验证。在这种情况下就需要从接口层面进行验证。前后端传输、日志打印等信息是否加密传输也是需要验证的，特别是涉及到用户的隐私信息，如身份证，银行卡等。</li><li>如今系统越来越复杂，传统的靠前端测试已经大大降低了效率，而且现在我们都推崇测试前移也叫 测试左移，希望测试能更早的介入测试，那接口测试就是一种及早介入的方式。例如传统测试，你是不是得等前后端都完成你才能进行测试，才能进行自动化代码编写。 而如果是接口测试，只需要前后端定义好接口，那这时自动化就可以介入编写接口 自动化测试代码，手工测试只需要后端代码完成就可以介入测试后端逻辑而不用等待前端工作完成。</li><li>简单概括：<br>①. 越底层发现 bug，它的修复成本是越低的。<br>②. 前端随便变，接口测好了，后端不用变，前后端是两拨人开发的。<br>③. 检查系统的安全性、稳定性，前端传参不可信，比如京东购物，前端价格不可能传入 - 1 元，但是通过接口可以传入 - 1 元。<br>④. 如今的系统复杂度不断上升，传统的测试方法成本急剧增加且测试效率大幅下降，接口测试可以提供这种情况下的解决方案。<br>⑤. 接口测试相对容易实现自动化持续集成，且相对 UI 自动化也比较稳定，可以减少人工回归测试人力成本与时间，缩短测试周期，支持后端快速发版需求。接口持续集成是为什么能低成本高收益的根源。<br>⑥.   现在很多系统前后端架构是分离的，从安全层面来说：<br>(1)、只依赖前端进行限制已经完全不能满足系统的安全要求（绕过前面实在太容易）， 需要后端同样进行控制，在这种情况下就需要从接口层面进行验证。<br>(2)、前后端传输、日志打印等信息是否加密传输也是需要验证的，特别是涉及到用户的隐私信息，如身份证，银行卡等。</li></ol><h2 id="3接口测试重点"><a class="anchor" href="#3接口测试重点">#</a> 3. 接口测试重点</h2><p>测试的重点是</p><ol><li>检查接口参数传递的正确性</li><li>检查 接口功能实现的正确性</li><li>检查输出结果的正确性</li><li>检查各种异常情况的容错处理的完整性和合理性</li></ol><p>保证系统的正确和稳定为核心，重要性主要体现为以下几个方面：<br>（1）能够提早发现 bug，符合质量控制前移的理念。<br>（2）接口测试低成本高效益，因为接口测试可以自动化并且是持续集成的。<br>（3）接口测试从用户的角度对系统接口进行全面检测。实际项目中，接口测试会覆盖一定程度的业务逻辑</p><h2 id="4接口测试分类"><a class="anchor" href="#4接口测试分类">#</a> 4. 接口测试分类</h2><p>针对软件接口的分类一般有如下几种情况：</p><ol><li>系统与系统之间的调用<br>如微信向用户提供统一的对外接口，程序员调用接口完成基于微信的小程序等；</li><li>同一系统内部上层服务对下层服务的调用<br>如一个软件程序一般分为表示层，业务层和数据层，表示层调用业务层的接口来完成自己的工作，而业务层又会调用数据层的接口来实现相应的业务等。</li></ol><h1 id="四-postman进行接口测试"><a class="anchor" href="#四-postman进行接口测试">#</a> 四、postman 进行接口测试</h1><h2 id="1http知识"><a class="anchor" href="#1http知识">#</a> 1.HTTP 知识</h2><p>HTTP 是超文本传输协议，其定义了客户端与服务器端之间文本传输的规范。HTTP 默认使用 80 端口，这个端口指的是服务端的端口，而客户端使用的端口是动态分配的。当我们没有指定端口访问时，浏览器会默认帮我们添加 80 端口。 需要注意的是，现在大多数访问都使用了 HTTPS 协议，而 HTTPS 的默认端口为 443，如果使用 80 端口访问 HTTPS 协议的服务器可能会被拒绝。<br><img data-src="https://img-blog.csdnimg.cn/20201020100309267.png#pic_center" alt="在这里插入图片描述"><br> HTTP 请求 / 响应的步骤：<br>客户端连接到 Web 服务器 -&gt; 发送 Http 请求 -&gt; 服务器接受请求并返回 HTTP 响应 -&gt; 释放连接 TCP 连接 -&gt; 客户端浏览器解析 HTML 内容</p><p>1、客户端连接到 Web 服务器<br>一个 HTTP 客户端，通常是浏览器，与 Web 服务器的 HTTP 端口（默认为 80）建立一个 TCP 套接字连接。例如，<span class="exturl" data-url="aHR0cDovL3d3dy5iYWlkdS5jb20=">http://www.baidu.com</span></p><p>2、发送 HTTP 请求<br>通过 TCP 套接字，客户端向 Web 服务器发送一个文本的请求报文，一个请求报文由请求行、请求头部、空行和请求数据 4 部分组成。</p><p>3、服务器接受请求并返回 HTTP 响应<br> Web 服务器解析请求，定位请求资源。服务器将资源复本写到 TCP 套接字，由客户端读取。一个响应由状态行、响应头部、空行和响应数据 4 部分组成。<br>4、释放连接 TCP 连接<br>若 connection 模式为 close，则服务器主动关闭 TCP 连接，客户端被动关闭连接，释放 TCP 连接；若 connection 模式为 keepalive，则该连接会保持一段时间，在该时间内可以继续接收请求；</p><p>5、客户端浏览器解析 HTML 内容<br>客户端浏览器首先解析状态行，查看表明请求是否成功的状态代码。然后解析每一个响应头，响应头告知以下为若干字节的 HTML 文档和文档的字符集。客户端浏览器读取响应数据 HTML，根据 HTML 的语法对其进行格式化，并在浏览器窗口中显示。</p><p>GET 和 POST 请求：</p><p>如果是 get 请求的话，直接在浏览器里输入就行了，只要在浏览器里面直接能请求到的，都是 get 请求，如果是 post 的请求的话，就不行了，就得借助工具来发送。</p><p><strong>GET 请求和 POST 请求的区别：</strong><br><img data-src="https://img-blog.csdnimg.cn/20201020101214841.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>1、GET 使用 URL 或 Cookie 传参。而 POST 将数据放在 BODY 中。</p><p>2、GET 的 URL 会有长度上的限制，则 POST 的数据则可以非常大。</p><p>3、POST 比 GET 安全，因为数据在地址栏上不可见。</p><p>4、一般 get 请求用来获取数据，Post 请求用来发送数据。</p><p>2)、http 状态码</p><p>每发出一个 http 请求之后，都会有一个响应，http 本身会有一个状态码，来标示这个请求是否成功，常见的状态码有以下几种：</p><p>1、200 2 开头的都表示这个请求发送成功，最常见的就是 200，就代表这个请求是 ok 的，服务器也返回了。</p><p>2、300 3 开头的代表重定向，最常见的是 302，把这个请求重定向到别的地方了，</p><p>3、400 400 代表客户端发送的请求有语法错误，401 代表访问的页面没有授权，403 表示没有权限访问这个页面，404 代表没有这个页面</p><p>4、500 5 开头的代表服务器有异常，500 代表服务器内部异常，504 代表服务器端超时，没返回结果</p><p>常见的几种状态码：<br><strong>200：</strong> OK  当您的操作将在响应正文中返回数据时，出现此结果。<br><strong>201：</strong> 资源成功创建和更新<br><strong> 204：</strong>  No Content 当您的操作成功，但不在响应正文中返回数据时，出现此结果。<br><strong>301：</strong> 表示要从这个接口重定向到另外的接口（出现较多）<br><strong>304：</strong> Not Modified（重定向）  当测试实体自上次检索以来是否被修改时，出现此结果。<br><strong>400：</strong> 本来 api 必须要的参数但没有提供时，会出现<br><strong> 401：</strong>  需要登录才能访问的接口，未登录时会报 401<br><strong>404：</strong>  Not Found（客户端错误） 当资源不存在时，出现此结果。<br><strong>405：</strong> Method Not Allowed（客户端错误）由于方法和资源组合不正确而出现此错误。 例如，您不能对一个实体集合使用 DELETE 或 PATCH。<br><strong>412</strong>： Precondition Failed  客户端错误<br><strong> 413</strong>： Payload Too Large（客户端错误） 当请求长度过长时，出现此结果。<br><strong>501</strong>： Not Implemented（服务器错误） 当未实施某个请求的操作时，出现此结果。<br><strong>503</strong>： Service Unavailable（服务器错误） 当 Web API 服务不可用时，出现此结果。</p><p><img data-src="https://img-blog.csdnimg.cn/20201020094557254.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img data-src="https://img-blog.csdnimg.cn/20201020094821722.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20201020094845761.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20201020094902209.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20201020094932863.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/2020102009502419.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20201020095200705.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20201020095230334.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="2增加断言"><a class="anchor" href="#2增加断言">#</a> 2. 增加断言</h2><p><img data-src="https://img-blog.csdnimg.cn/20201020095453408.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>一般断言时在 http 响应体中断言处理<br><img data-src="https://img-blog.csdnimg.cn/20201020095519944.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20201020095532646.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="3编写一个测试实例"><a class="anchor" href="#3编写一个测试实例">#</a> 3. 编写一个测试实例</h2><p>测试目标 url：<br><span class="exturl" data-url="aHR0cHM6Ly93d3cudjJleC5jb20vYXBpL3RvcGljcy9ob3QuanNvbg==">测试目标 url</span><br>1. 输入网址：<br>2. 增加判断状态码和数据是否是 10 条的断言<br>代码：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>pm<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"状态码为200"</span><span class="token punctuation">,</span> function <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    pm<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>pm<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"返回的数据为10"</span><span class="token punctuation">,</span> function <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">var</span> jsonData <span class="token operator">=</span> pm<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    jsonData<span class="token punctuation">.</span>length <span class="token operator">==</span><span class="token operator">=</span> <span class="token number">10</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    </pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></tbody></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20201020095752241.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>返回的结果：<br><img data-src="https://img-blog.csdnimg.cn/20201020095815452.png#pic_center" alt="在这里插入图片描述"></p><p><img data-src="https://img-blog.csdnimg.cn/20201020095826275.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="4sandbox"><a class="anchor" href="#4sandbox">#</a> 4.sandbox</h2><p>postman 学习文档：<span class="exturl" data-url="aHR0cHM6Ly9sZWFybmluZy5wb3N0bWFuLmNvbS9kb2NzL2dldHRpbmctc3RhcnRlZC9pbnRyb2R1Y3Rpb24v">https://learning.postman.com/docs/getting-started/introduction/</span><br><img data-src="https://img-blog.csdnimg.cn/20201020100106735.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="5请求方法"><a class="anchor" href="#5请求方法">#</a> 5. 请求方法</h2><p>HTTP/1.1 协议中共定义了八种方法（有时也叫 “动作”），来表明 Request-URL 指定的资源不同的操作方式<br> HTTP1.0 定义了三种请求方法： GET, POST 和 HEAD 方法。<br>HTTP1.1 新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法<br><img data-src="https://img-blog.csdnimg.cn/2020102010041557.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br> 1、OPTIONS<br> 返回服务器针对特定资源所支持的 HTTP 请求方法，也可以利用向 web 服务器发送‘*’的请求来测试服务器的功能性<br> 2、HEAD<br> 向服务器索与 GET 请求相一致的响应，只不过响应体将不会被返回。这一方法可以再不必传输整个响应内容的情况下，就可以获取包含在响应小消息头中的元信息。<br>3、GET<br> 向特定的资源发出请求。注意：GET 方法不应当被用于产生 “副作用” 的操作中，例如在 Web Application 中，其中一个原因是 GET 可能会被网络蜘蛛等随意访问。Loadrunner 中对应 get 请求函数：web_link 和 web_url<br>4、POST<br> 向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和 / 或已有资源的修改。 Loadrunner 中对应 POST 请求函数：web_submit_data,web_submit_form<br>5、PUT<br> 向指定资源位置上传其最新内容<br> 6、DELETE<br> 请求服务器删除 Request-URL 所标识的资源<br> 7、TRACE<br> 回显服务器收到的请求，主要用于测试或诊断<br> 8、CONNECT<br>HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。<br>注意：<br>1）方法名称是区分大小写的，当某个请求所针对的资源不支持对应的请求方法的时候，服务器应当返回状态码 405（Mothod Not Allowed）；当服务器不认识或者不支持对应的请求方法时，应返回状态码 501（Not Implemented）。<br>2）HTTP 服务器至少应该实现 GET 和 HEAD/POST 方法，其他方法都是可选的，此外除上述方法，特定的 HTTP 服务器支持扩展自定义的方法。</p><h2 id="6cookie"><a class="anchor" href="#6cookie">#</a> 6.cookie</h2><p>Cookie 的诞生</p><p>由于 HTTP 协议是无状态的，而服务器端的业务必须是要有状态的。Cookie 诞生的最初目的是为了存储 web 中的状态信息，以方便服务器端使用。比如判断用户是否是第一次访问网站。目前最新的规范是 RFC 6265，它是一个由浏览器服务器共同协作实现的规范。<br>Cookie 的处理分为：</p><ol><li>服务器像客户端发送 cookie</li><li>浏览器将 cookie 保存</li><li>之后每次 http 请求浏览器都会将 cookie 发送给服务器端</li><li>服务器端的发送与解析</li><li>发送 cookie</li></ol><p>服务器端像客户端发送 Cookie 是通过 HTTP 响应报文实现的，在 Set-Cookie 中设置需要像客户端发送的 cookie，cookie 格式如下：</p><p><strong>Set-Cookie:</strong> "name=value;<span class="exturl" data-url="aHR0cDovL2RvbWFpbj0uZG9tYWluLmNvbQ==">domain=.domain.com</span>;path=/;expires=Sat, 11 Jun 2016 11:29:42 GMT;HttpOnly;secure"<br> 其中 name=value 是必选项，其它都是可选项。Cookie 的主要构成如下：</p><p><strong>name:</strong><br> 一个唯一确定的 cookie 名称。通常来讲 cookie 的名称是不区分大小写的。<br><strong>value:</strong><br> 存储在 cookie 中的字符串值。最好为 cookie 的 name 和 value 进行 url 编码<br><strong> domain:</strong><br>cookie 对于哪个域是有效的。所有向该域发送的请求中都会包含这个 cookie 信息。这个值可以包含子域 (如：<br><span class="exturl" data-url="aHR0cDovL3lxLmFsaXl1bi5jb20=">yq.aliyun.com</span>)，也可以不包含它 (如：.aliyun.com，则对于 aliyun.com 的所有子域都有效).<br><strong>path:</strong><br> 表示这个 cookie 影响到的路径，浏览器跟会根据这项配置，像指定域中匹配的路径发送 cookie。<br><strong>expires:</strong><br> 失效时间，表示 cookie 何时应该被删除的时间戳 (也就是，何时应该停止向服务器发送这个 cookie)。如果不设置这个时间戳，浏览器会在页面关闭时即将删除所有 cookie；不过也可以自己设置删除时间。这个值是 GMT 时间格式，如果客户端和服务器端时间不一致，使用 expires 就会存在偏差。<br><strong>max-age:</strong><br> 与 expires 作用相同，用来告诉浏览器此 cookie 多久过期（单位是秒），而不是一个固定的时间点。正常情况下，max-age 的优先级高于 expires。<br><strong>HttpOnly:</strong><br> 告知浏览器不允许通过脚本 document.cookie 去更改这个值，同样这个值在 document.cookie 中也不可见。但在 http 请求张仍然会携带这个 cookie。注意这个值虽然在脚本中不可获取，但仍然在浏览器安装目录中以文件形式存在。这项设置通常在服务器端设置。<br><strong>secure:</strong><br> 安全标志，指定后，只有在使用 SSL 链接时候才能发送到服务器，如果是 http 链接则不会传递该信息。就算设置了 secure 属性也并不代表他人不能看到你机器本地保存的 cookie 信息，所以不要把重要信息放 cookie 就对了服务器端设置。<br><img data-src="https://img-blog.csdnimg.cn/20201020101954674.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20201020102011195.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="7鉴权"><a class="anchor" href="#7鉴权">#</a> 7. 鉴权</h2><h3 id="1什么是鉴权"><a class="anchor" href="#1什么是鉴权">#</a> （1）什么是鉴权</h3><p>鉴权（authentication）是指验证用户是否拥有访问系统的权利。传统的鉴权是通过密码来验证的。这种方式的前提是，每个获得密码的用户都已经被授权。在建立用户时，就为此用户分配一个密码，用户的密码可以由管理员指定，也可以由用户自行申请。这种方式的弱点十分明显：一旦密码被偷或用户遗失密码，情况就会十分麻烦，需要管理员对用户密码进行重新修改，而修改密码之前还要人工验证用户的合法身份。<br>为了克服这种鉴权方式的缺点，需要一个更加可靠的鉴权方式。目前的主流鉴权方式是利用认证授权来验证数字签名的正确与否。<br>逻辑上，授权发生在鉴权之后，而实际上，这两者常常是一个过程。</p><h3 id="2鉴权方式"><a class="anchor" href="#2鉴权方式">#</a> （2）鉴权方式</h3><p>我们常用的鉴权有四种：<br>1、HTTP Basic Authentication<br>2、session-cookie<br>3、Token 验证<br> 4、OAuth (开放授权)</p><p>一般涉及到的都是 Token</p><p><img data-src="https://img-blog.csdnimg.cn/20201020102430269.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>有一些 api 在访问之前必须进行登录<br>一般测试人员在测试的时候只需要：<br>1. 获取 token（抓包，直接查看）<br>2. 设置 headers</p><p><img data-src="https://img-blog.csdnimg.cn/2020102010245681.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="8cllection容器"><a class="anchor" href="#8cllection容器">#</a> 8.cllection 容器</h2><h3 id="集合概述"><a class="anchor" href="#集合概述">#</a> 集合概述</h3><p>集合：集合是 java 中提供的一种容器，可以用来存储多个数据。<br>集合和数组既然都是容器，它们有什么区别呢？</p><p>数组的长度是固定的。集合的长度是可变的。<br>数组中存储的是同一类型的元素，可以存储任意类型数据。集合存储的都是引用数据类型。如果想存储基本类型数据需要存储对应的包装类型。<br>集合常用类的继承体系</p><p><strong>Collection：</strong><br>单列集合类的根接口，用于存储一系列符合某种规则的元素，它有两个重要的子接口，分别是<strong> java.util.List</strong> 和<strong> java.util.Set</strong>。其中，List 的特点是元素有序、元素可重复。Set 的特点是元素不可重复。List 接口的主要实现类有 java.util.ArrayList 和 java.util.LinkedList，Set 接口的主要实现类有 java.util.HashSet 和 java.util.LinkedHashSet。</p><p>一张图来描述集合常用类的继承体系</p><p><img data-src="https://img-blog.csdnimg.cn/20201020103340772.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>集合本身是一个工具，它存放在 java.util 包中。在 Collection 接口定义着单列集合框架中最最共性的内容。</p><h3 id="collection-常用api"><a class="anchor" href="#collection-常用api">#</a> Collection 常用 API</h3><p><strong>Collection 是所有单列集合的父接口</strong>，因此在 Collection 中定义了单列集合 (List 和 Set) 通用的一些方法，这些方法可用于操作所有的单列集合。方法如下：<br><strong>public boolean add(E e)：</strong> 把给定的对象添加到当前集合中 。<br><strong>public void clear():</strong> 清空集合中所有的元素。<br><strong>public boolean remove(E e):</strong> 把给定的对象在当前集合中删除。<br><strong>public boolean contains(Object obj):</strong> 判断当前集合中是否包含给定的对象。<br><strong>public boolean isEmpty()</strong>: 判断当前集合是否为空。<br><strong>public int size():</strong> 返回集合中元素的个数。<br><strong>public Object[] toArray():</strong> 把集合中的元素，存储到数组中</p><p><img data-src="https://img-blog.csdnimg.cn/20201020104247715.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="9-变量"><a class="anchor" href="#9-变量">#</a> 9. 变量</h2><p><img data-src="https://img-blog.csdnimg.cn/20201020104357776.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/2020102010441211.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="10-环境变量方法1实例"><a class="anchor" href="#10-环境变量方法1实例">#</a> 10. 环境变量方法 1 实例</h2><p>实列：<br>接口文档：<br><span class="exturl" data-url="aHR0cHM6Ly93d3cudjJleC5jb20vcC83djlURWM1MyUyMCVFNiVCNSU4QiVFOCVBRiU5NSVFNyU5QSU4NHVybCVFRiVCQyU5QQ==">接口文档</span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cudjJleC5jb20vYXBpL25vZGVzL3Nob3cuanNvbj9uYW1lPXB5dGhvbg==">测试 url</span><br><img data-src="https://img-blog.csdnimg.cn/20201020104443234.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>打开 postman<br><img data-src="https://img-blog.csdnimg.cn/20201020104555449.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br> name=python，将 name 设置为全局变量时爆红，先要设置环境变量<br>点击<br><img data-src="https://img-blog.csdnimg.cn/20201020104613779.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>添加环境变量<br><img data-src="https://img-blog.csdnimg.cn/20201020104635586.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>变量改变颜色，编程橘黄色，send 后的结果</p><p><img data-src="https://img-blog.csdnimg.cn/20201020104655418.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="11全局变量方法二实例"><a class="anchor" href="#11全局变量方法二实例">#</a> 11. 全局变量方法二实例</h2><p>环境变量是与 环境相关的<br>全局变量是独立于环境的<br> 1. 先取消环境变量<br><img data-src="https://img-blog.csdnimg.cn/20201020104749535.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>点击<br><img data-src="https://img-blog.csdnimg.cn/20201020104805921.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>出现：<br><img data-src="https://img-blog.csdnimg.cn/20201020104819168.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>开始编辑<br><img data-src="https://img-blog.csdnimg.cn/2020102010483966.png#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20201020104847634.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>完成<br><img data-src="https://img-blog.csdnimg.cn/20201020104905672.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>注意：当环境变量和全局变量中对同一个个变量名进行不同的赋值时，环境变量的值可以覆盖到全局变量的值</p><h2 id="12运行collection"><a class="anchor" href="#12运行collection">#</a> 12. 运行 collection</h2><p><img data-src="https://img-blog.csdnimg.cn/20201020104948867.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20201020105001260.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/2020102010501058.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="13运行collection实例生成html测试报告"><a class="anchor" href="#13运行collection实例生成html测试报告">#</a> 13. 运行 collection 实例生成 HTML 测试报告</h2><p>创建 collection<br> 再创建一个 request 请求<br><img data-src="https://img-blog.csdnimg.cn/20201020105104571.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>点击运行<br><img data-src="https://img-blog.csdnimg.cn/20201020105120227.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>按钮在命令行中运行<br><img data-src="https://img-blog.csdnimg.cn/20201020105135242.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>跳转到网页：<br><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbmV3bWFu">https://www.npmjs.com/package/newman</span></p><p>安装 newman<br><img data-src="https://img-blog.csdnimg.cn/20201020105151880.png#pic_center" alt="在这里插入图片描述"><br> npm install -g newman<br> 在命令行中下载 newman<br><img data-src="https://img-blog.csdnimg.cn/2020102010521217.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>检验 newman 是否安装成功</p><p><img data-src="https://img-blog.csdnimg.cn/20201020105225286.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>重新回到 postman<br><img data-src="https://img-blog.csdnimg.cn/20201020105244597.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20201020105258562.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>导出到本地文件：<br><img data-src="https://img-blog.csdnimg.cn/2020102010531423.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>是一打开 cmder 或者 cmd<br> 跳转到导出的目录下：<br><img data-src="https://img-blog.csdnimg.cn/20201020105340108.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>运行<br><img data-src="https://img-blog.csdnimg.cn/20201020105353513.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="14postman导出python脚本"><a class="anchor" href="#14postman导出python脚本">#</a> 14.postman 导出 python 脚本</h2><p><img data-src="https://img-blog.csdnimg.cn/20201020141516134.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20201020141532884.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>首先安装 Python（这里已经安装）<br>查看 python 版本<br><img data-src="https://img-blog.csdnimg.cn/20201020141551574.png#pic_center" alt="在这里插入图片描述"><br> pip 下载 requests 库（之前已经下载过）：<br><img data-src="https://img-blog.csdnimg.cn/20201020141612566.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>在 postman 中点击 Code<br><img data-src="https://img-blog.csdnimg.cn/20201020141630673.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>选择：<br><img data-src="https://img-blog.csdnimg.cn/20201020141704555.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>点击右上角复制：</strong></p><p><img data-src="https://img-blog.csdnimg.cn/20201020141737460.png#pic_center" alt="在这里插入图片描述"></p><p>创建一个 py 文件在 pycharm 中打开</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> requests</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> unittest</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">v2exAPITestCase</span><span class="token punctuation">(</span>unittest<span class="token punctuation">.</span>TestCase<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">def</span> <span class="token function">test_node_api</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    url <span class="token operator">=</span> <span class="token string">"https://www.v2ex.com/api/nodes/show.json?name=python"</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>    payload <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    querystring <span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"name"</span> <span class="token punctuation">:</span><span class="token string">"python"</span><span class="token punctuation">}</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    headers <span class="token operator">=</span> <span class="token punctuation">{</span></pre></td></tr><tr><td data-num="11"></td><td><pre>      <span class="token string">'Cookie'</span><span class="token punctuation">:</span> <span class="token string">'__cfduid=d333f7a16684a741d353302599a54b2921603071821'</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">}</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> data<span class="token operator">=</span>payload<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span>response<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> querystring<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token comment"># print(response.text.encode('utf8'))</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    unittest<span class="token punctuation">.</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p>运行成功<br><img data-src="https://img-blog.csdnimg.cn/20201020141840294.png#pic_center" alt="在这里插入图片描述"><br>重新修改加入数据驱动<br>修改后的测试代码为：</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> requests</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> unittest</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">v2exAPITestCase</span><span class="token punctuation">(</span>unittest<span class="token punctuation">.</span>TestCase<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">def</span> <span class="token function">test_node_api</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    url <span class="token operator">=</span> <span class="token string">"https://www.v2ex.com/api/nodes/show.json?name=python"</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    payload <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    headers <span class="token operator">=</span> <span class="token punctuation">{</span></pre></td></tr><tr><td data-num="9"></td><td><pre>      <span class="token string">'Cookie'</span><span class="token punctuation">:</span> <span class="token string">'__cfduid=d333f7a16684a741d353302599a54b2921603071821'</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">}</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token comment"># querystring ={"name" :"python"}</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">for</span> node_name <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'php'</span><span class="token punctuation">,</span><span class="token string">'python'</span><span class="token punctuation">,</span><span class="token string">'qna'</span><span class="token punctuation">]</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="13"></td><td><pre>      response <span class="token operator">=</span> requests<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span>  params<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> node_name<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>      self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span>response<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> node_name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    unittest<span class="token punctuation">.</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></tbody></table></figure><p>运行成功<br><img data-src="https://img-blog.csdnimg.cn/2020102014192443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="5-postman中断言和抓包"><a class="anchor" href="#5-postman中断言和抓包">#</a> 5、postman 中断言和抓包</h1><h2 id="1测试断言"><a class="anchor" href="#1测试断言">#</a> 1. 测试断言</h2><p>断言：实际结果和期望结果的比对的过程<br>比对数据：状态码，返回数据，响应头，响应时间<br>在 test 中编写 js 进行断言<br><img data-src="https://img-blog.csdnimg.cn/20201020105937990.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br> tm.response 是指相应对象<br><img data-src="https://img-blog.csdnimg.cn/20201020110107336.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>首先创建一个管理文件夹（集合）<br><img data-src="https://img-blog.csdnimg.cn/20201020110123256.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>存放一个项目中的所有接口测试便于管理<br><img data-src="https://img-blog.csdnimg.cn/20201020110139367.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>在 test 中编写断言<br><img data-src="https://img-blog.csdnimg.cn/20201020110156991.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20201020110207807.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>结果是绿色的表示通过<br><img data-src="https://img-blog.csdnimg.cn/20201020110223413.png#pic_center" alt="在这里插入图片描述"><br>结果是红色的表示不通过<br><img data-src="https://img-blog.csdnimg.cn/20201020110237728.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>需要保存 js 代码是 Ctrl+S 键<br>输入请求名<br><img data-src="https://img-blog.csdnimg.cn/2020102011025650.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>选择存放接口的管理文件<br><img data-src="https://img-blog.csdnimg.cn/20201020110313243.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="2postman中充当代理进行app抓包"><a class="anchor" href="#2postman中充当代理进行app抓包">#</a> 2.postman 中充当代理进行 app 抓包</h2><p>电脑 ——》postman——》手机<br><img data-src="https://img-blog.csdnimg.cn/2020102011070080.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>如何在 postman 中设置代理<br><img data-src="https://img-blog.csdnimg.cn/20201020110754852.png#pic_center" alt="在这里插入图片描述"><br> postman 中</p><p><img data-src="https://img-blog.csdnimg.cn/2020102011080855.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>点击代理显示代理设置：<br>填写端口号<br>选择抓取到的包存放在哪个管理文件夹中<br><img data-src="https://img-blog.csdnimg.cn/20201020110826324.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>之后在手机上设置<br><img data-src="https://img-blog.csdnimg.cn/202010201108420.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>端口号一定一致<br>服务器是电脑的 IP<br> 设置之后在手机端操作会在 postman 中增加 requests<br> 点击雷达代理的图案关闭代理<br><img data-src="https://img-blog.csdnimg.cn/20201020110900971.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>抓包是为了查看数据</p><h1 id="总结"><a class="anchor" href="#总结">#</a> 总结</h1><p>参考链接附上<br><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbGwtZ2FvY2hlbmcvcC8xMTA1MTg5Ni5odG1s"> postman</span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzYzNjg1NjM1L2Fuc3dlci8xMjU2Njk0MDE1"> 为什么要进行接口测试</span><br><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81MDM3ODMzMw=="> postman 基础 </span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vd2VpYmFuZ2dhbmcvcC85NDU0NTgxLmh0bWw=">http 请求方式</span><br><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poYW5ncXVhbl96b25lL2FydGljbGUvZGV0YWlscy83NzYyNzg5OQ=="> cookie</span><br><span class="exturl" data-url="aHR0cHM6Ly9iYWlqaWFoYW8uYmFpZHUuY29tL3M/aWQ9MTY2ODk4OTgwMjM1MDU1Mzg4NCZhbXA7d2ZyPXNwaWRlciZhbXA7Zm9yPXBj">collection 集合</span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 软件测试 </category>
          
          <category> 软件测试工具学习 </category>
          
          <category> 接口测试工具 </category>
          
          <category> Postman </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Postman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>08Springboot-- 依赖错误NoClassDefFoundError</title>
      <link href="computer-science/java/springboot/springboot-error1/08Springboot-%E4%BE%9D%E8%B5%96%E9%94%99%E8%AF%AFNoClassDefFoundError/"/>
      <url>computer-science/java/springboot/springboot-error1/08Springboot-%E4%BE%9D%E8%B5%96%E9%94%99%E8%AF%AFNoClassDefFoundError/</url>
      
        <content type="html"><![CDATA[<h1 id="项目场景"><a class="anchor" href="#项目场景">#</a> 项目场景：</h1><p>前后端启动成功没有错误，但在登录是出现错误</p><h1 id="问题描述"><a class="anchor" href="#问题描述">#</a> 问题描述：</h1><p>前后端启动成功没有错误，但在登录是出现<img data-src="https://img-blog.csdnimg.cn/20201005171754870.png#pic_center" alt="在这里插入图片描述"><br>后端呢 SpringBoot 报出错误</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>ERROR c.e.c.f.w.e.GlobalExceptionHandler - <span class="token punctuation">[</span>handleException,83<span class="token punctuation">]</span> - Handler dispatch failed<span class="token punctuation">;</span> nested exception is java.lang.NoClassDefFoundError: javax/xml/bind/DatatypeConverter</pre></td></tr></tbody></table></figure><h1 id="原因分析"><a class="anchor" href="#原因分析">#</a> 原因分析：</h1><p>JDK 版本号是：<br><img data-src="https://img-blog.csdnimg.cn/20201005171833209.png#pic_center" alt="在这里插入图片描述"><br>今天在使用 JDK 13.0 环境下使用 IDEA 时候出现了这个错误，错误日志如下：<br>我是采用了增加依赖解决的<br>故障原因：<br>JAXB API 是 java EE 的 API，因此在 java SE 9.0 中不再包含这个 Jar 包。<br>java 9 中引入了模块的概念，默认情况下，Java SE 中将不再包含 java EE 的 Jar 包<br>而在 java 6/7 / 8 时关于这个 API 都是捆绑在一起的</p><h1 id="解决方案"><a class="anchor" href="#解决方案">#</a> 解决方案：</h1><h2 id="解决方案一"><a class="anchor" href="#解决方案一">#</a> 解决方案一：</h2><p>降低 JDK 版本到 JDK 8</p><h2 id="解决方案二亲测可行"><a class="anchor" href="#解决方案二亲测可行">#</a> 解决方案二:（亲测可行）</h2><p>手动加入这些依赖 Jar 包</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span>dependency<span class="token operator">&gt;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>        <span class="token operator">&lt;</span>groupId<span class="token operator">&gt;</span>javax.xml.bind<span class="token operator">&lt;</span>/groupId<span class="token operator">&gt;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token operator">&lt;</span>artifactId<span class="token operator">&gt;</span>jaxb-api<span class="token operator">&lt;</span>/artifactId<span class="token operator">&gt;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token operator">&lt;</span>version<span class="token operator">&gt;</span><span class="token number">2.3</span>.<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>/version<span class="token operator">&gt;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token operator">&lt;</span>/dependency<span class="token operator">&gt;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token operator">&lt;</span>dependency<span class="token operator">&gt;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token operator">&lt;</span>groupId<span class="token operator">&gt;</span>com.sun.xml.bind<span class="token operator">&lt;</span>/groupId<span class="token operator">&gt;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token operator">&lt;</span>artifactId<span class="token operator">&gt;</span>jaxb-impl<span class="token operator">&lt;</span>/artifactId<span class="token operator">&gt;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token operator">&lt;</span>version<span class="token operator">&gt;</span><span class="token number">2.3</span>.<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>/version<span class="token operator">&gt;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token operator">&lt;</span>/dependency<span class="token operator">&gt;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token operator">&lt;</span>dependency<span class="token operator">&gt;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token operator">&lt;</span>groupId<span class="token operator">&gt;</span>com.sun.xml.bind<span class="token operator">&lt;</span>/groupId<span class="token operator">&gt;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token operator">&lt;</span>artifactId<span class="token operator">&gt;</span>jaxb-core<span class="token operator">&lt;</span>/artifactId<span class="token operator">&gt;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token operator">&lt;</span>version<span class="token operator">&gt;</span><span class="token number">2.3</span>.<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>/version<span class="token operator">&gt;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token operator">&lt;</span>/dependency<span class="token operator">&gt;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token operator">&lt;</span>dependency<span class="token operator">&gt;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token operator">&lt;</span>groupId<span class="token operator">&gt;</span>javax.activation<span class="token operator">&lt;</span>/groupId<span class="token operator">&gt;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token operator">&lt;</span>artifactId<span class="token operator">&gt;</span>activation<span class="token operator">&lt;</span>/artifactId<span class="token operator">&gt;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token operator">&lt;</span>version<span class="token operator">&gt;</span><span class="token number">1.1</span>.<span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span>/version<span class="token operator">&gt;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token operator">&lt;</span>/dependency<span class="token operator">&gt;</span></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Java </category>
          
          <category> SpringBoot框架 </category>
          
          <category> SpringBoot框架常见错误集合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>07Springboot--  导包运行报错IllegalStateException</title>
      <link href="computer-science/java/springboot/springboot-error1/07Springboot-%E5%AF%BC%E5%8C%85%E8%BF%90%E8%A1%8C%E6%8A%A5%E9%94%99IllegalStateException/"/>
      <url>computer-science/java/springboot/springboot-error1/07Springboot-%E5%AF%BC%E5%8C%85%E8%BF%90%E8%A1%8C%E6%8A%A5%E9%94%99IllegalStateException/</url>
      
        <content type="html"><![CDATA[<h1 id="项目场景"><a class="anchor" href="#项目场景">#</a> 项目场景：</h1><p>运行 IDEA 时出现错误</p><h1 id="问题描述"><a class="anchor" href="#问题描述">#</a> 问题描述：</h1><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>java.lang.IllegalStateException: Error processing condition on org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration.propertySourcesPlaceholderConfigurer</pre></td></tr></tbody></table></figure><p><img data-src="https://img-blog.csdnimg.cn/202010051712559.png#pic_center" alt="在这里插入图片描述"></p><h1 id="原因分析"><a class="anchor" href="#原因分析">#</a> 原因分析：</h1><p>依赖</p><h1 id="解决方案"><a class="anchor" href="#解决方案">#</a> 解决方案：</h1><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span>dependency<span class="token operator">&gt;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&lt;</span>groupId<span class="token operator">&gt;</span>org.springframework.boot<span class="token operator">&lt;</span>/groupId<span class="token operator">&gt;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span>artifactId<span class="token operator">&gt;</span>spring-boot-starter-tomcat<span class="token operator">&lt;</span>/artifactId<span class="token operator">&gt;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">!</span>--<span class="token operator">&lt;</span>scope<span class="token operator">&gt;</span>provided<span class="token operator">&lt;</span>/scope<span class="token operator">&gt;</span>--<span class="token operator">&gt;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token operator">&lt;</span>/dependency<span class="token operator">&gt;</span></pre></td></tr></tbody></table></figure><p>在 pom.xml 文件中将 scope 注释<br>再加上</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span>dependency<span class="token operator">&gt;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&lt;</span>groupId<span class="token operator">&gt;</span>javax.servlet<span class="token operator">&lt;</span>/groupId<span class="token operator">&gt;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span>artifactId<span class="token operator">&gt;</span>javax.servlet-api<span class="token operator">&lt;</span>/artifactId<span class="token operator">&gt;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token operator">&lt;</span>version<span class="token operator">&gt;</span><span class="token number">3.1</span>.<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>/version<span class="token operator">&gt;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token operator">&lt;</span>/dependency<span class="token operator">&gt;</span></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Java </category>
          
          <category> SpringBoot框架 </category>
          
          <category> SpringBoot框架常见错误集合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>06Springboot-- 导包错误</title>
      <link href="computer-science/java/springboot/springboot-error1/06Springboot-%E5%AF%BC%E5%8C%85%E9%94%99%E8%AF%AF/"/>
      <url>computer-science/java/springboot/springboot-error1/06Springboot-%E5%AF%BC%E5%8C%85%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="项目场景"><a class="anchor" href="#项目场景">#</a> 项目场景：</h1><p>运行 IDEA 时出现错误</p><h1 id="问题描述"><a class="anchor" href="#问题描述">#</a> 问题描述：</h1><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>Cannot resolve org.apache.tomcat.embed:tomcat-embed-core:9.0.36</pre></td></tr></tbody></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20201005170459456.png#pic_center" alt="在这里插入图片描述"></p><h1 id="原因分析"><a class="anchor" href="#原因分析">#</a> 原因分析：</h1><p>刚刚想学习 springboot 的缓冲机制 在新建项目的时候发现了这么一个错误<br><img data-src="https://img-blog.csdnimg.cn/20201005170723193.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20201005170731919.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>这两个都在指明 tomcat9.0.36 无法下载成功<br>但是你之前运行其他的 spring boot 项目是 web 依赖的 tomcat 是可以运行的<br>这个时候你就会联想到是版本的问题了吧</p><h1 id="解决方案"><a class="anchor" href="#解决方案">#</a> 解决方案：</h1><p>所以我们可以打开一个之前可以运行的 springboot 项目<br>找到右边的 maven，点击<br><img data-src="https://img-blog.csdnimg.cn/2020100517084951.png#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20201005170839795.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>你会发现你的 tomcat 的版本是其他 我这里是 9.0.35， 所以这个时候嘛<br>我们打开之前无法使用的 springboot 项目<br>打开它的 pox.xml</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span>properties<span class="token operator">&gt;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>        <span class="token operator">&lt;</span>java.version<span class="token operator">&gt;</span><span class="token number">1</span>.<span class="token operator"><span class="token file-descriptor important">8</span>&lt;</span>/java.version<span class="token operator">&gt;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token operator">&lt;</span>/properties<span class="token operator">&gt;</span></pre></td></tr></tbody></table></figure><p>只需添加成</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span>properties<span class="token operator">&gt;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>        <span class="token operator">&lt;</span>java.version<span class="token operator">&gt;</span><span class="token number">1</span>.<span class="token operator"><span class="token file-descriptor important">8</span>&lt;</span>/java.version<span class="token operator">&gt;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token operator">&lt;</span>tomcat.version<span class="token operator">&gt;</span>你的tomcat版本号<span class="token operator">&lt;</span>/tomcat.version<span class="token operator">&gt;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token operator">&lt;</span>/properties<span class="token operator">&gt;</span></pre></td></tr></tbody></table></figure><p>然后点击左边的 maven 再 install 就 ok 了<img data-src="https://img-blog.csdnimg.cn/20201005170947274.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img data-src="https://img-blog.csdnimg.cn/20201005170956861.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Java </category>
          
          <category> SpringBoot框架 </category>
          
          <category> SpringBoot框架常见错误集合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>05Springboot--数据库拼写错误BindingException: Invalid bound statement </title>
      <link href="computer-science/java/springboot/springboot-error1/05Springboot-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8B%BC%E5%86%99%E9%94%99%E8%AF%AFBindingException-Invalid-bound-statement/"/>
      <url>computer-science/java/springboot/springboot-error1/05Springboot-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8B%BC%E5%86%99%E9%94%99%E8%AF%AFBindingException-Invalid-bound-statement/</url>
      
        <content type="html"><![CDATA[<h1 id="项目场景"><a class="anchor" href="#项目场景">#</a> 项目场景：</h1><p>运行 IDEA 时出现错误</p><h1 id="问题描述"><a class="anchor" href="#问题描述">#</a> 问题描述：</h1><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>org.apache.ibatis.binding.BindingException: Invalid bound statement <span class="token punctuation">(</span>not found<span class="token punctuation">)</span>: com.example.mysportjava.dao.UserDao.getUserByMassage</pre></td></tr></tbody></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20201005170459456.png#pic_center" alt="在这里插入图片描述"></p><h1 id="原因分析"><a class="anchor" href="#原因分析">#</a> 原因分析：</h1><p>映射文件拼写错误</p><h1 id="解决方案"><a class="anchor" href="#解决方案">#</a> 解决方案：</h1><p><img data-src="https://img-blog.csdnimg.cn/20201005170519357.png#pic_center" alt="在这里插入图片描述"><br> 1 问题实质: dao 层 (又叫 mapper 接口) 跟 mapper.xml 文件没有映射<br> 2 问题原因：出现这种映射问题的原因分为低级原因和更低级原因两种<br>更低级原因:<br>(1) dao 层的方法和 mapper.xml 中的方法不一样；<br>(2) mapper 中的 namespace resultParameter 和对应的 dao 层 entity 层不一样<br> (3) 拼写错误 如漏写 少写 多写....<br> 上述这些原因都会导致两者不能映射 这些检查和修正的工作自己来吧不会的百度就行<br>低级原因: spring 配置文件中关于 mybatis 的与 xml 文件路径寻找相关的配置没有写<br>导致调用 dao 层方法时，没有寻找 dao.xml 文件的正确路径 结果 dao 迷路了 从而两者无法映射<br> 3 解决思路：把 dao.xml (或 mapper.xml) 路径配置写好！！！！<br> 既然出发点 (dao) 已经确定，目的地 (dao.xml/mapper.xml) 也确定了<br>想到到达就必须画一条到 dao.xml 的路<br> 4 解决步骤:<br>(1) 打开 spring-context.xml 配置文件<br> (2) 找到 class 为 org.mybatis.spring.SqlSessionFactoryBean 这个 bean<br> (3) 找到 name 为 mapperLocations 的 property<br> (4) 在 list 标签中添加一个 value<br> 例如:<br>&lt;value&gt;classpath:/info/mappings/**/*.xml&lt;/value&gt;<br> 重启，问题解决！！！<br> 注:classpath 是配置好的类路径 要想知道表示什么 最简单的方式是参考其他 list 看一眼比对项目结构就了然了</p><p><a href="https://ppxpython.github.io/"> 我的博客，欢迎点击光顾</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Java </category>
          
          <category> SpringBoot框架 </category>
          
          <category> SpringBoot框架常见错误集合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>05Springboot--出现BindingException</title>
      <link href="computer-science/java/springboot/springboot-error1/05Springboot-%E5%87%BA%E7%8E%B0BindingException/"/>
      <url>computer-science/java/springboot/springboot-error1/05Springboot-%E5%87%BA%E7%8E%B0BindingException/</url>
      
        <content type="html"><![CDATA[<h1 id="项目场景"><a class="anchor" href="#项目场景">#</a> 项目场景：</h1><p>IDEA 在启动时出现错误</p><h1 id="问题描述"><a class="anchor" href="#问题描述">#</a> 问题描述：</h1><p><img data-src="https://img-blog.csdnimg.cn/20201005170050317.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token number">2020</span>-09-21 <span class="token number">21</span>:08:06.650 ERROR <span class="token number">23480</span> --- <span class="token punctuation">[</span>nio-9000-exec-3<span class="token punctuation">]</span> o.a.c.c.C.<span class="token punctuation">[</span>.<span class="token punctuation">[</span>.<span class="token punctuation">[</span>/<span class="token punctuation">]</span>.<span class="token punctuation">[</span>dispatcherServlet<span class="token punctuation">]</span>    <span class="token builtin class-name">:</span> Servlet.service<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> servlet <span class="token punctuation">[</span>dispatcherServlet<span class="token punctuation">]</span> <span class="token keyword">in</span> context with path <span class="token punctuation">[</span><span class="token punctuation">]</span> threw exception <span class="token punctuation">[</span>Request processing failed<span class="token punctuation">;</span> nested exception is org.apache.ibatis.binding.BindingException: Invalid bound statement <span class="token punctuation">(</span>not found<span class="token punctuation">)</span>: com.example.mysportjava.dao.UserDao.getUserByMassage<span class="token punctuation">]</span> with root cause</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>org.apache.ibatis.binding.BindingException: Invalid bound statement <span class="token punctuation">(</span>not found<span class="token punctuation">)</span>: com.example.mysportjava.dao.UserDao.getUserByMa</pre></td></tr></tbody></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20201005170117931.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="原因分析"><a class="anchor" href="#原因分析">#</a> 原因分析：</h1><p>多出空格</p><h1 id="解决方案"><a class="anchor" href="#解决方案">#</a> 解决方案：</h1><p><img data-src="https://img-blog.csdnimg.cn/20201005170138566.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><a href="https://ppxpython.github.io/"> 我的博客，欢迎点击光顾</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Java </category>
          
          <category> SpringBoot框架 </category>
          
          <category> SpringBoot框架常见错误集合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04Springboot-- 数据库错误</title>
      <link href="computer-science/java/springboot/springboot-error1/04Springboot-%E6%95%B0%E6%8D%AE%E5%BA%93%E9%94%99%E8%AF%AF/"/>
      <url>computer-science/java/springboot/springboot-error1/04Springboot-%E6%95%B0%E6%8D%AE%E5%BA%93%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="项目场景"><a class="anchor" href="#项目场景">#</a> 项目场景：</h1><p>IDEA 在启动时出现错误</p><h1 id="问题描述"><a class="anchor" href="#问题描述">#</a> 问题描述：</h1><p><img data-src="https://img-blog.csdnimg.cn/20201005165807631.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>Error starting ApplicationContext. To display the conditions report re-run your application with <span class="token string">'debug'</span> enabled.</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">2020</span>-09-21 <span class="token number">21</span>:01:19.269 ERROR <span class="token number">25820</span> --- <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> o.s.boot.SpringApplication               <span class="token builtin class-name">:</span> Application run failed</pre></td></tr></tbody></table></figure><h1 id="原因分析"><a class="anchor" href="#原因分析">#</a> 原因分析：</h1><p>注释</p><h1 id="解决方案"><a class="anchor" href="#解决方案">#</a> 解决方案：</h1><p><img data-src="https://img-blog.csdnimg.cn/20201005165847835.png#pic_center" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Java </category>
          
          <category> SpringBoot框架 </category>
          
          <category> SpringBoot框架常见错误集合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02Springboot启动类错误</title>
      <link href="computer-science/java/springboot/springboot-error1/02Springboot%E5%90%AF%E5%8A%A8%E7%B1%BB%E9%94%99%E8%AF%AF/"/>
      <url>computer-science/java/springboot/springboot-error1/02Springboot%E5%90%AF%E5%8A%A8%E7%B1%BB%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="项目场景"><a class="anchor" href="#项目场景">#</a> 项目场景：</h1><p>IDEA 在启动时出现错误</p><h1 id="问题描述"><a class="anchor" href="#问题描述">#</a> 问题描述：</h1><p><img data-src="https://img-blog.csdnimg.cn/20201005165440714.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="原因分析"><a class="anchor" href="#原因分析">#</a> 原因分析：</h1><h1 id="解决方案"><a class="anchor" href="#解决方案">#</a> 解决方案：</h1><p><img data-src="https://img-blog.csdnimg.cn/20201005165456829.png#pic_center" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Java </category>
          
          <category> SpringBoot框架 </category>
          
          <category> SpringBoot框架常见错误集合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot--01错误记录</title>
      <link href="computer-science/java/springboot/springboot-error1/Springboot-01%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/"/>
      <url>computer-science/java/springboot/springboot-error1/Springboot-01%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>问题 1：<br>Identify and stop the process that's listening on port 8080 or configure this application to listen on another port.<br><img data-src="https://img-blog.csdnimg.cn/20201005164657909.png#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/2020100516470549.png#pic_center" alt="在这里插入图片描述"></p><p>问题 2<br><img data-src="https://img-blog.csdnimg.cn/2020100516471577.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>二、解决方式：<br>1. 检查自己写的注解是否错了，并没有。<br>2. 在网上查找解决方式：如下所示：<br>步骤一：<br>　　在 springboot 的配置文件添加，mybatis 的配置如下所示：</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>mybatis:</pre></td></tr><tr><td data-num="2"></td><td><pre>  typeAliasesPackage: com.xxx.xxx.dao.entity</pre></td></tr><tr><td data-num="3"></td><td><pre>  mapperLocations: classpath:mapper/*.xml</pre></td></tr></tbody></table></figure><p>步骤二：<br>　　①将接口与对应的实现类放在与 application 启动类的同一个目录或者他的子目录下，这样注解可以被扫描到，这是最省事的办法。（没测试）<br>　　②或者在启动类上加上 @MapperScan 或者 @ComponentScan 注解，手动指定 application 类要扫描哪些包下的注解，如下所示：</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>@SpringBootApplication</pre></td></tr><tr><td data-num="2"></td><td><pre>@ComponentScan<span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"com.xxx.xxx.dao"</span><span class="token punctuation">}</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>　　③或者在接口上添加@Mapper注解。</pre></td></tr><tr><td data-num="4"></td><td><pre>@Mapper</pre></td></tr><tr><td data-num="5"></td><td><pre>public interface UserMapper <span class="token punctuation">{</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">}</span></pre></td></tr></tbody></table></figure><p>问题 3：<br><img data-src="https://img-blog.csdnimg.cn/20201005164810350.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>原因：<br>修改了 mapper 类的名称对应要修改路径<br><img data-src="https://img-blog.csdnimg.cn/20201005164820942.png#pic_center" alt="在这里插入图片描述"></p><p>问题 4：<br>添加数据时未添加外键<br><img data-src="https://img-blog.csdnimg.cn/20201005164831130.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>添加 sql 输入外键 unit_ID<br><img data-src="https://img-blog.csdnimg.cn/2020100516484178.png#pic_center" alt="在这里插入图片描述"></p><p>问题 5:</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>Error starting ApplicationContext. To display the conditions report re-run your application with <span class="token string">'debug'</span> enabled.</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">2020</span>-09-12 <span class="token number">14</span>:40:39.211 ERROR <span class="token number">60268</span> --- <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> o.s.boot.SpringApplication               <span class="token builtin class-name">:</span> Application run failed</pre></td></tr></tbody></table></figure><p>常见注释错误，查看代码中的 @注释<br>问题 6:<br><img data-src="https://img-blog.csdnimg.cn/20201005164915811.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>问题 7：<br>在测试的时候报出<br> 415<br> 更改一下请求头</p><p><img data-src="https://img-blog.csdnimg.cn/20201005165030667.png#pic_center" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Java </category>
          
          <category> SpringBoot框架 </category>
          
          <category> SpringBoot框架常见错误集合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03VUE---拦截路径挂载的问题</title>
      <link href="computer-science/vue/vue-error1/03VUE-%E6%8B%A6%E6%88%AA%E8%B7%AF%E5%BE%84%E6%8C%82%E8%BD%BD%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>computer-science/vue/vue-error1/03VUE-%E6%8B%A6%E6%88%AA%E8%B7%AF%E5%BE%84%E6%8C%82%E8%BD%BD%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="项目场景"><a class="anchor" href="#项目场景">#</a> 项目场景：</h1><p>vscode 中没有报错，但在网页的控制台中出现错误</p><h1 id="问题描述"><a class="anchor" href="#问题描述">#</a> 问题描述：</h1><p>vscode 中没有报错，但在网页的控制台中<br><img data-src="https://img-blog.csdnimg.cn/2020100516264293.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="原因分析"><a class="anchor" href="#原因分析">#</a> 原因分析：</h1><p>拦截路径挂载的问题<br><img data-src="https://img-blog.csdnimg.cn/20201005162702325.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="解决方案"><a class="anchor" href="#解决方案">#</a> 解决方案：</h1><p>在上面添加<br> // 出现问题时使用<br> const originalPush=VueRouter.prototype.push<br>VueRouter.prototype.push=function push(location,onResolve,onReject){<br>if(onResolve || onReject) return  originalPush.call(this,location,onResolve,onReject)<br>return originalPush.call(this,location).catch(err =&gt; err)<br>}</p><p><img data-src="https://img-blog.csdnimg.cn/20201005162735676.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Vue </category>
          
          <category> 前端Vue中常见问题集合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02VUE---没有引入依赖包</title>
      <link href="computer-science/vue/vue-error1/02VUE-%E6%B2%A1%E6%9C%89%E5%BC%95%E5%85%A5%E4%BE%9D%E8%B5%96%E5%8C%85/"/>
      <url>computer-science/vue/vue-error1/02VUE-%E6%B2%A1%E6%9C%89%E5%BC%95%E5%85%A5%E4%BE%9D%E8%B5%96%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h1 id="项目场景"><a class="anchor" href="#项目场景">#</a> 项目场景：</h1><p>在运行 vscode 时，出现错误</p><h1 id="问题描述"><a class="anchor" href="#问题描述">#</a> 问题描述：</h1><p><img data-src="https://img-blog.csdnimg.cn/20201005162316181.png#pic_center" alt="在这里插入图片描述"></p><h1 id="原因分析"><a class="anchor" href="#原因分析">#</a> 原因分析：</h1><p>没有引入依赖包 npm</p><h1 id="解决方案"><a class="anchor" href="#解决方案">#</a> 解决方案：</h1><p>输入</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token function">npm</span> <span class="token function">install</span></pre></td></tr></tbody></table></figure><p>即可</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Vue </category>
          
          <category> 前端Vue中常见问题集合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01web开发需要了解的技术2020-09-02</title>
      <link href="computer-science/vue/vue-study1/01web%E5%BC%80%E5%8F%91%E9%9C%80%E8%A6%81%E4%BA%86%E8%A7%A3%E7%9A%84%E6%8A%80%E6%9C%AF2020-09-02/"/>
      <url>computer-science/vue/vue-study1/01web%E5%BC%80%E5%8F%91%E9%9C%80%E8%A6%81%E4%BA%86%E8%A7%A3%E7%9A%84%E6%8A%80%E6%9C%AF2020-09-02/</url>
      
        <content type="html"><![CDATA[<p>日期：2020——09——02<br>IT 人：小海豚<br>学习内容：<br>大数据<br> oop（面向对象的编程）<br>ood（面向对象的设计）<br>web 开发：<br>Html<br>Js（JavaScript）面向对象语言<br> Css<br> 前端框架：<br>Vue（js 库与后端的一套接口），jquery，react<br> 组件库：<br>Element UI（界面） 常与（VUE 框架一起）<br>Easy UI（界面）</p><p>工具：<br>测试集成在开发过程中<br>移动布局<br> webscocket 协议<br> Git<br> 测试 / 调试工具<br> firebug，postmon<br> 后端：<br>java，python,C#,mysql (构建)<br> 后端框架<br> jsp/selvlet<br>ssm 框架（spring，struts，mybatis）<br>Spring boost：最新框架</p><p>前端后端公共技术<br> svn/git 工具</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Vue </category>
          
          <category> 初学Vue框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VUE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>08django---的装换器</title>
      <link href="computer-science/python/django/course-1/08django-%E7%9A%84%E8%A3%85%E6%8D%A2%E5%99%A8/"/>
      <url>computer-science/python/django/course-1/08django-%E7%9A%84%E8%A3%85%E6%8D%A2%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>日期：20019——10——07<br>IT 人：小海豚<br>学习内容：<br>装换器<br><span class="exturl" data-url="aHR0cHM6Ly9uZXdzLjE2My5jb20vMTkvMDQwNS8wOC9FQzAxN1JGSzAwMDE4OTlPLmh0bWw="> https://news.163.com/19/0405/08/EC017RFK0001899O.html</span></p><p><span class="exturl" data-url="aHR0cHM6Ly9uZXdzLjE2My5jb20vMTkvMDQwNS8wOC9FQzAxSFNTVDAwMDE4OUZILmh0bWw=">https://news.163.com/19/0405/08/EC01HSST000189FH.html</span></p><p>在 app bookapp 的 urls 中<br><img data-src="https://img-blog.csdnimg.cn/20201005160601964.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>​</p><p>注意：&lt;html&gt; 表示可以是任何字母<br>在 app bookapp 的 views 中写入</p><p><img data-src="https://img-blog.csdnimg.cn/20201005160613503.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>​</p><p>在项目的 urls 中修改以下</p><p><img data-src="https://img-blog.csdnimg.cn/20201005160624600.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>​</p><p>在浏览器中输入网址<br><span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo4MDAwLzE5LzA0MDUvMDgvRUMwMUhTU1QwMDAxODlGSC5odG1s"> http://127.0.0.1:8000/19/0405/08/EC01HSST000189FH.html</span></p><p><img data-src="https://img-blog.csdnimg.cn/20201005160639658.png#pic_center" alt="在这里插入图片描述"></p><p>​</p><p>地址装唤器装换<br>字符串 ——》变量接收 ——》传递 path 中的 &lt;html&gt; 变量 ——》在 app bookapp 中的 index 函数的 html 变量接收到 ——》在 format 中输出地址信息<br>第二个地址<br>在浏览器中输入<br><span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo4MDAwLzE5LzA0MDUvMDgvRUMwMTdSRkswMDAxODk5Ty5odG1s"> http://127.0.0.1:8000/19/0405/08/EC017RFK0001899O.html</span></p><p>​<img data-src="https://img-blog.csdnimg.cn/20201005160650493.png#pic_center" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Python </category>
          
          <category> Django框架 </category>
          
          <category> 零基础学Django框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>07django--path的语法</title>
      <link href="computer-science/python/django/course-1/07django-path%E7%9A%84%E8%AF%AD%E6%B3%95/"/>
      <url>computer-science/python/django/course-1/07django-path%E7%9A%84%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>日期：2019——10——06<br>IT 人：小海豚<br>学习内容：<br>Path 的语法<br>从 django2.1 以后用 path 之前用的是 url<br> 标准语法<br> Path (route,view,name=None,**kwargs)<br>Route:<br> 端口以后 url 的地址，到 / 结束，表示路径<br> View:<br> 表示路径匹配成功后，需要调用的视图，必须是个函数如果是 class 的话，必须要用 as_view () 函数装换为函数<br> name：<br>表示别名<br> **kwargs：<br>表示一个字典</p><p>前面两个是必选项<br>创建的 newwebsite002 是之前的，查看 06django<br> 教程<br>在之前的 views 不变<br><img data-src="https://img-blog.csdnimg.cn/20201005160009690.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>​</p><p>在之前创建的 app book 的 urls 中</p><p><img data-src="https://img-blog.csdnimg.cn/20201005160022822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>​</p><p>打开项目所在地址 cmd 开启服务器</p><p>​<img data-src="https://img-blog.csdnimg.cn/20201005160032813.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>成功</p><p><img data-src="https://img-blog.csdnimg.cn/20201005160042503.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>​</p><p>证明服务器已经跑起来了<br>继续刷新</p><p><img data-src="https://img-blog.csdnimg.cn/20201005160052289.png#pic_center" alt="在这里插入图片描述"></p><p>​</p><p>修改 app bookapp 中的 urls</p><p>​<img data-src="https://img-blog.csdnimg.cn/20201005160101176.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>在输入网址查看<br><span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo4MDAwL2luZGV4"> http://127.0.0.1:8000/index</span></p><p><img data-src="https://img-blog.csdnimg.cn/20201005160110848.png#pic_center" alt="在这里插入图片描述"></p><p>​</p><p>输入 http://127.0.0.1:8000/index/web/<br> 查看</p><p>​<img data-src="https://img-blog.csdnimg.cn/20201005160119998.png#pic_center" alt="在这里插入图片描述"></p><p>也可以写成多分级目录<br>修改 app bookapp 中的 urls<br> 注释 #path ('',views.index,name='index'),</p><p><img data-src="https://img-blog.csdnimg.cn/2020100516012813.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>​</p><p>在浏览器中执行<br><span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo4MDAwL2luZGV4L3dlYi9hL2IvYy9pbmRleC5odG1sLw=="> http://127.0.0.1:8000/index/web/a/b/c/index.html/</span></p><p>​<img data-src="https://img-blog.csdnimg.cn/2020100516013813.png#pic_center" alt="在这里插入图片描述"></p><p>成功<br>注意：当出现路径相同时，会自动匹配第一个之后机就默认不匹配了</p><p>​<img data-src="https://img-blog.csdnimg.cn/2020100516014867.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>结果一直是：</p><p><img data-src="https://img-blog.csdnimg.cn/20201005160156332.png#pic_center" alt="在这里插入图片描述"></p><p>​</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Python </category>
          
          <category> Django框架 </category>
          
          <category> 零基础学Django框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>06django--url的讲解</title>
      <link href="computer-science/python/django/course-1/06django-url%E7%9A%84%E8%AE%B2%E8%A7%A3/"/>
      <url>computer-science/python/django/course-1/06django-url%E7%9A%84%E8%AE%B2%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>日期：2019——09——28<br>IT 人：小海豚<br>学习内容：<br>统一资源定位器<br>协议 protocol：http，https，ftp<br> 域名 hostname + 端口 port<br> 路径 path<br> 参数 parmeters<br> 查询 query<br> 描点 fragment<br>django 中配置 urls<br> 创建一个 newwebsite002 的 django 文件和 book 的 app<br> 命令行输入</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>django-admin startproject newwebsite002</pre></td></tr></tbody></table></figure><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token builtin class-name">cd</span> newwebsite002</pre></td></tr></tbody></table></figure><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>ptrhon manage.py startapp book</pre></td></tr></tbody></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20201005155244250.png#pic_center" alt="在这里插入图片描述"></p><p>​</p><p>显示出</p><p><img data-src="https://img-blog.csdnimg.cn/20201005155505621.png#pic_center" alt="在这里插入图片描述"></p><p>​</p><p>在浏览器中检查<br>开启服务器</p><p><img data-src="https://img-blog.csdnimg.cn/20201005155519786.png#pic_center" alt="在这里插入图片描述"></p><p>​</p><p>成功</p><p><img data-src="https://img-blog.csdnimg.cn/20201005155528944.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>​</p><p>在 setting 中配置注册 app book<br> 添加 'book',</p><p><img data-src="https://img-blog.csdnimg.cn/20201005155537408.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>​</p><p>在 app views 视图中写入两个函数</p><p><img data-src="https://img-blog.csdnimg.cn/20201005155546495.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>​</p><p>在 app book 中创建一个 urls 文件<br>进行配置</p><p><img data-src="https://img-blog.csdnimg.cn/202010051555572.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>​</p><p>在 app book urls 中编码</p><p><img data-src="https://img-blog.csdnimg.cn/2020100515560640.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>​</p><p>在项目中做个映射<br>在项目 newwebsite002 的 urls 中编码</p><p>​<br><img data-src="https://img-blog.csdnimg.cn/20201005155615113.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>成功</p><p><img data-src="https://img-blog.csdnimg.cn/20201005155623854.png#pic_center" alt="在这里插入图片描述"></p><p>​</p><p>切换网址后</p><p>​<img data-src="https://img-blog.csdnimg.cn/20201005155631652.png#pic_center" alt="在这里插入图片描述"></p><p>表示成功<br>注意：在 path 语句中在路径中要加上 /</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Python </category>
          
          <category> Django框架 </category>
          
          <category> 零基础学Django框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>05django--mvt介绍</title>
      <link href="computer-science/python/django/course-1/05django-mvt%E4%BB%8B%E7%BB%8D/"/>
      <url>computer-science/python/django/course-1/05django-mvt%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p>日期：20019——09——27</p><p>IT 人：小海豚</p><p>学习内容：</p><p>django 的设计模式</p><p>Models 作用</p><p>封装数据库，</p><p>对数据库进行访问，</p><p>对数据进行增删改查，</p><p>Views 作用</p><p>进行业务逻辑的处理，</p><p>teplates 作用</p><p>模板，主要进行展示，前端</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Python </category>
          
          <category> Django框架 </category>
          
          <category> 零基础学Django框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04django--整体讲解</title>
      <link href="computer-science/python/django/course-1/04django-%E6%95%B4%E4%BD%93%E8%AE%B2%E8%A7%A3/"/>
      <url>computer-science/python/django/course-1/04django-%E6%95%B4%E4%BD%93%E8%AE%B2%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>日期：2019——09——27<br>IT 人：小海豚<br>学习内容：<br>导包的文件</p><p><img data-src="https://img-blog.csdnimg.cn/20201005154700648.png#pic_center" alt="在这里插入图片描述"></p><p>​</p><p>一般都不用但不能够删除</p><p>​<img data-src="https://img-blog.csdnimg.cn/2020100515471044.png#pic_center" alt=""></p><p>settings 配置文件<br> urls 统一资源编译器<br> wsgi 网管接口<br> app 中<br> News<br> 大部分功能在 app news 中完成<br> Mingrations</p><p><img data-src="https://img-blog.csdnimg.cn/20201005154746558.png#pic_center" alt="在这里插入图片描述"></p><p>​</p><p>数据库映射时使用，一般不修改<br><img data-src="https://img-blog.csdnimg.cn/20201005154754927.png#pic_center" alt="在这里插入图片描述"></p><p>​</p><p>admin 管理文件<br> apps 定义 app 名字<br> models 模型写数据库<br> tests 测试文件<br> urls 配置 app 的 urls，和项目的 urls 进行交互<br> views 视图文件<br> Bd.sqlite3 默认使用的数据库<br> Manage.py 项目管理文件</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Python </category>
          
          <category> Django框架 </category>
          
          <category> 零基础学Django框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03django--带有模板的html文件百度</title>
      <link href="computer-science/python/django/course-1/03django-%E5%B8%A6%E6%9C%89%E6%A8%A1%E6%9D%BF%E7%9A%84html%E6%96%87%E4%BB%B6%E7%99%BE%E5%BA%A6/"/>
      <url>computer-science/python/django/course-1/03django-%E5%B8%A6%E6%9C%89%E6%A8%A1%E6%9D%BF%E7%9A%84html%E6%96%87%E4%BB%B6%E7%99%BE%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<p>日期：2019——09——27<br>IT 人：小海豚<br>学习内容：<br>启动服务器</p><p><img data-src="https://img-blog.csdnimg.cn/20201005154029546.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>在上一次创建的 app news 中创建一个<br>模板文件<br><img data-src="https://img-blog.csdnimg.cn/20201005154040619.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>叫<br><img data-src="https://img-blog.csdnimg.cn/2020100515405267.png#pic_center" alt="在这里插入图片描述"></p><p>在创建一个 html 文件<br><img data-src="https://img-blog.csdnimg.cn/20201005154103843.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>叫 baidu</p><p><img data-src="https://img-blog.csdnimg.cn/20201005154113203.png#pic_center" alt="在这里插入图片描述"></p><p>把百度拉入模板文件中，生成目录</p><p><img data-src="https://img-blog.csdnimg.cn/20201005154122534.png#pic_center" alt="在这里插入图片描述"></p><p>打开浏览器搜索百度</p><p><img data-src="https://img-blog.csdnimg.cn/20201005154129176.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img data-src="https://img-blog.csdnimg.cn/2020100515414714.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>复制全部源代码<br>在 html 中使用 baidu<br><img data-src="https://img-blog.csdnimg.cn/20201005154200775.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>修改视图 app news 中的 views</p><p>效果生成<br><img data-src="https://img-blog.csdnimg.cn/20201005154212477.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img data-src="https://img-blog.csdnimg.cn/20201005154221255.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Python </category>
          
          <category> Django框架 </category>
          
          <category> 零基础学Django框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>语言教程网址</title>
      <link href="%E5%B7%A5%E5%85%B7%E6%95%99%E7%A8%8B%E7%BD%91%E5%9D%80/"/>
      <url>%E5%B7%A5%E5%85%B7%E6%95%99%E7%A8%8B%E7%BD%91%E5%9D%80/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 官网教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01Springboot启动时端口被占用</title>
      <link href="computer-science/java/springboot/springboot-error1/01Springboot%E5%90%AF%E5%8A%A8%E6%97%B6%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8/"/>
      <url>computer-science/java/springboot/springboot-error1/01Springboot%E5%90%AF%E5%8A%A8%E6%97%B6%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="项目场景"><a class="anchor" href="#项目场景">#</a> 项目场景：</h1><p>Springboot 在启动时出现端口 8888 被占用</p><h1 id="问题描述"><a class="anchor" href="#问题描述">#</a> 问题描述：</h1><p>Springboot 在启动时出现端口被占用</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>错误提示：</pre></td></tr><tr><td data-num="2"></td><td><pre>Description:</pre></td></tr><tr><td data-num="3"></td><td><pre>Web server failed to start. Port <span class="token number">8888</span> was already <span class="token keyword">in</span> use.</pre></td></tr><tr><td data-num="4"></td><td><pre>Action:</pre></td></tr><tr><td data-num="5"></td><td><pre>Identify and stop the process that<span class="token string">'s listening on port 8888 or configure this application to listen on another port.</span></pre></td></tr><tr><td data-num="6"></td><td><pre>Disconnected from the target VM, address: '<span class="token number">127.0</span>.0.1:54879<span class="token string">', transport: '</span>socket'</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span> Command execution failed.</pre></td></tr><tr><td data-num="8"></td><td><pre>Command execution failed.</pre></td></tr></tbody></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20200928120616508.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="原因分析"><a class="anchor" href="#原因分析">#</a> 原因分析：</h1><p>由于之前开启 vue 项目启动，再启动后端时会报错。</p><h1 id="解决方案"><a class="anchor" href="#解决方案">#</a> 解决方案：</h1><figure class="highlight powershell"><figcaption data-lang="PowerShell"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>netstat <span class="token operator">-</span>aon<span class="token punctuation">|</span>findstr <span class="token string">"9000"</span></pre></td></tr><tr><td data-num="2"></td><td><pre>查看端口号运行进程</pre></td></tr><tr><td data-num="3"></td><td><pre>taskkill <span class="token operator">/</span>pid   进程号  <span class="token operator">-</span>f`</pre></td></tr></tbody></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20200928121040878.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Java </category>
          
          <category> SpringBoot框架 </category>
          
          <category> SpringBoot框架常见错误集合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01Springboot小白详细的安装教程</title>
      <link href="computer-science/java/springboot/springboot-study1/01Springboot%E5%B0%8F%E7%99%BD%E8%AF%A6%E7%BB%86%E7%9A%84%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
      <url>computer-science/java/springboot/springboot-study1/01Springboot%E5%B0%8F%E7%99%BD%E8%AF%A6%E7%BB%86%E7%9A%84%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>&lt;hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1"&gt;</p><h1 id="前言"><a class="anchor" href="#前言">#</a> 前言</h1><p>初学 Springboot 的小白刚安装了 IDEA 分享一下安装教程吧<br> &lt;hr style="border:solid; width:100px; height:1px;" color=#000000 size=1"&gt;</p><h1 id="一-idea是什么"><a class="anchor" href="#一-idea是什么">#</a> 一、IDEA 是什么？</h1><p>IDEA 全称 IntelliJ IDEA，是 java 编程语言开发的集成环境。IntelliJ 在业界被公认为最好的 java 开发工具，尤其在智能代码助手、代码自动提示、重构、JavaEE 支持、各类版本工具 (git、svn 等)、JUnit、CVS 整合、代码分析、 创新的 GUI 设计等方面的功能可以说是超常的。IDEA 是 JetBrains 公司的产品，这家公司总部位于捷克共和国的首都布拉格，开发人员以严谨著称的东欧程序员为主。它的旗舰版本还支持 HTML，CSS，PHP，MySQL，Python 等。免费版只支持 Java,Kotlin 等少数语言。<br>附上百度百科网址： <span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9JbnRlbGxpSiUyMElERUEvOTU0ODM1Mz9mcm9tdGl0bGU9aWRlYSZhbXA7ZnJvbWlkPTE2NzE4MDMmYW1wO2ZyPWFsYWRkaW4=">百度百科了解 IDEA</span><br>IDEA 官网：<span class="exturl" data-url="aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS8=">IDEA 官网</span></p><h1 id="二-安装步骤"><a class="anchor" href="#二-安装步骤">#</a> 二、安装步骤</h1><p>教程采用了微信公众号：软件安装管家<br>很强大，可以安装各种软件</p><h2 id="1安装springboot"><a class="anchor" href="#1安装springboot">#</a> 1. 安装 SpringBoot</h2><p><img data-src="https://img-blog.csdnimg.cn/20200928103032379.png#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200928103103351.png#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200928103120858.png#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200928103154977.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200928103207498.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200928103220927.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><img data-src="https://img-blog.csdnimg.cn/20200928103302209.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200928103329288.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img data-src="https://img-blog.csdnimg.cn/20200928103337491.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200928103345331.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200928103357647.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200928103406738.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200928103413982.png#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200928103423218.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/2020092810343116.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><img data-src="https://img-blog.csdnimg.cn/20200928103437688.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200928103448506.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><img data-src="https://img-blog.csdnimg.cn/20200928103456333.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img data-src="https://img-blog.csdnimg.cn/2020092810350573.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><img data-src="https://img-blog.csdnimg.cn/20200928103522445.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img data-src="https://img-blog.csdnimg.cn/20200928103533260.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/2020092810354238.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200928103550353.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200928103558616.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200928103608978.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/2020092810361991.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img data-src="https://img-blog.csdnimg.cn/20200928103628254.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><img data-src="https://img-blog.csdnimg.cn/20200928103637757.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/2020092810364676.png#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200928103653875.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><img data-src="https://img-blog.csdnimg.cn/20200928103703420.png#pic_center" alt="在这里插入图片描述"></p><h2 id="2安装maven"><a class="anchor" href="#2安装maven">#</a> 2. 安装 maven</h2><p>安装 maven<br>maven 下载官网地址：<span class="exturl" data-url="aHR0cDovL21hdmVuLmFwYWNoZS5vcmcvZG93bmxvYWQuY2dp">maven 下载官网地址</span></p><p><img data-src="https://img-blog.csdnimg.cn/20200928103807392.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200928103948338.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">解压后<br><img data-src="https://img-blog.csdnimg.cn/20200928103959973.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">配置环境变量</p><p><img data-src="https://img-blog.csdnimg.cn/2020092810403492.png#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200928104043979.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200928104055378.png#pic_center" alt="在这里插入图片描述">成功<br>进入 Springboot 官网中<br> Springboot 官网：<span class="exturl" data-url="aHR0cHM6Ly9zcHJpbmcuaW8vcHJvamVjdHMvc3ByaW5nLWJvb3Q=">Springboot 官网</span><br>创建项目网址：<br><span class="exturl" data-url="aHR0cHM6Ly9zdGFydC5zcHJpbmcuaW8v">创建项目网址</span><br><img data-src="https://img-blog.csdnimg.cn/20200928104116509.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200928104818559.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>添加架包<br>用 idea 打开制定架包<br>开启框架，开始代码</p><h1 id="总结"><a class="anchor" href="#总结">#</a> 总结</h1><p>安装完成，开始代码之旅吧<br>如有问题请在下方评论学习，共同进步</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Java </category>
          
          <category> SpringBoot框架 </category>
          
          <category> 小白学SpringBoot框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01vue标签指令</title>
      <link href="computer-science/vue/vue-study1/01vue%E6%A0%87%E7%AD%BE%E6%8C%87%E4%BB%A4/"/>
      <url>computer-science/vue/vue-study1/01vue%E6%A0%87%E7%AD%BE%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p><img data-src="https://img-blog.csdnimg.cn/20200928085720982.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Vue </category>
          
          <category> 初学Vue框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VUE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01Django中出现OperationalError问题</title>
      <link href="computer-science/python/django/django-error1/01Django%E4%B8%AD%E5%87%BA%E7%8E%B0OperationalError%E9%97%AE%E9%A2%98/"/>
      <url>computer-science/python/django/django-error1/01Django%E4%B8%AD%E5%87%BA%E7%8E%B0OperationalError%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="项目场景"><a class="anchor" href="#项目场景">#</a> 项目场景：</h1><p>Django 中连接数据库时出现错误，采用了一个大牛的博客解决的，这里附上链接 https://blog.csdn.net/Wathet_blue/article/details/105401717?utm_medium=distribute.pc_relevant.none-task-blog-title-2&amp;spm=1001.2101.3001.4242</p><h1 id="问题描述"><a class="anchor" href="#问题描述">#</a> 问题描述：</h1><p>出现错误！OperationalError: (1366, “Incorrect string value: ‘\xE4\xB9\x8B\xE7\xBE\x8E’ for column ‘name’ at row 1”)</p><h1 id="原因分析"><a class="anchor" href="#原因分析">#</a> 原因分析：</h1><p>数据库的编码规则没有使用 utf8，而在存储数据时添加了中文数据，导致报错。</p><h1 id="解决方案"><a class="anchor" href="#解决方案">#</a> 解决方案：</h1><p>删除数据库 (有数据先备份)</p><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">drop</span> <span class="token keyword">database</span> <span class="token punctuation">[</span>database_name<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr></tbody></table></figure><p>指定编码重建数据库 或者 修改数据库编码后重建数据库</p><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token keyword">create</span> <span class="token keyword">database</span> <span class="token punctuation">[</span>database_name<span class="token punctuation">]</span> <span class="token keyword">default</span> <span class="token keyword">character</span> <span class="token keyword">set</span> utf8 <span class="token keyword">collate</span> utf8_general_ci<span class="token punctuation">;</span></pre></td></tr></tbody></table></figure><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>show variables like <span class="token string">'character%'</span><span class="token punctuation">;</span><span class="token operator">//</span> 查看mysql的编码</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token builtin">set</span> character_set_client<span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token operator">//</span> 设置客户端的编码为utf8</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token builtin">set</span> character_set_connection<span class="token operator">=</span>utf8<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token builtin">set</span> character_set_database<span class="token operator">=</span>utf8<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token builtin">set</span> character_set_results<span class="token operator">=</span>utf8<span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token builtin">set</span> character_set_server<span class="token operator">=</span>utf8<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token builtin">set</span> character_set_system<span class="token operator">=</span>utf8<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>create database <span class="token punctuation">[</span>database_name<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">//</span> 新创建数据库使用的编码规则是utf8</pre></td></tr></tbody></table></figure><p>重新迁移数据库</p><figure class="highlight powershell"><figcaption data-lang="PowerShell"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>python manage<span class="token punctuation">.</span>py makemigrations</pre></td></tr><tr><td data-num="2"></td><td><pre>python manage<span class="token punctuation">.</span>py migrate</pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Python </category>
          
          <category> Django框架 </category>
          
          <category> 前端Django中常见的错误集合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01vue运行出错Cannot find module &#39;stylus&#39;</title>
      <link href="computer-science/vue/vue-error1/01vue%E4%B8%AD%E5%8C%85%E5%AF%BC%E5%85%A5%E5%87%BA%E9%94%99code-ENOLOCAL/"/>
      <url>computer-science/vue/vue-error1/01vue%E4%B8%AD%E5%8C%85%E5%AF%BC%E5%85%A5%E5%87%BA%E9%94%99code-ENOLOCAL/</url>
      
        <content type="html"><![CDATA[<h1 id="项目场景"><a class="anchor" href="#项目场景">#</a> 项目场景：</h1><p>本人小白记录在初学 vue 中的一些小问题，在使用 npm run serve 运行 vue 项目时，出现错误</p><p>&lt;hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1"&gt;</p><h1 id="问题描述"><a class="anchor" href="#问题描述">#</a> 问题描述：</h1><p>出现错误<br><img data-src="https://img-blog.csdnimg.cn/20200928080259916.png#pic_center" alt="在这里插入图片描述"></p><h1 id="原因分析"><a class="anchor" href="#原因分析">#</a> 原因分析：</h1><p>没有引入相关依赖</p><h1 id="解决方案"><a class="anchor" href="#解决方案">#</a> 解决方案：</h1><p>需要执行</p><figure class="highlight powershell"><figcaption data-lang="PowerShell"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>npm install</pre></td></tr></tbody></table></figure><p>引入相关依赖即可解决问题</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Vue </category>
          
          <category> 前端Vue中常见问题集合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02django带app的网站创建</title>
      <link href="computer-science/python/django/course-1/02django%E5%B8%A6app%E7%9A%84%E7%BD%91%E7%AB%99%E5%88%9B%E5%BB%BA/"/>
      <url>computer-science/python/django/course-1/02django%E5%B8%A6app%E7%9A%84%E7%BD%91%E7%AB%99%E5%88%9B%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p><span class="label">python</span><br><span class="label primary"> 前端框架</span><br><img data-src="https://img-blog.csdnimg.cn/20191006171226655.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight java"><figcaption data-lang="java"><span>标题</span></figcaption><table><tbody><tr class="marked"><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 输入 Scan 之后，按下键盘 Alt + “/” 键，Eclipse 下自动补全。</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr class="marked"><td data-num="6"></td><td><pre><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span>println <span class="token punctuation">(</span>in<span class="token punctuation">.</span>nextLine <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="7"></td><td><pre><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span>println <span class="token punctuation">(</span><span class="token string">"Hello"</span> <span class="token operator">+</span> <span class="token string">"world."</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></tbody></table></figure><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tbody><tr><td data-num="1"></td><td data-command="[root@localhost] $"></td><td><pre><span class="token builtin class-name">pwd</span></pre></td></tr><tr><td data-num="2"></td><td data-command=""></td><td><pre>/usr/home/chris/bin</pre></td></tr><tr><td data-num="3"></td><td data-command=""></td><td><pre><span class="token function">ls</span> -la</pre></td></tr><tr><td data-num="4"></td><td data-command="[admin@remotehost] #"></td><td><pre>total <span class="token number">2</span></pre></td></tr><tr><td data-num="5"></td><td data-command="[admin@remotehost] #"></td><td><pre>drwxr-xr-x   <span class="token number">2</span> chris  chris     <span class="token number">11</span> Jan <span class="token number">10</span> <span class="token number">16</span>:48 <span class="token builtin class-name">.</span></pre></td></tr><tr><td data-num="6"></td><td data-command="[admin@remotehost] #"></td><td><pre>drwxr--r-x  <span class="token number">45</span> chris  chris     <span class="token number">92</span> Feb <span class="token number">14</span> <span class="token number">11</span>:10 <span class="token punctuation">..</span></pre></td></tr><tr><td data-num="7"></td><td data-command=""></td><td><pre>-rwxr-xr-x   <span class="token number">1</span> chris  chris    <span class="token number">444</span> Aug <span class="token number">25</span>  <span class="token number">2013</span> backup</pre></td></tr><tr><td data-num="8"></td><td data-command=""></td><td><pre>-rwxr-xr-x   <span class="token number">1</span> chris  chris    <span class="token number">642</span> Jan <span class="token number">17</span> <span class="token number">14</span>:42 deploy</pre></td></tr></tbody></table></figure><ol><li class="quiz true"><p>编译时多态主要指运算符重载与函数重载，而运行时多态主要指虚函数。</p></li><li class="quiz multi"><p>有基类  <code>SHAPE</code> ，派生类  <code>CIRCLE</code> ，声明如下变量： </p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>SHAPE shape1<span class="token punctuation">,</span><span class="token operator">*</span>p1<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>CIRCLE circle1<span class="token punctuation">,</span><span class="token operator">*</span>q1<span class="token punctuation">;</span></pre></td></tr></tbody></table></figure><p>下列哪些项是 “派生类对象替换基类对象”。</p><ul class="options"><li class="correct"><code>p1=&amp;circle1;</code> </li><li><code>q1=&amp;shape1;</code></li><li class="correct"><code>shape1=circle1;</code> </li><li><code>circle1=shape1;</code></li></ul><blockquote><ul class="options"><li>✔️ 令基类对象的指针指向派生类对象</li><li>❌ 派生类指针指向基类的引用</li><li>✔️ 派生类对象给基类对象赋值</li><li>❌ 基类对象给派生类对象赋值</li></ul></blockquote></li><li class="quiz"><p>下列叙述正确的是 <span class="gap"></span> 。</p><ul class="options"><li>虚函数只能定义成无参函数</li><li>虚函数不能有返回值</li><li>能定义虚构造函数</li><li class="correct">A、B、C 都不对</li></ul></li><li class="quiz fill"><p>如果定义  <code>int e=8; double f=6.4, g=8.9;</code> ，则表达式  <code>f+int (e/3*int (f+g)/2)%4</code>  的值为 <span class="gap">9.4</span>。</p><blockquote><p>注意运算顺序和数据类型<br><span class="mistake"> 8.4</span></p></blockquote></li></ol><p>😘<br>💍<br>🎶</p><p><span class="label">python</span><br><span class="label primary">primary</span><br><span class="label info">info</span><br><span class="label success">✔️success</span><br><span class="label warning">warning</span><br><span class="label danger">💔danger</span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Python </category>
          
          <category> Django框架 </category>
          
          <category> 零基础学Django框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01django-hello world简单例子</title>
      <link href="computer-science/python/django/course-1/01django-hello-world%E7%AE%80%E5%8D%95%E4%BE%8B%E5%AD%90/"/>
      <url>computer-science/python/django/course-1/01django-hello-world%E7%AE%80%E5%8D%95%E4%BE%8B%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<p><span class="label">python</span><br><span class="label primary"> 前端框架</span></p><h2 id="01django-hello-world简单例子"><a class="anchor" href="#01django-hello-world简单例子">#</a> 01django-hello world 简单例子</h2><p><strong>加粗样式</strong><br>日期：2019——09——26<br>IT 人： 小海豚 学习内容：<br>创建一个新的 django 文件 命令：</p><figure class="highlight bash"><figcaption data-lang="bash"><span>h</span></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>django—admin startproject mywebsite创建文件 开启服务器</pre></td></tr></tbody></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20190927111611939.png" alt="在这里插入图片描述"></p><figure class="highlight bash"><figcaption data-lang="bash"><span>h</span></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>Python manage.py runserver</pre></td></tr></tbody></table></figure><p>启动服务器<br>成功<br><img data-src="https://img-blog.csdnimg.cn/20190927111633701.png" alt="在这里插入图片描述"><br>创建一个 views 文件 Python 的 在其中编辑<br><img data-src="https://img-blog.csdnimg.cn/20190927111715673.png" alt="在这里插入图片描述"><br>在 url 中修改<br><img data-src="https://img-blog.csdnimg.cn/20190927111722806.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA1NDc1Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在浏览器中进行刷新<br><img data-src="https://img-blog.csdnimg.cn/2019092711173328.png" alt="在这里插入图片描述"><br>注意：服务器要开启</p><figure class="highlight bash"><figcaption data-lang="bash"><span>h   </span></figcaption><table><tbody><tr><td data-num="1"></td><td><pre>Python manage.py runserve</pre></td></tr></tbody></table></figure><pre><code> 原文出自[易百教程] 转载请保留原文链接: https://www.yiibai.com/geek/detail/1184</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Python </category>
          
          <category> Django框架 </category>
          
          <category> 零基础学Django框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客文章</title>
      <link href="records/live-record/live-blog/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
      <url>records/live-record/live-blog/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<p>你好！ 这是你第一次使用 <strong>Markdown 编辑器</strong> 所展示的欢迎页。如果你想学习如何使用 Markdown 编辑器，可以仔细阅读这篇文章，了解一下 Markdown 的基本语法知识。</p><h2 id="新的改变"><a class="anchor" href="#新的改变">#</a> 新的改变</h2><p>我们对 Markdown 编辑器进行了一些功能拓展与语法支持，除了标准的 Markdown 编辑器功能，我们增加了如下几点新功能，帮助你用它写博客：</p><ol><li><strong>全新的界面设计</strong> ，将会带来全新的写作体验；</li><li>在创作中心设置你喜爱的代码高亮样式，Markdown <strong>将代码片显示选择的高亮样式</strong> 进行展示；</li><li>增加了 <strong>图片拖拽</strong> 功能，你可以将本地的图片直接拖拽到编辑区域直接展示；</li><li>全新的 <strong>KaTeX 数学公式</strong> 语法；</li><li>增加了支持<strong>甘特图的 mermaid 语法<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></strong> 功能；</li><li>增加了 <strong>多屏幕编辑</strong> Markdown 文章功能；</li><li>增加了 <strong>焦点写作模式、预览模式、简洁写作模式、左右区域同步滚轮设置</strong> 等功能，功能按钮位于编辑区域与预览区域中间；</li><li>增加了 <strong>检查列表</strong> 功能。</li></ol><h2 id="功能快捷键"><a class="anchor" href="#功能快捷键">#</a> 功能快捷键</h2><p>撤销：&lt;kbd&gt;Ctrl/Command&lt;/kbd&gt; + &lt;kbd&gt;Z&lt;/kbd&gt;<br> 重做：&lt;kbd&gt;Ctrl/Command&lt;/kbd&gt; + &lt;kbd&gt;Y&lt;/kbd&gt;<br> 加粗：&lt;kbd&gt;Ctrl/Command&lt;/kbd&gt; + &lt;kbd&gt;B&lt;/kbd&gt;<br> 斜体：&lt;kbd&gt;Ctrl/Command&lt;/kbd&gt; + &lt;kbd&gt;I&lt;/kbd&gt;<br> 标题：&lt;kbd&gt;Ctrl/Command&lt;/kbd&gt; + &lt;kbd&gt;Shift&lt;/kbd&gt; + &lt;kbd&gt;H&lt;/kbd&gt;<br> 无序列表：&lt;kbd&gt;Ctrl/Command&lt;/kbd&gt; + &lt;kbd&gt;Shift&lt;/kbd&gt; + &lt;kbd&gt;U&lt;/kbd&gt;<br> 有序列表：&lt;kbd&gt;Ctrl/Command&lt;/kbd&gt; + &lt;kbd&gt;Shift&lt;/kbd&gt; + &lt;kbd&gt;O&lt;/kbd&gt;<br> 检查列表：&lt;kbd&gt;Ctrl/Command&lt;/kbd&gt; + &lt;kbd&gt;Shift&lt;/kbd&gt; + &lt;kbd&gt;C&lt;/kbd&gt;<br> 插入代码：&lt;kbd&gt;Ctrl/Command&lt;/kbd&gt; + &lt;kbd&gt;Shift&lt;/kbd&gt; + &lt;kbd&gt;K&lt;/kbd&gt;<br> 插入链接：&lt;kbd&gt;Ctrl/Command&lt;/kbd&gt; + &lt;kbd&gt;Shift&lt;/kbd&gt; + &lt;kbd&gt;L&lt;/kbd&gt;<br> 插入图片：&lt;kbd&gt;Ctrl/Command&lt;/kbd&gt; + &lt;kbd&gt;Shift&lt;/kbd&gt; + &lt;kbd&gt;G&lt;/kbd&gt;<br> 查找：&lt;kbd&gt;Ctrl/Command&lt;/kbd&gt; + &lt;kbd&gt;F&lt;/kbd&gt;<br> 替换：&lt;kbd&gt;Ctrl/Command&lt;/kbd&gt; + &lt;kbd&gt;G&lt;/kbd&gt;</p><h2 id="合理的创建标题有助于目录的生成"><a class="anchor" href="#合理的创建标题有助于目录的生成">#</a> 合理的创建标题，有助于目录的生成</h2><p>直接输入 1 次 &lt;kbd&gt;#&lt;/kbd&gt;，并按下 &lt; kbd&gt;space&lt;/kbd &gt; 后，将生成 1 级标题。<br>输入 2 次 &lt;kbd&gt;#&lt;/kbd&gt;，并按下 &lt; kbd&gt;space&lt;/kbd &gt; 后，将生成 2 级标题。<br>以此类推，我们支持 6 级标题。有助于使用 <code>TOC</code>  语法后生成一个完美的目录。</p><h2 id="如何改变文本的样式"><a class="anchor" href="#如何改变文本的样式">#</a> 如何改变文本的样式</h2><p><em>强调文本</em> <em>强调文本</em></p><p><strong>加粗文本</strong> <strong>加粗文本</strong></p><p><mark>标记文本</mark></p><p><s>删除文本</s></p><blockquote><p>引用文本</p></blockquote><p>H<sub>2</sub>O is 是液体。</p><p>2<sup>10</sup> 运算结果是 1024.</p><h2 id="插入链接与图片"><a class="anchor" href="#插入链接与图片">#</a> 插入链接与图片</h2><p>链接: <span class="exturl" data-url="aHR0cHM6Ly93d3cuY3Nkbi5uZXQv">link</span>.</p><p>图片: <img data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw" alt="Alt"></p><p>带尺寸的图片: ![Alt](<span class="exturl" data-url="aHR0cHM6Ly9pbWdjb252ZXJ0LmNzZG5pbWcuY24vYUhSMGNITTZMeTloZG1GMFlYSXVZM05rYmk1dVpYUXZOeTgzTDBJdk1WOXlZV3htWDJoNE1UWXpZMjl0TG1wd1p3">https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw</span> =30x30)</p><p>居中的图片: <img data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center" alt="Alt"></p><p>居中并且带尺寸的图片: ![Alt](<span class="exturl" data-url="aHR0cHM6Ly9pbWdjb252ZXJ0LmNzZG5pbWcuY24vYUhSMGNITTZMeTloZG1GMFlYSXVZM05rYmk1dVpYUXZOeTgzTDBJdk1WOXlZV3htWDJoNE1UWXpZMjl0TG1wd1p3I3BpY19jZW50ZXI=">https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center</span> =30x30)</p><p>当然，我们为了让用户更加便捷，我们增加了图片拖拽功能。</p><h2 id="如何插入一段漂亮的代码片"><a class="anchor" href="#如何插入一段漂亮的代码片">#</a> 如何插入一段漂亮的代码片</h2><p>去<span class="exturl" data-url="aHR0cHM6Ly9tcC5jc2RuLm5ldC9jb25zb2xlL2NvbmZpZ0Jsb2c=">博客设置</span>页面，选择一款你喜欢的代码片高亮样式，下面展示同样高亮的  <code>代码片</code> .</p><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tbody><tr><td data-num="1"></td><td><pre><span class="token comment">// An highlighted block</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">'bar'</span><span class="token punctuation">;</span></pre></td></tr></tbody></table></figure><h2 id="生成一个适合你的列表"><a class="anchor" href="#生成一个适合你的列表">#</a> 生成一个适合你的列表</h2><ul><li>项目<ul><li>项目<ul><li>项目</li></ul></li></ul></li></ul><ol><li>项目 1</li><li>项目 2</li><li>项目 3</li></ol><ul class="task-list"><li class="task-list-item"><input type="checkbox" id="cbx_0" disabled="true"><label for="cbx_0"> 计划任务</label></li><li class="task-list-item"><input type="checkbox" id="cbx_1" checked="true" disabled="true"><label for="cbx_1"> 完成任务</label></li></ul><h2 id="创建一个表格"><a class="anchor" href="#创建一个表格">#</a> 创建一个表格</h2><p>一个简单的表格是这么创建的：</p><table><thead><tr><th>项目</th><th>Value</th></tr></thead><tbody><tr><td>电脑</td><td>$1600</td></tr><tr><td>手机</td><td>$12</td></tr><tr><td>导管</td><td>$1</td></tr></tbody></table><h3 id="设定内容居中-居左-居右"><a class="anchor" href="#设定内容居中-居左-居右">#</a> 设定内容居中、居左、居右</h3><p>使用 <code>:---------:</code>  居中<br>使用 <code>:----------</code>  居左<br>使用 <code>----------:</code>  居右</p><table><thead><tr><th style="text-align:center">第一列</th><th style="text-align:right">第二列</th><th style="text-align:left">第三列</th></tr></thead><tbody><tr><td style="text-align:center">第一列文本居中</td><td style="text-align:right">第二列文本居右</td><td style="text-align:left">第三列文本居左</td></tr></tbody></table><h3 id="smartypants"><a class="anchor" href="#smartypants">#</a> SmartyPants</h3><p>SmartyPants 将 ASCII 标点字符转换为 “智能” 印刷标点 HTML 实体。例如：</p><table><thead><tr><th>TYPE</th><th>ASCII</th><th><abbr title="超文本标记语言">HTML</abbr></th></tr></thead><tbody><tr><td>Single backticks</td><td><code>'Isn't this fun?'</code></td><td>'Isn't this fun?'</td></tr><tr><td>Quotes</td><td><code>"Isn't this fun?"</code></td><td>"Isn't this fun?"</td></tr><tr><td>Dashes</td><td><code>-- is en-dash, --- is em-dash</code></td><td>-- is en-dash, --- is em-dash</td></tr></tbody></table><h2 id="创建一个自定义列表"><a class="anchor" href="#创建一个自定义列表">#</a> 创建一个自定义列表</h2><dl><dt>Markdown</dt><dd>Text-to-<abbr title="超文本标记语言">HTML</abbr> conversion tool</dd><dt>Authors</dt><dd>John</dd><dd>Luke</dd></dl><h2 id="如何创建一个注脚"><a class="anchor" href="#如何创建一个注脚">#</a> 如何创建一个注脚</h2><p>一个具有注脚的文本。<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></p><h2 id="注释也是必不可少的"><a class="anchor" href="#注释也是必不可少的">#</a> 注释也是必不可少的</h2><p>Markdown 将文本转换为 <abbr title="超文本标记语言">HTML</abbr>。</p><h2 id="katex数学公式"><a class="anchor" href="#katex数学公式">#</a> KaTeX 数学公式</h2><p>您可以使用渲染 LaTeX 数学表达式 <span class="exturl" data-url="aHR0cHM6Ly9raGFuLmdpdGh1Yi5pby9LYVRlWC8=">KaTeX</span>:</p><p>Gamma 公式展示 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Γ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">!</mo><mspace width="1em"></mspace><mi mathvariant="normal">∀</mi><mi>n</mi><mo>∈</mo><mi mathvariant="double-struck">N</mi></mrow><annotation encoding="application/x-tex">\Gamma(n) = (n-1)!\quad\foralln\in\mathbb N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Γ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mclose">!</span><span class="mspace" style="margin-right:1em;"></span><span class="mord">∀</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68889em;vertical-align:0em;"></span><span class="mord mathbb">N</span></span></span></span> 是通过欧拉积分</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">Γ</mi><mo stretchy="false">(</mo><mi>z</mi><mo stretchy="false">)</mo><mo>=</mo><msubsup><mo>∫</mo><mn>0</mn><mi mathvariant="normal">∞</mi></msubsup><msup><mi>t</mi><mrow><mi>z</mi><mo>−</mo><mn>1</mn></mrow></msup><msup><mi>e</mi><mrow><mo>−</mo><mi>t</mi></mrow></msup><mi>d</mi><mi>t</mi><mtext> </mtext><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">\Gamma(z) = \int_0^\infty t^{z-1}e^{-t}dt\,.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Γ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.326242em;vertical-align:-0.9119499999999999em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.414292em;"><span style="top:-1.7880500000000001em;margin-left:-0.44445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span><span style="top:-3.8129000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">∞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9119499999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.843556em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span></span><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span></span></span></span></span></p><blockquote><p>你可以找到更多关于的信息 <strong>LaTeX</strong> 数学表达式<span class="exturl" data-url="aHR0cDovL21ldGEubWF0aC5zdGFja2V4Y2hhbmdlLmNvbS9xdWVzdGlvbnMvNTAyMC9tYXRoamF4LWJhc2ljLXR1dG9yaWFsLWFuZC1xdWljay1yZWZlcmVuY2U="> here</span>.</p></blockquote><h2 id="新的甘特图功能丰富你的文章"><a class="anchor" href="#新的甘特图功能丰富你的文章">#</a> 新的甘特图功能，丰富你的文章</h2><pre>TimeoutError: Navigation timeout of 30000 ms exceeded</pre><ul><li>关于 <strong>甘特图</strong> 语法，参考 <span class="exturl" data-url="aHR0cHM6Ly9tZXJtYWlkanMuZ2l0aHViLmlvLw==">这儿</span>，</li></ul><h2 id="uml-图表"><a class="anchor" href="#uml-图表">#</a> UML 图表</h2><p>可以使用 UML 图表进行渲染。 <span class="exturl" data-url="aHR0cHM6Ly9tZXJtYWlkanMuZ2l0aHViLmlvLw==">Mermaid</span>. 例如下面产生的一个序列图：</p><pre>TimeoutError: Navigation timeout of 30000 ms exceeded</pre><p>这将产生一个流程图。:</p><pre class="mermaid graph"><svg id="mermaid-1702006369857" width="100%" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" height="144" style="max-width: 397.8999938964844px;" viewBox="0 0 397.8999938964844 144"><g><g class="output"><g class="clusters"></g><g class="edgePaths"><g class="edgePath LS-A LE-B" id="L-A-B" style="opacity: 1;"><path class="path" d="M74.86516853932585,52.5L117,27.5L188.5,27.5" marker-end="url(#arrowhead15)" style="fill:none"></path><defs><marker id="arrowhead15" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path></marker></defs></g><g class="edgePath LS-A LE-C" id="L-A-C" style="opacity: 1;"><path class="path" d="M74.86516853932585,91.5L117,116.5L158,116.5" marker-end="url(#arrowhead16)" style="fill:none"></path><defs><marker id="arrowhead16" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path></marker></defs></g><g class="edgePath LS-B LE-D" id="L-B-D" style="opacity: 1;"><path class="path" d="M227.5,27.5L283,27.5L324.9986416572882,56.00135757977234" marker-end="url(#arrowhead17)" style="fill:none"></path><defs><marker id="arrowhead17" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path></marker></defs></g><g class="edgePath LS-C LE-D" id="L-C-D" style="opacity: 1;"><path class="path" d="M258,116.5L283,116.5L324.9986425683947,88.99864180545526" marker-end="url(#arrowhead18)" style="fill:none"></path><defs><marker id="arrowhead18" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path></marker></defs></g></g><g class="edgeLabels"><g class="edgeLabel" transform="translate(117,27.5)" style="opacity: 1;"><g transform="translate(-16,-9.5)" class="label"><rect rx="0" ry="0" width="31.984375" height="19.03125"></rect><text><tspan xml:space="preserve" dy="1em" x="1">链接</tspan></text></g></g><g class="edgeLabel" transform="" style="opacity: 1;"><g transform="translate(0,0)" class="label"><rect rx="0" ry="0" width="0" height="0"></rect><text><tspan xml:space="preserve" dy="1em" x="1"></tspan></text></g></g><g class="edgeLabel" transform="" style="opacity: 1;"><g transform="translate(0,0)" class="label"><rect rx="0" ry="0" width="0" height="0"></rect><text><tspan xml:space="preserve" dy="1em" x="1"></tspan></text></g></g><g class="edgeLabel" transform="" style="opacity: 1;"><g transform="translate(0,0)" class="label"><rect rx="0" ry="0" width="0" height="0"></rect><text><tspan xml:space="preserve" dy="1em" x="1"></tspan></text></g></g></g><g class="nodes"><g class="node default" id="flowchart-A-8" transform="translate(42,72)" style="opacity: 1;"><rect rx="0" ry="0" x="-34" y="-19.5" width="68" height="39" class="label-container"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-24,-9.5)"><text style=""><tspan xml:space="preserve" dy="1em" x="1">长方形</tspan></text></g></g></g><g class="node default" id="flowchart-B-9" transform="translate(208,27.5)" style="opacity: 1;"><circle x="-18" y="-19.5" r="19.5" class="label-container"></circle><g class="label" transform="translate(0,0)"><g transform="translate(-8,-9.5)"><text style=""><tspan xml:space="preserve" dy="1em" x="1">圆</tspan></text></g></g></g><g class="node default" id="flowchart-C-11" transform="translate(208,116.5)" style="opacity: 1;"><rect rx="5" ry="5" x="-50" y="-19.5" width="100" height="39" class="label-container"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-40,-9.5)"><text style=""><tspan xml:space="preserve" dy="1em" x="1">圆角长方形</tspan></text></g></g></g><g class="node default" id="flowchart-D-13" transform="translate(348.95000076293945,72)" style="opacity: 1;"><polygon points="40.95,0 81.9,-40.95 40.95,-81.9 0,-40.95" transform="translate(-40.95,40.95)" class="label-container"></polygon><g class="label" transform="translate(0,0)"><g transform="translate(-16,-9.5)"><text style=""><tspan xml:space="preserve" dy="1em" x="1">菱形</tspan></text></g></g></g></g></g></g></svg></pre><ul><li>关于 <strong>Mermaid</strong> 语法，参考 <span class="exturl" data-url="aHR0cHM6Ly9tZXJtYWlkanMuZ2l0aHViLmlvLw==">这儿</span>，</li></ul><h2 id="flowchart流程图"><a class="anchor" href="#flowchart流程图">#</a> FLowchart 流程图</h2><p>我们依旧会支持 flowchart 的流程图：</p><pre>Error: Evaluation failed: DOMException: Failed to execute 'removeChild' on 'Node': The node to be removed is not a child of this node.    at __puppeteer_evaluation_script__:2:37</pre><ul><li>关于 <strong>Flowchart 流程图</strong> 语法，参考 <span class="exturl" data-url="aHR0cDovL2FkcmFpLmdpdGh1Yi5pby9mbG93Y2hhcnQuanMv">这儿</span>.</li></ul><h2 id="导出与导入"><a class="anchor" href="#导出与导入">#</a> 导出与导入</h2><h3 id="导出"><a class="anchor" href="#导出">#</a> 导出</h3><p>如果你想尝试使用此编辑器，你可以在此篇文章任意编辑。当你完成了一篇文章的写作，在上方工具栏找到 <strong>文章导出</strong> ，生成一个.md 文件或者.html 文件进行本地保存。</p><h3 id="导入"><a class="anchor" href="#导入">#</a> 导入</h3><p>如果你想加载一篇你写过的.md 文件，在上方工具栏可以选择导入功能进行对应扩展名的文件导入，<br>继续你的创作。</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly9tZXJtYWlkanMuZ2l0aHViLmlvLw==">mermaid 语法说明</span> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>注脚的解释 <a href="#fnref2" class="footnote-backref">↩︎</a></p></li></ol></section><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 心得记录 </category>
          
          <category> 生活记录 </category>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
